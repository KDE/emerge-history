diff -Nru kdelibs-4.6.2.orig/kjs/CMakeLists.txt kdelibs-4.6.2/kjs/CMakeLists.txt
--- kdelibs-4.6.2.orig/kjs/CMakeLists.txt	2011-04-01 15:55:51.000000000 +0200
+++ kdelibs-4.6.2/kjs/CMakeLists.txt	2011-04-27 20:16:09.187826100 +0200
@@ -201,7 +201,7 @@
 kde4_add_library(${KJSLIBNAME} ${LIBRARY_TYPE} ${kjs_LIB_SRCS})
 
 if(WIN32)
-   target_link_libraries(${KJSLIBNAME} ${KDEWIN_LIBRARIES})
+   target_link_libraries(${KJSLIBNAME} ${KDEWIN_LIBRARIES} ${QT_QTCORE_LIBRARY})
 endif(WIN32)
 
 if(CMAKE_THREAD_LIBS_INIT)
diff -Nru kdelibs-4.6.2.orig/kjs/date_object.cpp kdelibs-4.6.2/kjs/date_object.cpp
--- kdelibs-4.6.2.orig/kjs/date_object.cpp	2011-04-01 15:55:51.000000000 +0200
+++ kdelibs-4.6.2/kjs/date_object.cpp	2011-04-27 19:41:33.088080000 +0200
@@ -62,6 +62,7 @@
 
 #if PLATFORM(WIN_OS)
 #include <windows.h>
+#include <QLibrary>
 #define copysign(x, y) _copysign(x, y)
 #define snprintf _snprintf
 #if !COMPILER(GCC)
@@ -75,6 +76,12 @@
 #include "wtf/DisallowCType.h"
 #include "wtf/ASCIICType.h"
 
+typedef BOOL (WINAPI *PtrTzSpecificLocalTimeToSystemTime )(LPTIME_ZONE_INFORMATION lpTimeZoneInformation,
+                                                           LPSYSTEMTIME lpLocalTime,
+                                                           LPSYSTEMTIME lpUniversalTime
+);
+static PtrTzSpecificLocalTimeToSystemTime pTzSpecificLocalTimeToSystemTime = 0;
+
 // GCC cstring uses these automatically, but not all implementations do.
 using std::strlen;
 using std::strcpy;
@@ -936,6 +943,57 @@
 }
 #endif
 
+static bool TzSpecificLocalTimeToSystemTime_Portable( TIME_ZONE_INFORMATION* tz,
+                                                      SYSTEMTIME *i_stLocal,
+                                                      SYSTEMTIME *o_stUniversal )
+{
+
+    // the method below was introduced in XP. If it's there, use it, otherwise
+    // fall back to doing things manually
+    if (!pTzSpecificLocalTimeToSystemTime) {
+        QLibrary kernelLib(QLatin1String("kernel32"));
+        pTzSpecificLocalTimeToSystemTime  = (PtrTzSpecificLocalTimeToSystemTime)kernelLib.resolve("TzSpecificLocalTimeToSystemTime");
+    }
+
+    if ( pTzSpecificLocalTimeToSystemTime )
+        return pTzSpecificLocalTimeToSystemTime( tz, i_stLocal , o_stUniversal ) != 0;
+    
+    // the algorithm is:
+    // - switch to the desired timezone temporarily
+    // - convert system time to (local) file time in that timezone
+    // - convert local file time to utc file time
+    // - convert utc file time to system time
+    // - reset timezone
+    FILETIME ft, ft_utc;
+    int result = 1;
+    TIME_ZONE_INFORMATION currentTimeZone;
+    result = GetTimeZoneInformation(&currentTimeZone);
+    if ( result == TIME_ZONE_ID_INVALID ) {
+        return false;
+    }
+    result = SetTimeZoneInformation(tz);
+    if ( result == 0 ) {
+        return false;
+    }
+    result = SystemTimeToFileTime(i_stLocal, &ft);
+    if ( result == 0 ) {
+        return false;
+    }
+    result = LocalFileTimeToFileTime(&ft, &ft_utc);
+    if ( result == 0 ) {
+        return false;
+    }
+    result = FileTimeToSystemTime(&ft_utc,o_stUniversal);
+    if ( result == 0 ) {
+        return false;
+    }
+    result = SetTimeZoneInformation(&currentTimeZone);
+    if ( result == 0 ) {
+        return false;
+    }
+    return true;
+}
+
 static double makeTime(tm *t, double ms, bool utc)
 {
     int utcOffset;
@@ -1003,7 +1061,7 @@
     st.wSecond = t->tm_sec;
     st.wMilliseconds = 0;
 
-    TzSpecificLocalTimeToSystemTime(0, &st, &dt);        
+    TzSpecificLocalTimeToSystemTime_Portable(0, &st, &dt);
     SystemTimeToUnixTime(&dt, &tval);
 
     return (tval + utcOffset) * msPerSecond + ms;
