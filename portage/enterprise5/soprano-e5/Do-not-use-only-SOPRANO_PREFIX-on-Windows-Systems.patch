From d58acb9ad50f3c3586622cbc569878ee2d08300e Mon Sep 17 00:00:00 2001
From: Andre Heinecke <aheinecke@intevation.de>
Date: Thu, 31 Mar 2011 14:20:22 +0000
Subject: [PATCH] Do not use only SOPRANO_PREFIX on Windows Systems

    When packaging for Windows you do not have the opportunity to
    build in a changeroot. So the CMAKE_INSTALL_PREFIX will have nothing
    to do with the actual installation directory and be something like:
    u:\mykdebuild-132\kderoot
    Since the soprano prefix is also used during buildtime the
    SOPRANO_PREFIX is still part of the searchpaths so the old
    behavior will not be changed.
---
 soprano/inference/inferenceruleset.cpp |   22 +++++++++++++++++++++-
 soprano/sopranodirs.cpp                |   17 ++++++++++++++---
 2 files changed, 35 insertions(+), 4 deletions(-)

diff --git a/soprano/inference/inferenceruleset.cpp b/soprano/inference/inferenceruleset.cpp
index 0c994ee..42f3487 100644
--- a/soprano/inference/inferenceruleset.cpp
+++ b/soprano/inference/inferenceruleset.cpp
@@ -27,7 +27,10 @@
 
 #include <QtCore/QHash>
 #include <QtCore/QList>
-
+#ifdef Q_OS_WIN
+#include <QtCore/QCoreApplication>
+#include <QtCore/QDir>
+#endif
 
 class Soprano::Inference::RuleSet::Private : public QSharedData
 {
@@ -138,5 +141,22 @@ Soprano::Inference::RuleSet Soprano::Inference::RuleSet::standardRuleSet( Standa
 
     RuleParser parser;
     parser.parseFile( path );
+#ifdef Q_OS_WIN
+    // Additionally try to look up the rules based on the runtime Path if
+    // they can not be found at the install prefix
+    if !parser.rules().count() {
+        path = QDir( QCoreApplication::applicationDirPath() ).absoluteFilePath( ".." );
+        path += "/share/soprano/rules/";
+
+        switch( set ) {
+        case RDFS:
+            path += "rdfs.rules";
+            break;
+        case NRL:
+            path += "nrl.rules";
+            break;
+        }
+    }
+#endif
     return parser.rules();
 }
diff --git a/soprano/sopranodirs.cpp b/soprano/sopranodirs.cpp
index 30136b8..d16ccd0 100644
--- a/soprano/sopranodirs.cpp
+++ b/soprano/sopranodirs.cpp
@@ -28,8 +28,12 @@
 #include <QtCore/QCoreApplication>
 #include <QtCore/QDebug>
 
-
-#if defined _WIN32 || defined _WIN64
+#ifdef Q_OS_WIN
+static inline QString getWinPrefix()
+{
+    // returns the parent directory of the application
+    return QDir( QCoreApplication::applicationDirPath() ).absoluteFilePath( ".." );
+}
 #define PATH_SEPARATOR ';'
 #else
 #define PATH_SEPARATOR ':'
@@ -122,7 +126,8 @@ QStringList Soprano::libDirs()
     QStringList paths = QCoreApplication::libraryPaths();
     paths << QLatin1String( SOPRANO_PREFIX"/lib"SOPRANO_LIB_SUFFIX );
 #ifdef Q_OS_WIN
-    paths << QLatin1String( SOPRANO_PREFIX"/bin" );
+    paths << getWinPrefix() + QLatin1String( "/bin" );
+    paths << getWinPrefix() + QLatin1String( "/lib"SOPRANO_LIB_SUFFIX );
 #else
     paths << QLatin1String( "/usr/lib"SOPRANO_LIB_SUFFIX );
     paths << QLatin1String( "/usr/local/lib"SOPRANO_LIB_SUFFIX );
@@ -136,6 +141,9 @@ QStringList Soprano::dataDirs()
 {
     QStringList paths;
     paths << QLatin1String( SOPRANO_PREFIX"/share" )
+#ifdef Q_OS_WIN
+    paths << getWinPrefix() + QLatin1String( "share" )
+#endif
           << Soprano::envDirList( "SOPRANO_DIRS" )
           << Soprano::envDirList( "XDG_DATA_DIRS" );
     return paths;
@@ -146,6 +154,9 @@ QStringList Soprano::exeDirs()
 {
     QStringList paths;
     paths << QLatin1String( SOPRANO_PREFIX"/bin" )
+#ifdef Q_OS_WIN
+    paths << getWinPrefix() + QLatin1String( "/bin" )
+#endif
           << envDirList( "PATH" );
     return paths;
 }
-- 
1.7.0.4

