diff -Nru fftw-3.2.2.orig/api/CMakeLists.txt fftw-3.2.2/api/CMakeLists.txt
--- fftw-3.2.2.orig/api/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/api/CMakeLists.txt	2010-10-13 01:41:52.268965300 +0200
@@ -0,0 +1,41 @@
+set(api_SRCS apiplan.c configure.c execute-dft-c2r.c
+execute-dft-r2c.c execute-dft.c execute-r2r.c execute-split-dft-c2r.c
+execute-split-dft-r2c.c execute-split-dft.c execute.c
+export-wisdom-to-file.c export-wisdom-to-string.c export-wisdom.c
+f77api.c flops.c forget-wisdom.c import-system-wisdom.c
+import-wisdom-from-file.c import-wisdom-from-string.c import-wisdom.c
+malloc.c map-r2r-kind.c mapflags.c mkprinter-file.c mktensor-iodims.c
+mktensor-rowmajor.c plan-dft-1d.c plan-dft-2d.c plan-dft-3d.c
+plan-dft-c2r-1d.c plan-dft-c2r-2d.c plan-dft-c2r-3d.c plan-dft-c2r.c
+plan-dft-r2c-1d.c plan-dft-r2c-2d.c plan-dft-r2c-3d.c plan-dft-r2c.c
+plan-dft.c plan-guru-dft-c2r.c plan-guru-dft-r2c.c plan-guru-dft.c
+plan-guru-r2r.c plan-guru-split-dft-c2r.c plan-guru-split-dft-r2c.c
+plan-guru-split-dft.c plan-many-dft-c2r.c plan-many-dft-r2c.c
+plan-many-dft.c plan-many-r2r.c plan-r2r-1d.c plan-r2r-2d.c
+plan-r2r-3d.c plan-r2r.c print-plan.c rdft2-pad.c the-planner.c
+version.c plan-guru64-dft-c2r.c
+plan-guru64-dft-r2c.c plan-guru64-dft.c plan-guru64-r2r.c
+plan-guru64-split-dft-c2r.c plan-guru64-split-dft-r2c.c
+plan-guru64-split-dft.c mktensor-iodims64.c
+)
+
+if(BUILD_ALL_STATIC)
+    add_library(api STATIC ${api_SRCS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(api_SRCS)
+    set(fftw_SRCS ${fftw_SRCS} ${api_SRCS} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
+
+
+#BUILT_SOURCES = fftw3.f
+
+#if MAINTAINER_MODE
+#
+# convert constants to F77 PARAMETER statements
+#fftw3.f: 
+#	rm -f $@
+#	perl -pe 's/([A-Z0-9_]+)=([0-9]+)/\n      INTEGER \1\n      PARAMETER (\1=\2)\n/g' $< |egrep 'PARAMETER|INTEGER' > $@
+#	perl -pe 's/#define +([A-Z0-9_]+) +\(([+-]?[0-9]+)U?\)/\n      INTEGER \1\n      PARAMETER (\1=\2)\n/g' $< |egrep 'PARAMETER|INTEGER' >> $@
+#	perl -pe 'if (/#define +([A-Z0-9_]+) +\(([0-9]+)U? *<< *([0-9]+)\)/) { print "\n      INTEGER $$1\n      PARAMETER ($$1=",$$2 << $$3,")\n"; }' $< |egrep 'PARAMETER|INTEGER' >> $@
+#
+#endif # MAINTAINER_MODE
diff -Nru fftw-3.2.2.orig/CMakeLists.txt fftw-3.2.2/CMakeLists.txt
--- fftw-3.2.2.orig/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/CMakeLists.txt	2010-11-11 01:10:58.372055800 +0100
@@ -0,0 +1,96 @@
+project(libfftw)
+
+cmake_minimum_required(VERSION 2.6)
+
+option(DISABLE_FORTRAN "disable fortran wrappers" ON)
+option(FFTW_SINGLE "compile in single precision" ON)
+option(FFTW_DOUBLE "compile in double precision" OFF)
+option(FFTW_LDOUBLE "compile in long double precision" OFF)
+option(BUILD_ALL_STATIC "build each and every library as a small static library" OFF)
+option(BUILD_STATIC "build one static library" OFF)
+
+if(NOT BUILD_STATIC AND NOT BUILD_ALL_STATIC)
+    add_definitions(-DFFTW_DLL)
+endif(NOT BUILD_STATIC AND NOT BUILD_ALL_STATIC)
+
+if(MSVC)
+    add_definitions(-Dinline=__inline -D_CRT_SECURE_NO_WARNINGS /wd4700 /openmp)
+endif
+
+set(PACKAGE "\"fftw\"")
+set(VERSION "\"3.2.2\"")
+set(PACKAGE_VERSION "${VERSION}")
+set(FFTW_CC "\"cl\"")
+set(CODELET_OPTIM "\"\"")
+
+set(fftw_SRCS)
+
+include(ConfigureChecks.cmake)
+
+macro(prepend_prefix outList)
+    FILE(RELATIVE_PATH prefix ${CMAKE_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR})
+    foreach(element ${${outList}})
+        set(_outList ${_outList} ${prefix}/${element})
+    endforeach(element ${${outList}})
+    set(${outList} ${_outList})
+endmacro(prepend_prefix outList)
+
+include_directories(
+    ${CMAKE_CURRENT_SOURCE_DIR}
+    ${CMAKE_CURRENT_BINARY_DIR}
+    ${CMAKE_CURRENT_SOURCE_DIR}/kernel
+    ${CMAKE_CURRENT_SOURCE_DIR}/simd
+    ${CMAKE_CURRENT_SOURCE_DIR}/dft
+    ${CMAKE_CURRENT_SOURCE_DIR}/dft/scalar
+    ${CMAKE_CURRENT_SOURCE_DIR}/dft/scalar/codelets
+    ${CMAKE_CURRENT_BINARY_DIR}/dft/scalar/codelets
+    ${CMAKE_CURRENT_SOURCE_DIR}/dft/simd
+    ${CMAKE_CURRENT_SOURCE_DIR}/dft/simd/codelets
+    ${CMAKE_CURRENT_BINARY_DIR}/dft/simd/codelets
+    ${CMAKE_CURRENT_SOURCE_DIR}/rdft
+    ${CMAKE_CURRENT_SOURCE_DIR}/rdft/scalar
+    ${CMAKE_CURRENT_SOURCE_DIR}/rdft/scalar/r2cb
+    ${CMAKE_CURRENT_BINARY_DIR}/rdft/scalar/r2cb
+    ${CMAKE_CURRENT_SOURCE_DIR}/rdft/scalar/r2cf
+    ${CMAKE_CURRENT_BINARY_DIR}/rdft/scalar/r2cf
+    ${CMAKE_CURRENT_SOURCE_DIR}/rdft/scalar/r2r
+    ${CMAKE_CURRENT_BINARY_DIR}/rdft/scalar/r2r
+    ${CMAKE_CURRENT_SOURCE_DIR}/rdft/simd
+    ${CMAKE_CURRENT_SOURCE_DIR}/rdft/simd/codelets
+    ${CMAKE_CURRENT_BINARY_DIR}/rdft/simd/codelets
+    ${CMAKE_CURRENT_SOURCE_DIR}/reodft
+    ${CMAKE_CURRENT_SOURCE_DIR}/api
+    ${CMAKE_CURRENT_SOURCE_DIR}/threads
+    ${CMAKE_CURRENT_SOURCE_DIR}/cell
+    ${CMAKE_CURRENT_SOURCE_DIR}/libbench2
+    ${CMAKE_CURRENT_SOURCE_DIR}/tests
+    ${CMAKE_CURRENT_SOURCE_DIR}/tools
+)
+add_subdirectory(kernel)
+add_subdirectory(simd)
+add_subdirectory(dft)
+add_subdirectory(rdft)
+add_subdirectory(reodft)
+add_subdirectory(api)
+add_subdirectory(threads)
+
+if(NOT BUILD_ALL_STATIC)
+    if(NOT BUILD_STATIC)
+        set(_shared SHARED)
+        set(fftw_SRCS ${fftw_SRCS} fftw.def)
+    else(NOT BUILD_STATIC)
+        set(_shared STATIC)
+    endif(NOT BUILD_STATIC)
+    add_library(fftw ${_shared} ${fftw_SRCS})
+    set_target_properties(fftw PROPERTIES DEFINE_SYMBOL DLL_EXPORT
+                                          OUTPUT_NAME fftw3-3)
+    install(TARGETS fftw RUNTIME DESTINATION bin
+                         LIBRARY DESTINATION lib
+                         ARCHIVE DESTINATION lib)
+
+    install(FILES api/fftw3.h api/fftw3.f DESTINATION include)
+endif(NOT BUILD_ALL_STATIC)
+
+add_subdirectory(libbench2)
+add_subdirectory(tests)
+#add_subdirectory(tools)
diff -Nru fftw-3.2.2.orig/config.h.cmake fftw-3.2.2/config.h.cmake
--- fftw-3.2.2.orig/config.h.cmake	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/config.h.cmake	2010-10-13 02:19:16.991356100 +0200
@@ -0,0 +1,380 @@
+/* config.h.in.  Generated from configure.ac by autoheader.  */
+
+/* Define to compile in long-double precision. */
+#cmakedefine BENCHFFT_LDOUBLE
+
+/* Define to compile in single precision. */
+#cmakedefine BENCHFFT_SINGLE
+
+/* extra CFLAGS for codelets */
+#cmakedefine CODELET_OPTIM @CODELET_OPTIM@
+
+/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP
+   systems. This function is required for `alloca.c' support on those systems.
+   */
+#cmakedefine CRAY_STACKSEG_END
+
+/* Define to 1 if using `alloca.c'. */
+#cmakedefine C_ALLOCA
+
+/* Define to disable Fortran wrappers. */
+#cmakedefine DISABLE_FORTRAN
+
+/* Define to dummy `main' function (if any) required to link to the Fortran
+   libraries. */
+#cmakedefine F77_DUMMY_MAIN
+
+/* Define to a macro mangling the given C identifier (in lower and upper
+   case), which must not contain underscores, for linking with Fortran. */
+#cmakedefine F77_FUNC
+
+/* As F77_FUNC, but for C identifiers containing underscores. */
+#cmakedefine F77_FUNC_
+
+/* Define if F77_FUNC and F77_FUNC_ are equivalent. */
+#cmakedefine F77_FUNC_EQUIV
+
+/* Define if F77 and FC dummy `main' functions are identical. */
+#cmakedefine FC_DUMMY_MAIN_EQ_F77
+
+/* C compiler name and flags */
+#cmakedefine FFTW_CC @FFTW_CC@
+
+/* Define to enable extra FFTW debugging code. */
+#cmakedefine FFTW_DEBUG
+
+/* Define to enable alignment debugging hacks. */
+#cmakedefine FFTW_DEBUG_ALIGNMENT
+
+/* Define to enable debugging malloc. */
+#cmakedefine FFTW_DEBUG_MALLOC
+
+/* Define to enable the use of alloca(). */
+#cmakedefine FFTW_ENABLE_ALLOCA
+
+/* Define to compile in long-double precision. */
+#cmakedefine FFTW_LDOUBLE
+
+/* Define to compile in single precision. */
+#cmakedefine FFTW_SINGLE
+
+/* Define to 1 if you have the `abort' function. */
+#cmakedefine HAVE_ABORT
+
+/* Define to 1 if you have `alloca', as a function or macro. */
+#cmakedefine HAVE_ALLOCA
+
+/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).
+   */
+#cmakedefine HAVE_ALLOCA_H
+
+/* Define to enable Altivec optimizations. */
+#cmakedefine HAVE_ALTIVEC
+
+/* Define to 1 if you have the <altivec.h> header file. */
+#cmakedefine HAVE_ALTIVEC_H
+
+/* Define to 1 if you have the `BSDgettimeofday' function. */
+#cmakedefine HAVE_BSDGETTIMEOFDAY
+
+/* Define to enable optimizations for the Cell Broadband Engine */
+#cmakedefine HAVE_CELL
+
+/* Define to 1 if you have the `clock_gettime' function. */
+#cmakedefine HAVE_CLOCK_GETTIME
+
+/* Define to 1 if you have the `cosl' function. */
+#cmakedefine HAVE_COSL
+
+/* Define to 1 if you have the <c_asm.h> header file. */
+#cmakedefine HAVE_C_ASM_H
+
+/* Define to 1 if you have the declaration of `cosl', and to 0 if you don't.
+   */
+#cmakedefine HAVE_DECL_COSL
+
+/* Define to 1 if you have the declaration of `drand48', and to 0 if you
+   don't. */
+#cmakedefine HAVE_DECL_DRAND48
+
+/* Define to 1 if you have the declaration of `memalign', and to 0 if you
+   don't. */
+#cmakedefine HAVE_DECL_MEMALIGN
+
+/* Define to 1 if you have the declaration of `posix_memalign', and to 0 if
+   you don't. */
+#cmakedefine HAVE_DECL_POSIX_MEMALIGN
+
+/* Define to 1 if you have the declaration of `sinl', and to 0 if you don't.
+   */
+#cmakedefine HAVE_DECL_SINL
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#cmakedefine HAVE_DLFCN_H
+
+/* Define to 1 if you don't have `vprintf' but do have `_doprnt.' */
+#cmakedefine HAVE_DOPRNT
+
+/* Define to 1 if you have the `drand48' function. */
+#cmakedefine HAVE_DRAND48
+
+/* Define if you have a machine with fused multiply-add */
+#cmakedefine HAVE_FMA
+
+/* Define to 1 if you have the `gethrtime' function. */
+#cmakedefine HAVE_GETHRTIME
+
+/* Define to 1 if you have the `gettimeofday' function. */
+#cmakedefine HAVE_GETTIMEOFDAY
+
+/* Define to 1 if hrtime_t is defined in <sys/time.h> */
+#cmakedefine HAVE_HRTIME_T
+
+/* Define to 1 if you have the <intrinsics.h> header file. */
+#cmakedefine HAVE_INTRINSICS_H
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#cmakedefine HAVE_INTTYPES_H
+
+/* Define if the isnan() function/macro is available. */
+#cmakedefine HAVE_ISNAN
+
+/* Define to 1 if you have the <libintl.h> header file. */
+#cmakedefine HAVE_LIBINTL_H
+
+/* Define to 1 if you have the `m' library (-lm). */
+#cmakedefine HAVE_LIBM
+
+/* Define to 1 if you have the `spe' library (-lspe). */
+#cmakedefine HAVE_LIBSPE
+
+/* Define to 1 if you have the `spe2' library (-lspe2). */
+#cmakedefine HAVE_LIBSPE2
+
+/* Define to 1 if you have the <limits.h> header file. */
+#cmakedefine HAVE_LIMITS_H
+
+/* Define to 1 if the compiler supports `long double' */
+#cmakedefine HAVE_LONG_DOUBLE
+
+/* Define to 1 if you have the `mach_absolute_time' function. */
+#cmakedefine HAVE_MACH_ABSOLUTE_TIME
+
+/* Define to 1 if you have the <mach/mach_time.h> header file. */
+#cmakedefine HAVE_MACH_MACH_TIME_H
+
+/* Define to 1 if you have the <malloc.h> header file. */
+#cmakedefine HAVE_MALLOC_H
+
+/* Define to 1 if you have the `memalign' function. */
+#cmakedefine HAVE_MEMALIGN
+
+/* Define to 1 if you have the <memory.h> header file. */
+#cmakedefine HAVE_MEMORY_H
+
+/* Define to 1 if you have the `memset' function. */
+#cmakedefine HAVE_MEMSET
+
+/* Define to enable MIPS paired-single optimizations. */
+#cmakedefine HAVE_MIPS_PS
+
+/* Define to enable use of MIPS ZBus cycle-counter. */
+#cmakedefine HAVE_MIPS_ZBUS_TIMER
+
+/* Define if you have the MPI library. */
+#cmakedefine HAVE_MPI
+
+/* Define to enable OpenMP */
+#cmakedefine HAVE_OPENMP
+
+/* Define to 1 if you have the `posix_memalign' function. */
+#cmakedefine HAVE_POSIX_MEMALIGN
+
+/* Define if you have POSIX threads libraries and header files. */
+#cmakedefine HAVE_PTHREAD
+
+/* Define to 1 if you have the `read_real_time' function. */
+#cmakedefine HAVE_READ_REAL_TIME
+
+/* Define to 1 if you have the `sinl' function. */
+#cmakedefine HAVE_SINL
+
+/* Define to 1 if you have the `snprintf' function. */
+#cmakedefine HAVE_SNPRINTF
+
+/* Define to 1 if you have the `sqrt' function. */
+#cmakedefine HAVE_SQRT
+
+/* Define to enable SSE optimizations. */
+#cmakedefine HAVE_SSE @HAVE_SSE@
+
+/* Define to enable SSE2 optimizations. */
+#cmakedefine HAVE_SSE2 @HAVE_SSE2@
+
+/* Define to 1 if you have the <stddef.h> header file. */
+#cmakedefine HAVE_STDDEF_H @HAVE_STDDEF_H@
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#cmakedefine HAVE_STDINT_H
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#cmakedefine HAVE_STDLIB_H @HAVE_STDLIB_H@
+
+/* Define to 1 if you have the <strings.h> header file. */
+#cmakedefine HAVE_STRINGS_H
+
+/* Define to 1 if you have the <string.h> header file. */
+#cmakedefine HAVE_STRING_H
+
+/* Define to 1 if you have the `sysctl' function. */
+#cmakedefine HAVE_SYSCTL
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#cmakedefine HAVE_SYS_STAT_H
+
+/* Define to 1 if you have the <sys/sysctl.h> header file. */
+#cmakedefine HAVE_SYS_SYSCTL_H
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#cmakedefine HAVE_SYS_TIME_H
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#cmakedefine HAVE_SYS_TYPES_H
+
+/* Define to 1 if you have the `tanl' function. */
+#cmakedefine HAVE_TANL
+
+/* Define if we have a threads library. */
+#cmakedefine HAVE_THREADS
+
+/* Define to 1 if you have the `time_base_to_time' function. */
+#cmakedefine HAVE_TIME_BASE_TO_TIME
+
+/* Define to 1 if the system has the type `uintptr_t'. */
+#cmakedefine HAVE_UINTPTR_T
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#cmakedefine HAVE_UNISTD_H
+
+/* Define to 1 if you have the `vprintf' function. */
+#cmakedefine HAVE_VPRINTF
+
+/* Define to 1 if you have the <xmmintrin.h> header file. */
+#cmakedefine HAVE_XMMINTRIN_H
+
+/* Define to 1 if you have the `_mm_free' function. */
+#cmakedefine HAVE__MM_FREE
+
+/* Define to 1 if you have the `_mm_malloc' function. */
+#cmakedefine HAVE__MM_MALLOC
+
+/* Define if you have the UNICOS _rtc() intrinsic. */
+#cmakedefine HAVE__RTC
+
+/* Define to the sub-directory in which libtool stores uninstalled libraries.
+   */
+#cmakedefine LT_OBJDIR
+
+/* Name of package */
+#cmakedefine PACKAGE @PACKAGE@
+
+/* Define to the address where bug reports for this package should be sent. */
+#cmakedefine PACKAGE_BUGREPORT
+
+/* Define to the full name of this package. */
+#cmakedefine PACKAGE_NAME
+
+/* Define to the full name and version of this package. */
+#cmakedefine PACKAGE_STRING
+
+/* Define to the one symbol short name of this package. */
+#cmakedefine PACKAGE_TARNAME
+
+/* Define to the version of this package. */
+#cmakedefine PACKAGE_VERSION @PACKAGE_VERSION@
+
+/* Define to necessary symbol if this constant uses a non-standard name on
+   your system. */
+#cmakedefine PTHREAD_CREATE_JOINABLE
+
+/* The size of `double', as computed by sizeof. */
+#cmakedefine SIZEOF_DOUBLE
+
+/* The size of `float', as computed by sizeof. */
+#cmakedefine SIZEOF_FLOAT
+
+/* The size of `int', as computed by sizeof. */
+#cmakedefine SIZEOF_INT
+
+/* The size of `long', as computed by sizeof. */
+#cmakedefine SIZEOF_LONG
+
+/* The size of `long long', as computed by sizeof. */
+#cmakedefine SIZEOF_LONG_LONG
+
+/* The size of `ptrdiff_t', as computed by sizeof. */
+#cmakedefine SIZEOF_PTRDIFF_T
+
+/* The size of `size_t', as computed by sizeof. */
+#cmakedefine SIZEOF_SIZE_T
+
+/* The size of `unsigned int', as computed by sizeof. */
+#cmakedefine SIZEOF_UNSIGNED_INT
+
+/* The size of `unsigned long', as computed by sizeof. */
+#cmakedefine SIZEOF_UNSIGNED_LONG
+
+/* The size of `unsigned long long', as computed by sizeof. */
+#cmakedefine SIZEOF_UNSIGNED_LONG_LONG
+
+/* The size of `void *', as computed by sizeof. */
+#cmakedefine SIZEOF_VOID_P
+
+/* If using the C implementation of alloca, define if you know the
+   direction of stack growth for your system; otherwise it will be
+   automatically deduced at runtime.
+	STACK_DIRECTION > 0 => grows toward higher addresses
+	STACK_DIRECTION < 0 => grows toward lower addresses
+	STACK_DIRECTION = 0 => direction of growth unknown */
+#cmakedefine STACK_DIRECTION
+
+/* Define to 1 if you have the ANSI C header files. */
+#cmakedefine STDC_HEADERS
+
+/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
+#cmakedefine TIME_WITH_SYS_TIME
+
+/* Define if we have and are using OpenMP multithreading directives */
+#cmakedefine USING_OPENMP_THREADS
+
+/* Define if we have and are using POSIX threads. */
+#cmakedefine USING_POSIX_THREADS
+
+/* Version number of package */
+#cmakedefine VERSION @VERSION@
+
+/* Use common Windows Fortran mangling styles for the Fortran interfaces. */
+#cmakedefine WINDOWS_F77_MANGLING
+
+/* Include g77-compatible wrappers in addition to any other Fortran wrappers.
+   */
+#cmakedefine WITH_G77_WRAPPERS
+
+/* Use our own 16-byte aligned malloc routine; mainly helpful for Windows
+   systems lacking aligned allocation system-library routines. */
+#cmakedefine WITH_OUR_MALLOC16
+
+/* Use low-precision timers, making planner very slow */
+#cmakedefine WITH_SLOW_TIMER
+
+/* Define to empty if `const' does not conform to ANSI C. */
+#cmakedefine const
+
+/* Define to `__inline__' or `__inline' if that's what the C compiler
+   calls it, or to nothing if 'inline' is not supported under any name.  */
+#ifndef __cplusplus
+#cmakedefine inline
+#endif
+
+/* Define to `unsigned int' if <sys/types.h> does not define. */
+#cmakedefine size_t
diff -Nru fftw-3.2.2.orig/ConfigureChecks.cmake fftw-3.2.2/ConfigureChecks.cmake
--- fftw-3.2.2.orig/ConfigureChecks.cmake	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/ConfigureChecks.cmake	2010-10-13 15:49:40.595467200 +0200
@@ -0,0 +1,383 @@
+
+set(HAVE_LONG_DOUBLE 1)
+set(HAVE_OPENMP 1)
+set(HAVE_UINTPTR_T 1)
+set(WITH_OUR_MALLOC16 1)
+set(HAVE_SSE 1)
+#set(HAVE_SSE2 1) # only works in double precision
+set(HAVE_STDLIB_H 1)
+set(HAVE_STDDEF_H 1)
+set(HAVE_SIMD 1)
+set(BENCHFFT_SINGLE 1)
+
+#/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).
+#   */
+#cmakedefine HAVE_ALLOCA_H
+
+#/* Define to 1 if you have the <altivec.h> header file. */
+#cmakedefine HAVE_ALTIVEC_H
+
+#/* Define to 1 if you have the <c_asm.h> header file. */
+#cmakedefine HAVE_C_ASM_H
+
+#/* Define to 1 if you have the <dlfcn.h> header file. */
+#cmakedefine HAVE_DLFCN_H
+
+#/* Define to 1 if you have the <intrinsics.h> header file. */
+#cmakedefine HAVE_INTRINSICS_H
+
+#/* Define to 1 if you have the <inttypes.h> header file. */
+#cmakedefine HAVE_INTTYPES_H
+
+#/* Define to 1 if you have the <libintl.h> header file. */
+#cmakedefine HAVE_LIBINTL_H
+
+#/* Define to 1 if you have the <limits.h> header file. */
+#cmakedefine HAVE_LIMITS_H
+
+#/* Define to 1 if you have the <mach/mach_time.h> header file. */
+#cmakedefine HAVE_MACH_MACH_TIME_H
+
+#/* Define to 1 if you have the <malloc.h> header file. */
+#cmakedefine HAVE_MALLOC_H
+
+#/* Define to 1 if you have the <memory.h> header file. */
+#cmakedefine HAVE_MEMORY_H
+
+#/* Define to 1 if you have the <stddef.h> header file. */
+#cmakedefine HAVE_STDDEF_H @HAVE_STDDEF_H@
+
+#/* Define to 1 if you have the <stdint.h> header file. */
+#cmakedefine HAVE_STDINT_H
+
+#/* Define to 1 if you have the <stdlib.h> header file. */
+#cmakedefine HAVE_STDLIB_H @HAVE_STDLIB_H@
+
+#/* Define to 1 if you have the <strings.h> header file. */
+#cmakedefine HAVE_STRINGS_H
+
+#/* Define to 1 if you have the <string.h> header file. */
+#cmakedefine HAVE_STRING_H
+
+#/* Define to 1 if you have the <sys/stat.h> header file. */
+#cmakedefine HAVE_SYS_STAT_H
+
+#/* Define to 1 if you have the <sys/sysctl.h> header file. */
+#cmakedefine HAVE_SYS_SYSCTL_H
+
+#/* Define to 1 if you have the <sys/time.h> header file. */
+#cmakedefine HAVE_SYS_TIME_H
+
+#/* Define to 1 if you have the <sys/types.h> header file. */
+#cmakedefine HAVE_SYS_TYPES_H
+
+#/* Define to 1 if you have the <unistd.h> header file. */
+#cmakedefine HAVE_UNISTD_H
+
+#/* Define to 1 if you have the <xmmintrin.h> header file. */
+#cmakedefine HAVE_XMMINTRIN_H
+
+
+######################################################################################
+#/* Define to compile in long-double precision. */
+#cmakedefine BENCHFFT_LDOUBLE
+
+#/* Define to compile in single precision. */
+#cmakedefine BENCHFFT_SINGLE
+
+#/* extra CFLAGS for codelets */
+#cmakedefine CODELET_OPTIM @CODELET_OPTIM@
+
+#/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP
+#   systems. This function is required for `alloca.c' support on those systems.
+#   */
+#cmakedefine CRAY_STACKSEG_END
+
+#/* Define to 1 if using `alloca.c'. */
+#cmakedefine C_ALLOCA
+
+#/* Define to disable Fortran wrappers. */
+#cmakedefine DISABLE_FORTRAN
+
+#/* Define to dummy `main' function (if any) required to link to the Fortran
+#   libraries. */
+#cmakedefine F77_DUMMY_MAIN
+
+#/* Define to a macro mangling the given C identifier (in lower and upper
+#   case), which must not contain underscores, for linking with Fortran. */
+#cmakedefine F77_FUNC
+
+#/* As F77_FUNC, but for C identifiers containing underscores. */
+#cmakedefine F77_FUNC_
+
+#/* Define if F77_FUNC and F77_FUNC_ are equivalent. */
+#cmakedefine F77_FUNC_EQUIV
+
+#/* Define if F77 and FC dummy `main' functions are identical. */
+#cmakedefine FC_DUMMY_MAIN_EQ_F77
+
+#/* C compiler name and flags */
+#cmakedefine FFTW_CC @FFTW_CC@
+
+#/* Define to enable extra FFTW debugging code. */
+#cmakedefine FFTW_DEBUG
+
+#/* Define to enable alignment debugging hacks. */
+#cmakedefine FFTW_DEBUG_ALIGNMENT
+
+#/* Define to enable debugging malloc. */
+#cmakedefine FFTW_DEBUG_MALLOC
+
+#/* Define to enable the use of alloca(). */
+#cmakedefine FFTW_ENABLE_ALLOCA
+
+#/* Define to compile in long-double precision. */
+#cmakedefine FFTW_LDOUBLE
+
+#/* Define to compile in single precision. */
+#cmakedefine FFTW_SINGLE
+
+#/* Define to 1 if you have the `abort' function. */
+#cmakedefine HAVE_ABORT
+
+#/* Define to 1 if you have `alloca', as a function or macro. */
+#cmakedefine HAVE_ALLOCA
+
+#/* Define to enable Altivec optimizations. */
+#cmakedefine HAVE_ALTIVEC
+
+#/* Define to 1 if you have the `BSDgettimeofday' function. */
+#cmakedefine HAVE_BSDGETTIMEOFDAY
+
+#/* Define to enable optimizations for the Cell Broadband Engine */
+#cmakedefine HAVE_CELL
+
+#/* Define to 1 if you have the `clock_gettime' function. */
+#cmakedefine HAVE_CLOCK_GETTIME
+
+#/* Define to 1 if you have the `cosl' function. */
+#cmakedefine HAVE_COSL
+
+#/* Define to 1 if you have the declaration of `cosl', and to 0 if you don't.
+#   */
+#cmakedefine HAVE_DECL_COSL
+
+#/* Define to 1 if you have the declaration of `drand48', and to 0 if you
+#   don't. */
+#cmakedefine HAVE_DECL_DRAND48
+
+#/* Define to 1 if you have the declaration of `memalign', and to 0 if you
+#   don't. */
+#cmakedefine HAVE_DECL_MEMALIGN
+
+#/* Define to 1 if you have the declaration of `posix_memalign', and to 0 if
+#   you don't. */
+#cmakedefine HAVE_DECL_POSIX_MEMALIGN
+
+#/* Define to 1 if you have the declaration of `sinl', and to 0 if you don't.
+#   */
+#cmakedefine HAVE_DECL_SINL
+
+#/* Define to 1 if you don't have `vprintf' but do have `_doprnt.' */
+#cmakedefine HAVE_DOPRNT
+
+#/* Define to 1 if you have the `drand48' function. */
+#cmakedefine HAVE_DRAND48
+
+#/* Define if you have a machine with fused multiply-add */
+#cmakedefine HAVE_FMA
+
+#/* Define to 1 if you have the `gethrtime' function. */
+#cmakedefine HAVE_GETHRTIME
+
+#/* Define to 1 if you have the `gettimeofday' function. */
+#cmakedefine HAVE_GETTIMEOFDAY
+
+#/* Define to 1 if hrtime_t is defined in <sys/time.h> */
+#cmakedefine HAVE_HRTIME_T
+
+#/* Define if the isnan() function/macro is available. */
+#cmakedefine HAVE_ISNAN
+
+#/* Define to 1 if you have the `m' library (-lm). */
+#cmakedefine HAVE_LIBM
+
+#/* Define to 1 if you have the `spe' library (-lspe). */
+#cmakedefine HAVE_LIBSPE
+
+#/* Define to 1 if you have the `spe2' library (-lspe2). */
+#cmakedefine HAVE_LIBSPE2
+
+#/* Define to 1 if the compiler supports `long double' */
+#cmakedefine HAVE_LONG_DOUBLE
+
+#/* Define to 1 if you have the `mach_absolute_time' function. */
+#cmakedefine HAVE_MACH_ABSOLUTE_TIME
+
+#/* Define to 1 if you have the `memalign' function. */
+#cmakedefine HAVE_MEMALIGN
+
+#/* Define to 1 if you have the `memset' function. */
+#cmakedefine HAVE_MEMSET
+
+#/* Define to enable MIPS paired-single optimizations. */
+#cmakedefine HAVE_MIPS_PS
+
+#/* Define to enable use of MIPS ZBus cycle-counter. */
+#cmakedefine HAVE_MIPS_ZBUS_TIMER
+
+#/* Define if you have the MPI library. */
+#cmakedefine HAVE_MPI
+
+#/* Define to enable OpenMP */
+#cmakedefine HAVE_OPENMP
+
+#/* Define to 1 if you have the `posix_memalign' function. */
+#cmakedefine HAVE_POSIX_MEMALIGN
+
+#/* Define if you have POSIX threads libraries and header files. */
+#cmakedefine HAVE_PTHREAD
+
+#/* Define to 1 if you have the `read_real_time' function. */
+#cmakedefine HAVE_READ_REAL_TIME
+
+#/* Define to 1 if you have the `sinl' function. */
+#cmakedefine HAVE_SINL
+
+#/* Define to 1 if you have the `snprintf' function. */
+#cmakedefine HAVE_SNPRINTF
+
+#/* Define to 1 if you have the `sqrt' function. */
+#cmakedefine HAVE_SQRT
+
+#/* Define to enable SSE optimizations. */
+#cmakedefine HAVE_SSE @HAVE_SSE@
+
+#/* Define to enable SSE2 optimizations. */
+#cmakedefine HAVE_SSE2 @HAVE_SSE2@
+
+#/* Define to 1 if you have the `sysctl' function. */
+#cmakedefine HAVE_SYSCTL
+
+#/* Define to 1 if you have the `tanl' function. */
+#cmakedefine HAVE_TANL
+
+#/* Define if we have a threads library. */
+#cmakedefine HAVE_THREADS
+
+#/* Define to 1 if you have the `time_base_to_time' function. */
+#cmakedefine HAVE_TIME_BASE_TO_TIME
+
+#/* Define to 1 if the system has the type `uintptr_t'. */
+#cmakedefine HAVE_UINTPTR_T
+
+#/* Define to 1 if you have the `vprintf' function. */
+#cmakedefine HAVE_VPRINTF
+
+#/* Define to 1 if you have the `_mm_free' function. */
+#cmakedefine HAVE__MM_FREE
+
+#/* Define to 1 if you have the `_mm_malloc' function. */
+#cmakedefine HAVE__MM_MALLOC
+
+#/* Define if you have the UNICOS _rtc() intrinsic. */
+#cmakedefine HAVE__RTC
+
+#/* Define to the sub-directory in which libtool stores uninstalled libraries.
+#   */
+#cmakedefine LT_OBJDIR
+
+#/* Name of package */
+#cmakedefine PACKAGE @PACKAGE@
+
+#/* Define to the address where bug reports for this package should be sent. */
+#cmakedefine PACKAGE_BUGREPORT
+
+#/* Define to the full name of this package. */
+#cmakedefine PACKAGE_NAME
+
+#/* Define to the full name and version of this package. */
+#cmakedefine PACKAGE_STRING
+
+#/* Define to the one symbol short name of this package. */
+#cmakedefine PACKAGE_TARNAME
+
+#/* Define to the version of this package. */
+#cmakedefine PACKAGE_VERSION @PACKAGE_VERSION@
+
+#/* Define to necessary symbol if this constant uses a non-standard name on
+#   your system. */
+#cmakedefine PTHREAD_CREATE_JOINABLE
+
+#/* The size of `double', as computed by sizeof. */
+#cmakedefine SIZEOF_DOUBLE
+
+#/* The size of `float', as computed by sizeof. */
+#cmakedefine SIZEOF_FLOAT
+
+#/* The size of `int', as computed by sizeof. */
+#cmakedefine SIZEOF_INT
+
+#/* The size of `long', as computed by sizeof. */
+#cmakedefine SIZEOF_LONG
+
+#/* The size of `long long', as computed by sizeof. */
+#cmakedefine SIZEOF_LONG_LONG
+
+#/* The size of `ptrdiff_t', as computed by sizeof. */
+#cmakedefine SIZEOF_PTRDIFF_T
+
+#/* The size of `size_t', as computed by sizeof. */
+#cmakedefine SIZEOF_SIZE_T
+
+#/* The size of `unsigned int', as computed by sizeof. */
+#cmakedefine SIZEOF_UNSIGNED_INT
+
+#/* The size of `unsigned long', as computed by sizeof. */
+#cmakedefine SIZEOF_UNSIGNED_LONG
+
+#/* The size of `unsigned long long', as computed by sizeof. */
+#cmakedefine SIZEOF_UNSIGNED_LONG_LONG
+
+#/* The size of `void *', as computed by sizeof. */
+#cmakedefine SIZEOF_VOID_P
+
+#/* If using the C implementation of alloca, define if you know the
+#   direction of stack growth for your system; otherwise it will be
+#   automatically deduced at runtime.
+#	STACK_DIRECTION > 0 => grows toward higher addresses
+#	STACK_DIRECTION < 0 => grows toward lower addresses
+#	STACK_DIRECTION = 0 => direction of growth unknown */
+#cmakedefine STACK_DIRECTION
+
+#/* Define to 1 if you have the ANSI C header files. */
+#cmakedefine STDC_HEADERS
+
+#/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
+#cmakedefine TIME_WITH_SYS_TIME
+
+#/* Define if we have and are using OpenMP multithreading directives */
+#cmakedefine USING_OPENMP_THREADS
+
+#/* Define if we have and are using POSIX threads. */
+#cmakedefine USING_POSIX_THREADS
+
+#/* Version number of package */
+#cmakedefine VERSION @VERSION@
+
+#/* Use common Windows Fortran mangling styles for the Fortran interfaces. */
+#cmakedefine WINDOWS_F77_MANGLING
+
+#/* Include g77-compatible wrappers in addition to any other Fortran wrappers.
+#   */
+#cmakedefine WITH_G77_WRAPPERS
+
+#/* Use our own 16-byte aligned malloc routine; mainly helpful for Windows
+#   systems lacking aligned allocation system-library routines. */
+#cmakedefine WITH_OUR_MALLOC16
+
+#/* Use low-precision timers, making planner very slow */
+#cmakedefine WITH_SLOW_TIMER
+
+configure_file(config.h.cmake config.h)
+
diff -Nru fftw-3.2.2.orig/dft/CMakeLists.txt fftw-3.2.2/dft/CMakeLists.txt
--- fftw-3.2.2.orig/dft/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/dft/CMakeLists.txt	2010-10-13 01:12:05.231752600 +0200
@@ -0,0 +1,19 @@
+#SUBDIRS = scalar simd
+add_subdirectory(scalar)
+add_subdirectory(simd)
+
+# pkgincludedir = $(includedir)/fftw3@PREC_SUFFIX@
+# pkginclude_HEADERS = codelet-dft.h dft.h
+
+set(dft_SRCS bluestein.c buffered.c conf.c ct.c dftw-direct.c
+dftw-directsq.c dftw-generic.c dftw-genericbuf.c direct.c generic.c
+indirect.c indirect-transpose.c kdft-dif.c kdft-difsq.c kdft-dit.c
+kdft.c nop.c plan.c problem.c rader.c rank-geq2.c solve.c vrank-geq1.c
+zero.c)
+
+if(BUILD_ALL_STATIC)
+    add_library(dft STATIC ${dft_SRCS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(dft_SRCS)
+    set(fftw_SRCS ${fftw_SRCS} ${dft_SRCS} ${_fftw_SRCS} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
diff -Nru fftw-3.2.2.orig/dft/scalar/CMakeLists.txt fftw-3.2.2/dft/scalar/CMakeLists.txt
--- fftw-3.2.2.orig/dft/scalar/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/dft/scalar/CMakeLists.txt	2010-10-13 01:12:10.959080200 +0200
@@ -0,0 +1,10 @@
+add_subdirectory(codelets)
+
+set(dft_scalar_SRCS ${dft_scalar_SRCS} n.c t.c)
+
+if(BUILD_ALL_STATIC)
+    add_library(dft_scalar STATIC ${dft_scalar_SRCS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(dft_scalar_SRCS)
+    set(_fftw_SRCS ${_fftw_SRCS} ${dft_scalar_SRCS} ${__fftw_SRCS} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
diff -Nru fftw-3.2.2.orig/dft/scalar/codelets/CMakeLists.txt fftw-3.2.2/dft/scalar/codelets/CMakeLists.txt
--- fftw-3.2.2.orig/dft/scalar/codelets/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/dft/scalar/codelets/CMakeLists.txt	2010-10-13 01:12:22.522741600 +0200
@@ -0,0 +1,113 @@
+# This Makefile.am specifies a set of codelets, efficient transforms
+# of small sizes, that are used as building blocks (kernels) by FFTW
+# to build up large transforms, as well as the options for generating
+# and compiling them.
+
+# You can customize FFTW for special needs, e.g. to handle certain
+# sizes more efficiently, by adding new codelets to the lists of those
+# included by default.  If you change the list of codelets, any new
+# ones you added will be automatically generated when you run the
+# bootstrap script (see "Generating your own code" in the FFTW
+# manual).
+
+###########################################################################
+
+###########################################################################
+# n1_<n> is a hard-coded FFT of size <n> (base cases of FFT recursion)
+set(N1 n1_2.c n1_3.c n1_4.c n1_5.c n1_6.c n1_7.c n1_8.c n1_9.c n1_10.c
+n1_11.c n1_12.c n1_13.c n1_14.c n1_15.c n1_16.c n1_32.c n1_64.c
+n1_20.c n1_25.c # n1_30.c n1_40.c n1_50.c
+)
+
+###########################################################################
+# t1_<r> is a "twiddle" FFT of size <r>, implementing a radix-r DIT step
+set(T1 t1_2.c t1_3.c t1_4.c t1_5.c t1_6.c t1_7.c t1_8.c t1_9.c
+t1_10.c t1_12.c t1_15.c t1_16.c t1_32.c t1_64.c
+t1_20.c t1_25.c # t1_30.c t1_40.c t1_50.c
+)
+
+# t2_<r> is also a twiddle FFT, but instead of using a complete lookup table
+# of trig. functions, it partially generates the trig. values on the fly
+# (this is faster for large sizes).
+set(T2 t2_4.c t2_8.c t2_16.c t2_32.c t2_64.c
+     t2_5.c t2_10.c t2_20.c t2_25.c
+)
+
+###########################################################################
+# The F (DIF) codelets are used for a kind of in-place transform algorithm,
+# but the planner seems to never (or hardly ever) use them on the machines
+# we have access to, preferring the Q codelets and the use of buffers
+# for sub-transforms.  So, we comment them out, at least for now.
+
+# f1_<r> is a "twiddle" FFT of size <r>, implementing a radix-r DIF step
+#F1 = # f1_2.c f1_3.c f1_4.c f1_5.c f1_6.c f1_7.c f1_8.c f1_9.c f1_10.c f1_12.c f1_15.c f1_16.c f1_32.c f1_64.c
+
+# like f1, but partially generates its trig. table on the fly
+#F2 = # f2_4.c f2_8.c f2_16.c f2_32.c f2_64.c
+
+###########################################################################
+# q1_<r> is <r> twiddle FFTs of size <r> (DIF step), where the output is
+# transposed.  This is used for in-place transposes in sizes that are
+# divisible by <r>^2.  These codelets have size ~ <r>^2, so you should
+# probably not use <r> bigger than 8 or so.
+set(Q1 q1_2.c q1_4.c q1_8.c  q1_3.c q1_5.c q1_6.c)
+
+###########################################################################
+set(ALL_CODELETS ${N1} ${T1} ${T2} ${F1} ${F2} ${Q1})
+
+include(${CMAKE_SOURCE_DIR}/support/codelets.cmake)
+
+set(SOLVTAB_NAME "X(solvtab_dft_standard)")
+
+set(CODLIST ${CMAKE_CURRENT_BINARY_DIR}/codlist.c)
+set(CODELET_NAME codelet_)
+
+write_codelet_list(${CODLIST} ${CODELET_NAME} ${SOLVTAB_NAME} ${ALL_CODELETS})
+
+set(dft_scalar_codelets_SRCS ${ALL_CODELETS})
+
+if(BUILD_ALL_STATIC)
+    add_library(dft_scalar_codelets STATIC ${dft_scalar_codelets_SRCS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(dft_scalar_codelets_SRCS)
+    set(__fftw_SRCS ${__fftw_SRCS} ${dft_scalar_codelets_SRCS} ${CODLIST} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
+
+# this is old source code which can be changed later
+# only delete codlist.c in maintainer-mode, since it is included in the dist
+# FIXME: is there a way to delete in 'make clean' only when builddir != srcdir?
+#maintainer-clean-local:
+#	rm -f $(CODLIST)
+
+#if MAINTAINER_MODE
+#FLAGS_N1=$(DFT_FLAGS_COMMON)
+#FLAGS_T1=$(DFT_FLAGS_COMMON)
+#FLAGS_T2=$(DFT_FLAGS_COMMON) -twiddle-log3 -precompute-twiddles
+#FLAGS_F1=$(DFT_FLAGS_COMMON)
+#FLAGS_F2=$(DFT_FLAGS_COMMON) -twiddle-log3  -precompute-twiddles
+#FLAGS_Q1=$(DFT_FLAGS_COMMON) -reload-twiddle
+#FLAGS_Q2=$(DFT_FLAGS_COMMON) -twiddle-log3  -precompute-twiddles
+#
+#n1_%.c:  $(CODELET_DEPS) $(GEN_NOTW)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_NOTW) $(FLAGS_N1) -n $* -name n1_$* -include "n.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#t1_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE) $(FLAGS_T1) -n $* -name t1_$* -include "t.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#t2_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE) $(FLAGS_T2) -n $* -name t2_$* -include "t.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#f1_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE) $(FLAGS_F1) -dif -n $* -name f1_$* -include "f.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#f2_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE) $(FLAGS_F2) -dif -n $* -name f2_$* -include "f.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#q1_%.c:  $(CODELET_DEPS) $(GEN_TWIDSQ)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDSQ) $(FLAGS_Q1) -dif -n $* -name q1_$* -include "q.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#q2_%.c:  $(CODELET_DEPS) $(GEN_TWIDSQ)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDSQ) $(FLAGS_Q2) -dif -n $* -name q2_$* -include "q.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#endif # MAINTAINER_MODE
+
diff -Nru fftw-3.2.2.orig/dft/simd/CMakeLists.txt fftw-3.2.2/dft/simd/CMakeLists.txt
--- fftw-3.2.2.orig/dft/simd/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/dft/simd/CMakeLists.txt	2010-10-13 01:12:29.305129500 +0200
@@ -0,0 +1,10 @@
+add_subdirectory(codelets)
+
+set(dft_simd_SRCS n1b.c n1f.c n2b.c n2f.c n2s.c q1b.c q1f.c t.c ts.c)
+
+if(BUILD_ALL_STATIC)
+    add_library(dft_simd STATIC ${dft_simd_SRCS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(dft_simd_SRCS)
+    set(_fftw_SRCS ${_fftw_SRCS} ${dft_simd_SRCS} ${__fftw_SRCS} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
diff -Nru fftw-3.2.2.orig/dft/simd/codelets/CMakeLists.txt fftw-3.2.2/dft/simd/codelets/CMakeLists.txt
--- fftw-3.2.2.orig/dft/simd/codelets/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/dft/simd/codelets/CMakeLists.txt	2010-10-13 01:12:39.068688000 +0200
@@ -0,0 +1,189 @@
+# This Makefile.am specifies a set of codelets, efficient transforms
+# of small sizes, that are used as building blocks (kernels) by FFTW
+# to build up large transforms, as well as the options for generating
+# and compiling them.
+
+# You can customize FFTW for special needs, e.g. to handle certain
+# sizes more efficiently, by adding new codelets to the lists of those
+# included by default.  If you change the list of codelets, any new
+# ones you added will be automatically generated when you run the
+# bootstrap script (see "Generating your own code" in the FFTW
+# manual).
+
+###########################################################################
+#AM_CPPFLAGS = -I$(top_srcdir)/kernel -I$(top_srcdir)/dft	\
+#-I$(top_srcdir)/dft/simd -I$(top_srcdir)/simd
+#AM_CFLAGS = $(SIMD_CFLAGS)
+#noinst_LTLIBRARIES = libdft_simd_codelets.la
+
+###########################################################################
+# n1fv_<n> is a hard-coded FFTW_FORWARD FFT of size <n>, using SIMD
+set(N1F n1fv_2.c n1fv_3.c n1fv_4.c n1fv_5.c n1fv_6.c n1fv_7.c n1fv_8.c
+n1fv_9.c n1fv_10.c n1fv_11.c n1fv_12.c n1fv_13.c n1fv_14.c n1fv_15.c
+n1fv_16.c n1fv_32.c n1fv_64.c n1fv_128.c
+n1fv_20.c n1fv_25.c # n1fv_30.c n1fv_40.c n1fv_50.c
+)
+
+# as above, with restricted input vector stride
+set(N2F n2fv_2.c n2fv_4.c n2fv_6.c n2fv_8.c n2fv_10.c n2fv_12.c
+n2fv_14.c n2fv_16.c n2fv_32.c n2fv_64.c
+n2fv_20.c # n2fv_30.c n2fv_40.c n2fv_50.c
+)
+
+# as above, but FFTW_BACKWARD
+set(N1B n1bv_2.c n1bv_3.c n1bv_4.c n1bv_5.c n1bv_6.c n1bv_7.c n1bv_8.c
+n1bv_9.c n1bv_10.c n1bv_11.c n1bv_12.c n1bv_13.c n1bv_14.c n1bv_15.c
+n1bv_16.c n1bv_32.c n1bv_64.c n1bv_128.c
+n1bv_20.c n1bv_25.c # n1bv_30.c n1bv_40.c n1bv_50.c
+)
+
+set(N2B n2bv_2.c n2bv_4.c n2bv_6.c n2bv_8.c n2bv_10.c n2bv_12.c
+n2bv_14.c n2bv_16.c n2bv_32.c n2bv_64.c
+n2bv_20.c # n2bv_30.c n2bv_40.c n2bv_50.c
+)
+
+# split-complex codelets 
+set(N2S n2sv_4.c n2sv_8.c n2sv_16.c n2sv_32.c n2sv_64.c
+)
+
+###########################################################################
+# t1fv_<r> is a "twiddle" FFT of size <r>, implementing a radix-r DIT step
+# for an FFTW_FORWARD transform, using SIMD
+set(T1F t1fv_2.c t1fv_3.c t1fv_4.c t1fv_5.c t1fv_6.c t1fv_7.c t1fv_8.c
+t1fv_9.c t1fv_10.c t1fv_12.c t1fv_15.c t1fv_16.c t1fv_32.c t1fv_64.c
+t1fv_20.c t1fv_25.c # t1fv_30.c t1fv_40.c t1fv_50.c
+)
+
+# same as t1fv_*, but with different twiddle storage scheme
+set(T2F t2fv_2.c t2fv_4.c t2fv_8.c t2fv_16.c t2fv_32.c t2fv_64.c
+t2fv_5.c t2fv_10.c t2fv_20.c t2fv_25.c
+)
+set(T3F t3fv_4.c t3fv_8.c t3fv_16.c t3fv_32.c
+t3fv_5.c t3fv_10.c t3fv_20.c t3fv_25.c
+)
+set(T1FU t1fuv_2.c t1fuv_3.c t1fuv_4.c t1fuv_5.c t1fuv_6.c t1fuv_7.c
+t1fuv_8.c t1fuv_9.c t1fuv_10.c
+)
+
+# as above, but FFTW_BACKWARD
+set(T1B t1bv_2.c t1bv_3.c t1bv_4.c t1bv_5.c t1bv_6.c t1bv_7.c t1bv_8.c
+t1bv_9.c t1bv_10.c t1bv_12.c t1bv_15.c t1bv_16.c t1bv_32.c t1bv_64.c
+t1bv_20.c t1bv_25.c # t1bv_30.c t1bv_40.c t1bv_50.c
+)
+
+# same as t1bv_*, but with different twiddle storage scheme
+set(T2B t2bv_2.c t2bv_4.c t2bv_8.c t2bv_16.c t2bv_32.c t2bv_64.c
+t2bv_5.c t2bv_10.c t2bv_20.c t2bv_25.c
+)
+set(T3B t3bv_4.c t3bv_8.c t3bv_16.c t3bv_32.c
+t3bv_5.c t3bv_10.c t3bv_20.c t3bv_25.c
+)
+set(T1BU t1buv_2.c t1buv_3.c t1buv_4.c t1buv_5.c t1buv_6.c t1buv_7.c
+t1buv_8.c t1buv_9.c t1buv_10.c
+)
+
+# split-complex codelets
+set(T1S t1sv_2.c t1sv_4.c t1sv_8.c t1sv_16.c t1sv_32.c #t1sv_64.c
+)
+set(T2S t2sv_4.c t2sv_8.c t2sv_16.c t2sv_32.c #t2sv_64.c
+)
+
+###########################################################################
+# q1fv_<r> is <r> twiddle FFTW_FORWARD FFTs of size <r> (DIF step),
+# where the output is transposed, using SIMD.  This is used for
+# in-place transposes in sizes that are divisible by <r>^2.  These
+# codelets have size ~ <r>^2, so you should probably not use <r>
+# bigger than 8 or so.
+set(Q1F q1fv_2.c q1fv_4.c q1fv_5.c q1fv_8.c )
+
+# as above, but FFTW_BACKWARD
+set(Q1B q1bv_2.c q1bv_4.c q1bv_5.c q1bv_8.c)
+
+###########################################################################
+set(SIMD_CODELETS ${N1F} ${N1B} ${N2F} ${N2B} ${N2S} ${T1FU} ${T1F} ${T2F} ${T3F} ${T1BU} ${T1B} ${T2B} ${T3B} ${T1S} ${T2S} ${Q1F} ${Q1B})
+
+if(HAVE_SIMD)
+    set(ALL_CODELETS ${SIMD_CODELETS})
+else(HAVE_SIMD)
+    set(ALL_CODELETS)
+endif(HAVE_SIMD)
+
+set(SOLVTAB_NAME "X(solvtab_dft_simd)")
+set(CODLIST ${CMAKE_CURRENT_BINARY_DIR}/codlist.c)
+set(CODELET_NAME codelet_)
+
+set(dft_simd_codelets_SRCS ${ALL_CODELETS})
+
+# special rules for regenerating codelets.
+include(${CMAKE_SOURCE_DIR}/support/codelets.cmake)
+
+write_codelet_list(${CODLIST} ${CODELET_NAME} ${SOLVTAB_NAME} ${ALL_CODELETS})
+
+if(BUILD_ALL_STATIC)
+    add_library(dft_simd_codelets STATIC ${ALL_CODELETS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(dft_simd_codelets_SRCS)
+    set(__fftw_SRCS ${__fftw_SRCS} ${dft_simd_codelets_SRCS} ${CODLIST} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
+
+#include $(top_srcdir)/support/Makefile.codelets
+
+#if MAINTAINER_MODE
+#GFLAGS = -simd $(FLAGS_COMMON) -pipeline-latency 8
+#FLAGS_T2S=-twiddle-log3 -precompute-twiddles
+#FLAGS_T3=-twiddle-log3 -precompute-twiddles -no-generate-bytw
+#
+#n1fv_%.c:  $(CODELET_DEPS) $(GEN_NOTW_C)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_NOTW_C) $(GFLAGS) -n $* -name n1fv_$* -include "n1f.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#n2fv_%.c:  $(CODELET_DEPS) $(GEN_NOTW_C)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_NOTW_C) $(GFLAGS) -n $* -name n2fv_$* -with-ostride 2 -include "n2f.h" -store-multiple 2) | $(ADD_DATE) | $(INDENT) >$@
+#
+#n1bv_%.c:  $(CODELET_DEPS) $(GEN_NOTW_C)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_NOTW_C) $(GFLAGS) -sign 1 -n $* -name n1bv_$* -include "n1b.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#n2bv_%.c:  $(CODELET_DEPS) $(GEN_NOTW_C)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_NOTW_C) $(GFLAGS) -sign 1 -n $* -name n2bv_$* -with-ostride 2 -include "n2b.h"  -store-multiple 2) | $(ADD_DATE) | $(INDENT) >$@
+#
+#n2sv_%.c:  $(CODELET_DEPS) $(GEN_NOTW)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_NOTW) $(GFLAGS) -n $* -name n2sv_$* -with-ostride 1 -include "n2s.h" -store-multiple 4) | $(ADD_DATE) | $(INDENT) >$@
+#
+#t1fv_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE_C)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE_C) $(GFLAGS) -n $* -name t1fv_$* -include "t1f.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#t1fuv_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE_C)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE_C) $(GFLAGS) -n $* -name t1fuv_$* -include "t1fu.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#t2fv_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE_C)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE_C) $(GFLAGS) -n $* -name t2fv_$* -include "t2f.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#t3fv_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE_C)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE_C) $(GFLAGS) $(FLAGS_T3) -n $* -name t3fv_$* -include "t3f.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#t1bv_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE_C)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE_C) $(GFLAGS) -n $* -name t1bv_$* -include "t1b.h" -sign 1) | $(ADD_DATE) | $(INDENT) >$@
+#
+#t1buv_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE_C)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE_C) $(GFLAGS) -n $* -name t1buv_$* -include "t1bu.h" -sign 1) | $(ADD_DATE) | $(INDENT) >$@
+#
+#t2bv_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE_C)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE_C) $(GFLAGS) -n $* -name t2bv_$* -include "t2b.h" -sign 1) | $(ADD_DATE) | $(INDENT) >$@
+#
+#t3bv_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE_C)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE_C) $(GFLAGS) $(FLAGS_T3) -n $* -name t3bv_$* -include "t3b.h" -sign 1) | $(ADD_DATE) | $(INDENT) >$@
+#
+#t1sv_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE) $(GFLAGS) -n $* -name t1sv_$* -include "ts.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#t2sv_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE) $(GFLAGS) $(FLAGS_T2S) -n $* -name t2sv_$* -include "ts.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#q1fv_%.c:  $(CODELET_DEPS) $(GEN_TWIDSQ_C)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDSQ_C) $(GFLAGS) -n $* -dif -name q1fv_$* -include "q1f.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#q1bv_%.c:  $(CODELET_DEPS) $(GEN_TWIDSQ_C)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDSQ_C) $(GFLAGS) -n $* -dif -name q1bv_$* -include "q1b.h" -sign 1) | $(ADD_DATE) | $(INDENT) >$@
+#
+#
+#endif # MAINTAINER_MODE
+#
diff -Nru fftw-3.2.2.orig/fftw.def fftw-3.2.2/fftw.def
--- fftw-3.2.2.orig/fftw.def	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/fftw.def	2010-10-13 15:55:48.106487600 +0200
@@ -0,0 +1,809 @@
+LIBRARY fftw.dll
+EXPORTS
+fftwf_alignment_of
+fftwf_assertion_failed
+fftwf_bufdist
+fftwf_check_alignment_of_sse_pmpm
+fftwf_choose_radix
+fftwf_cleanup
+fftwf_cleanup_threads
+fftwf_codelet_e01_8
+fftwf_codelet_e10_8
+fftwf_codelet_hb2_16
+fftwf_codelet_hb2_20
+fftwf_codelet_hb2_25
+fftwf_codelet_hb2_32
+fftwf_codelet_hb2_4
+fftwf_codelet_hb2_5
+fftwf_codelet_hb2_8
+fftwf_codelet_hb_10
+fftwf_codelet_hb_12
+fftwf_codelet_hb_15
+fftwf_codelet_hb_16
+fftwf_codelet_hb_2
+fftwf_codelet_hb_20
+fftwf_codelet_hb_25
+fftwf_codelet_hb_3
+fftwf_codelet_hb_32
+fftwf_codelet_hb_4
+fftwf_codelet_hb_5
+fftwf_codelet_hb_6
+fftwf_codelet_hb_64
+fftwf_codelet_hb_7
+fftwf_codelet_hb_8
+fftwf_codelet_hb_9
+fftwf_codelet_hc2cb2_16
+fftwf_codelet_hc2cb2_20
+fftwf_codelet_hc2cb2_32
+fftwf_codelet_hc2cb2_4
+fftwf_codelet_hc2cb2_8
+fftwf_codelet_hc2cb_10
+fftwf_codelet_hc2cb_12
+fftwf_codelet_hc2cb_16
+fftwf_codelet_hc2cb_2
+fftwf_codelet_hc2cb_20
+fftwf_codelet_hc2cb_32
+fftwf_codelet_hc2cb_4
+fftwf_codelet_hc2cb_6
+fftwf_codelet_hc2cb_8
+fftwf_codelet_hc2cbdft2_16
+fftwf_codelet_hc2cbdft2_20
+fftwf_codelet_hc2cbdft2_32
+fftwf_codelet_hc2cbdft2_4
+fftwf_codelet_hc2cbdft2_8
+fftwf_codelet_hc2cbdft_10
+fftwf_codelet_hc2cbdft_12
+fftwf_codelet_hc2cbdft_16
+fftwf_codelet_hc2cbdft_2
+fftwf_codelet_hc2cbdft_20
+fftwf_codelet_hc2cbdft_32
+fftwf_codelet_hc2cbdft_4
+fftwf_codelet_hc2cbdft_6
+fftwf_codelet_hc2cbdft_8
+fftwf_codelet_hc2cbdftv_10
+fftwf_codelet_hc2cbdftv_12
+fftwf_codelet_hc2cbdftv_16
+fftwf_codelet_hc2cbdftv_2
+fftwf_codelet_hc2cbdftv_20
+fftwf_codelet_hc2cbdftv_32
+fftwf_codelet_hc2cbdftv_4
+fftwf_codelet_hc2cbdftv_6
+fftwf_codelet_hc2cbdftv_8
+fftwf_codelet_hc2cf2_16
+fftwf_codelet_hc2cf2_20
+fftwf_codelet_hc2cf2_32
+fftwf_codelet_hc2cf2_4
+fftwf_codelet_hc2cf2_8
+fftwf_codelet_hc2cf_10
+fftwf_codelet_hc2cf_12
+fftwf_codelet_hc2cf_16
+fftwf_codelet_hc2cf_2
+fftwf_codelet_hc2cf_20
+fftwf_codelet_hc2cf_32
+fftwf_codelet_hc2cf_4
+fftwf_codelet_hc2cf_6
+fftwf_codelet_hc2cf_8
+fftwf_codelet_hc2cfdft2_16
+fftwf_codelet_hc2cfdft2_20
+fftwf_codelet_hc2cfdft2_32
+fftwf_codelet_hc2cfdft2_4
+fftwf_codelet_hc2cfdft2_8
+fftwf_codelet_hc2cfdft_10
+fftwf_codelet_hc2cfdft_12
+fftwf_codelet_hc2cfdft_16
+fftwf_codelet_hc2cfdft_2
+fftwf_codelet_hc2cfdft_20
+fftwf_codelet_hc2cfdft_32
+fftwf_codelet_hc2cfdft_4
+fftwf_codelet_hc2cfdft_6
+fftwf_codelet_hc2cfdft_8
+fftwf_codelet_hc2cfdftv_10
+fftwf_codelet_hc2cfdftv_12
+fftwf_codelet_hc2cfdftv_16
+fftwf_codelet_hc2cfdftv_2
+fftwf_codelet_hc2cfdftv_20
+fftwf_codelet_hc2cfdftv_32
+fftwf_codelet_hc2cfdftv_4
+fftwf_codelet_hc2cfdftv_6
+fftwf_codelet_hc2cfdftv_8
+fftwf_codelet_hf2_16
+fftwf_codelet_hf2_20
+fftwf_codelet_hf2_25
+fftwf_codelet_hf2_32
+fftwf_codelet_hf2_4
+fftwf_codelet_hf2_5
+fftwf_codelet_hf2_8
+fftwf_codelet_hf_10
+fftwf_codelet_hf_12
+fftwf_codelet_hf_15
+fftwf_codelet_hf_16
+fftwf_codelet_hf_2
+fftwf_codelet_hf_20
+fftwf_codelet_hf_25
+fftwf_codelet_hf_3
+fftwf_codelet_hf_32
+fftwf_codelet_hf_4
+fftwf_codelet_hf_5
+fftwf_codelet_hf_6
+fftwf_codelet_hf_64
+fftwf_codelet_hf_7
+fftwf_codelet_hf_8
+fftwf_codelet_hf_9
+fftwf_codelet_n1_10
+fftwf_codelet_n1_11
+fftwf_codelet_n1_12
+fftwf_codelet_n1_13
+fftwf_codelet_n1_14
+fftwf_codelet_n1_15
+fftwf_codelet_n1_16
+fftwf_codelet_n1_2
+fftwf_codelet_n1_20
+fftwf_codelet_n1_25
+fftwf_codelet_n1_3
+fftwf_codelet_n1_32
+fftwf_codelet_n1_4
+fftwf_codelet_n1_5
+fftwf_codelet_n1_6
+fftwf_codelet_n1_64
+fftwf_codelet_n1_7
+fftwf_codelet_n1_8
+fftwf_codelet_n1_9
+fftwf_codelet_n1bv_10
+fftwf_codelet_n1bv_11
+fftwf_codelet_n1bv_12
+fftwf_codelet_n1bv_128
+fftwf_codelet_n1bv_13
+fftwf_codelet_n1bv_14
+fftwf_codelet_n1bv_15
+fftwf_codelet_n1bv_16
+fftwf_codelet_n1bv_2
+fftwf_codelet_n1bv_20
+fftwf_codelet_n1bv_25
+fftwf_codelet_n1bv_3
+fftwf_codelet_n1bv_32
+fftwf_codelet_n1bv_4
+fftwf_codelet_n1bv_5
+fftwf_codelet_n1bv_6
+fftwf_codelet_n1bv_64
+fftwf_codelet_n1bv_7
+fftwf_codelet_n1bv_8
+fftwf_codelet_n1bv_9
+fftwf_codelet_n1fv_10
+fftwf_codelet_n1fv_11
+fftwf_codelet_n1fv_12
+fftwf_codelet_n1fv_128
+fftwf_codelet_n1fv_13
+fftwf_codelet_n1fv_14
+fftwf_codelet_n1fv_15
+fftwf_codelet_n1fv_16
+fftwf_codelet_n1fv_2
+fftwf_codelet_n1fv_20
+fftwf_codelet_n1fv_25
+fftwf_codelet_n1fv_3
+fftwf_codelet_n1fv_32
+fftwf_codelet_n1fv_4
+fftwf_codelet_n1fv_5
+fftwf_codelet_n1fv_6
+fftwf_codelet_n1fv_64
+fftwf_codelet_n1fv_7
+fftwf_codelet_n1fv_8
+fftwf_codelet_n1fv_9
+fftwf_codelet_n2bv_10
+fftwf_codelet_n2bv_12
+fftwf_codelet_n2bv_14
+fftwf_codelet_n2bv_16
+fftwf_codelet_n2bv_2
+fftwf_codelet_n2bv_20
+fftwf_codelet_n2bv_32
+fftwf_codelet_n2bv_4
+fftwf_codelet_n2bv_6
+fftwf_codelet_n2bv_64
+fftwf_codelet_n2bv_8
+fftwf_codelet_n2fv_10
+fftwf_codelet_n2fv_12
+fftwf_codelet_n2fv_14
+fftwf_codelet_n2fv_16
+fftwf_codelet_n2fv_2
+fftwf_codelet_n2fv_20
+fftwf_codelet_n2fv_32
+fftwf_codelet_n2fv_4
+fftwf_codelet_n2fv_6
+fftwf_codelet_n2fv_64
+fftwf_codelet_n2fv_8
+fftwf_codelet_n2sv_16
+fftwf_codelet_n2sv_32
+fftwf_codelet_n2sv_4
+fftwf_codelet_n2sv_64
+fftwf_codelet_n2sv_8
+fftwf_codelet_q1_2
+fftwf_codelet_q1_3
+fftwf_codelet_q1_4
+fftwf_codelet_q1_5
+fftwf_codelet_q1_6
+fftwf_codelet_q1_8
+fftwf_codelet_q1bv_2
+fftwf_codelet_q1bv_4
+fftwf_codelet_q1bv_5
+fftwf_codelet_q1bv_8
+fftwf_codelet_q1fv_2
+fftwf_codelet_q1fv_4
+fftwf_codelet_q1fv_5
+fftwf_codelet_q1fv_8
+fftwf_codelet_r2cbIII_10
+fftwf_codelet_r2cbIII_12
+fftwf_codelet_r2cbIII_15
+fftwf_codelet_r2cbIII_16
+fftwf_codelet_r2cbIII_2
+fftwf_codelet_r2cbIII_20
+fftwf_codelet_r2cbIII_25
+fftwf_codelet_r2cbIII_3
+fftwf_codelet_r2cbIII_32
+fftwf_codelet_r2cbIII_4
+fftwf_codelet_r2cbIII_5
+fftwf_codelet_r2cbIII_6
+fftwf_codelet_r2cbIII_64
+fftwf_codelet_r2cbIII_7
+fftwf_codelet_r2cbIII_8
+fftwf_codelet_r2cbIII_9
+fftwf_codelet_r2cb_10
+fftwf_codelet_r2cb_11
+fftwf_codelet_r2cb_12
+fftwf_codelet_r2cb_128
+fftwf_codelet_r2cb_13
+fftwf_codelet_r2cb_14
+fftwf_codelet_r2cb_15
+fftwf_codelet_r2cb_16
+fftwf_codelet_r2cb_2
+fftwf_codelet_r2cb_20
+fftwf_codelet_r2cb_25
+fftwf_codelet_r2cb_3
+fftwf_codelet_r2cb_32
+fftwf_codelet_r2cb_4
+fftwf_codelet_r2cb_5
+fftwf_codelet_r2cb_6
+fftwf_codelet_r2cb_64
+fftwf_codelet_r2cb_7
+fftwf_codelet_r2cb_8
+fftwf_codelet_r2cb_9
+fftwf_codelet_r2cfII_10
+fftwf_codelet_r2cfII_12
+fftwf_codelet_r2cfII_15
+fftwf_codelet_r2cfII_16
+fftwf_codelet_r2cfII_2
+fftwf_codelet_r2cfII_20
+fftwf_codelet_r2cfII_25
+fftwf_codelet_r2cfII_3
+fftwf_codelet_r2cfII_32
+fftwf_codelet_r2cfII_4
+fftwf_codelet_r2cfII_5
+fftwf_codelet_r2cfII_6
+fftwf_codelet_r2cfII_64
+fftwf_codelet_r2cfII_7
+fftwf_codelet_r2cfII_8
+fftwf_codelet_r2cfII_9
+fftwf_codelet_r2cf_10
+fftwf_codelet_r2cf_11
+fftwf_codelet_r2cf_12
+fftwf_codelet_r2cf_128
+fftwf_codelet_r2cf_13
+fftwf_codelet_r2cf_14
+fftwf_codelet_r2cf_15
+fftwf_codelet_r2cf_16
+fftwf_codelet_r2cf_2
+fftwf_codelet_r2cf_20
+fftwf_codelet_r2cf_25
+fftwf_codelet_r2cf_3
+fftwf_codelet_r2cf_32
+fftwf_codelet_r2cf_4
+fftwf_codelet_r2cf_5
+fftwf_codelet_r2cf_6
+fftwf_codelet_r2cf_64
+fftwf_codelet_r2cf_7
+fftwf_codelet_r2cf_8
+fftwf_codelet_r2cf_9
+fftwf_codelet_t1_10
+fftwf_codelet_t1_12
+fftwf_codelet_t1_15
+fftwf_codelet_t1_16
+fftwf_codelet_t1_2
+fftwf_codelet_t1_20
+fftwf_codelet_t1_25
+fftwf_codelet_t1_3
+fftwf_codelet_t1_32
+fftwf_codelet_t1_4
+fftwf_codelet_t1_5
+fftwf_codelet_t1_6
+fftwf_codelet_t1_64
+fftwf_codelet_t1_7
+fftwf_codelet_t1_8
+fftwf_codelet_t1_9
+fftwf_codelet_t1buv_10
+fftwf_codelet_t1buv_2
+fftwf_codelet_t1buv_3
+fftwf_codelet_t1buv_4
+fftwf_codelet_t1buv_5
+fftwf_codelet_t1buv_6
+fftwf_codelet_t1buv_7
+fftwf_codelet_t1buv_8
+fftwf_codelet_t1buv_9
+fftwf_codelet_t1bv_10
+fftwf_codelet_t1bv_12
+fftwf_codelet_t1bv_15
+fftwf_codelet_t1bv_16
+fftwf_codelet_t1bv_2
+fftwf_codelet_t1bv_20
+fftwf_codelet_t1bv_25
+fftwf_codelet_t1bv_3
+fftwf_codelet_t1bv_32
+fftwf_codelet_t1bv_4
+fftwf_codelet_t1bv_5
+fftwf_codelet_t1bv_6
+fftwf_codelet_t1bv_64
+fftwf_codelet_t1bv_7
+fftwf_codelet_t1bv_8
+fftwf_codelet_t1bv_9
+fftwf_codelet_t1fuv_10
+fftwf_codelet_t1fuv_2
+fftwf_codelet_t1fuv_3
+fftwf_codelet_t1fuv_4
+fftwf_codelet_t1fuv_5
+fftwf_codelet_t1fuv_6
+fftwf_codelet_t1fuv_7
+fftwf_codelet_t1fuv_8
+fftwf_codelet_t1fuv_9
+fftwf_codelet_t1fv_10
+fftwf_codelet_t1fv_12
+fftwf_codelet_t1fv_15
+fftwf_codelet_t1fv_16
+fftwf_codelet_t1fv_2
+fftwf_codelet_t1fv_20
+fftwf_codelet_t1fv_25
+fftwf_codelet_t1fv_3
+fftwf_codelet_t1fv_32
+fftwf_codelet_t1fv_4
+fftwf_codelet_t1fv_5
+fftwf_codelet_t1fv_6
+fftwf_codelet_t1fv_64
+fftwf_codelet_t1fv_7
+fftwf_codelet_t1fv_8
+fftwf_codelet_t1fv_9
+fftwf_codelet_t1sv_16
+fftwf_codelet_t1sv_2
+fftwf_codelet_t1sv_32
+fftwf_codelet_t1sv_4
+fftwf_codelet_t1sv_8
+fftwf_codelet_t2_10
+fftwf_codelet_t2_16
+fftwf_codelet_t2_20
+fftwf_codelet_t2_25
+fftwf_codelet_t2_32
+fftwf_codelet_t2_4
+fftwf_codelet_t2_5
+fftwf_codelet_t2_64
+fftwf_codelet_t2_8
+fftwf_codelet_t2bv_10
+fftwf_codelet_t2bv_16
+fftwf_codelet_t2bv_2
+fftwf_codelet_t2bv_20
+fftwf_codelet_t2bv_25
+fftwf_codelet_t2bv_32
+fftwf_codelet_t2bv_4
+fftwf_codelet_t2bv_5
+fftwf_codelet_t2bv_64
+fftwf_codelet_t2bv_8
+fftwf_codelet_t2fv_10
+fftwf_codelet_t2fv_16
+fftwf_codelet_t2fv_2
+fftwf_codelet_t2fv_20
+fftwf_codelet_t2fv_25
+fftwf_codelet_t2fv_32
+fftwf_codelet_t2fv_4
+fftwf_codelet_t2fv_5
+fftwf_codelet_t2fv_64
+fftwf_codelet_t2fv_8
+fftwf_codelet_t2sv_16
+fftwf_codelet_t2sv_32
+fftwf_codelet_t2sv_4
+fftwf_codelet_t2sv_8
+fftwf_codelet_t3bv_10
+fftwf_codelet_t3bv_16
+fftwf_codelet_t3bv_20
+fftwf_codelet_t3bv_25
+fftwf_codelet_t3bv_32
+fftwf_codelet_t3bv_4
+fftwf_codelet_t3bv_5
+fftwf_codelet_t3bv_8
+fftwf_codelet_t3fv_10
+fftwf_codelet_t3fv_16
+fftwf_codelet_t3fv_20
+fftwf_codelet_t3fv_25
+fftwf_codelet_t3fv_32
+fftwf_codelet_t3fv_4
+fftwf_codelet_t3fv_5
+fftwf_codelet_t3fv_8
+fftwf_compute_tilesz
+fftwf_configure_planner
+fftwf_cpy1d
+fftwf_cpy2d
+fftwf_cpy2d_ci
+fftwf_cpy2d_co
+fftwf_cpy2d_pair
+fftwf_cpy2d_pair_ci
+fftwf_cpy2d_pair_co
+fftwf_cpy2d_tiled
+fftwf_cpy2d_tiledbuf
+fftwf_ct_applicable
+fftwf_ct_generic_register
+fftwf_ct_genericbuf_register
+fftwf_ct_uglyp
+fftwf_destroy_plan
+fftwf_dft_bluestein_register
+fftwf_dft_buffered_register
+fftwf_dft_conf_standard
+fftwf_dft_generic_register
+fftwf_dft_indirect_register
+fftwf_dft_indirect_transpose_register
+fftwf_dft_nop_register
+fftwf_dft_r2hc_register
+fftwf_dft_rader_register
+fftwf_dft_rank_geq2_register
+fftwf_dft_solve
+fftwf_dft_thr_vrank_geq1_register
+fftwf_dft_vrank_geq1_register
+fftwf_dft_zerotens
+fftwf_dht_r2hc_register
+fftwf_dht_rader_register
+fftwf_dimcmp
+fftwf_elapsed_since
+fftwf_estimate_cost
+fftwf_execute
+fftwf_execute_dft
+fftwf_execute_dft_c2r
+fftwf_execute_dft_r2c
+fftwf_execute_r2r
+fftwf_execute_split_dft
+fftwf_execute_split_dft_c2r
+fftwf_execute_split_dft_r2c
+fftwf_export_wisdom
+fftwf_export_wisdom_to_file
+fftwf_export_wisdom_to_string
+fftwf_extract_reim
+fftwf_factors_into
+fftwf_find_generator
+fftwf_first_divisor
+fftwf_flops
+fftwf_forget_wisdom
+fftwf_fprint_plan
+fftwf_free
+fftwf_get_crude_time
+fftwf_guru64_kosherp
+fftwf_guru_kosherp
+fftwf_hash
+fftwf_have_sse
+fftwf_hc2c_applicable
+fftwf_hc2hc_applicable
+fftwf_hc2hc_generic_register
+fftwf_iabs
+fftwf_iestimate_cost
+fftwf_ifree
+fftwf_ifree0
+fftwf_imax
+fftwf_imin
+fftwf_import_system_wisdom
+fftwf_import_wisdom
+fftwf_import_wisdom_from_file
+fftwf_import_wisdom_from_string
+fftwf_init_threads
+fftwf_is_prime
+fftwf_isqrt
+fftwf_ithreads_init
+fftwf_join_taint
+fftwf_kdft_dif_register
+fftwf_kdft_difsq_register
+fftwf_kdft_dit_register
+fftwf_kdft_register
+fftwf_kernel_free
+fftwf_kernel_malloc
+fftwf_khc2c_register
+fftwf_khc2hc_register
+fftwf_kr2c_register
+fftwf_kr2r_register
+fftwf_malloc
+fftwf_malloc_plain
+fftwf_many_kosherp
+fftwf_map_r2r_kind
+fftwf_mapflags
+fftwf_md5INT
+fftwf_md5begin
+fftwf_md5end
+fftwf_md5int
+fftwf_md5putb
+fftwf_md5putc
+fftwf_md5puts
+fftwf_md5unsigned
+fftwf_measure_execution_time
+fftwf_mkapiplan
+fftwf_mkplan
+fftwf_mkplan_d
+fftwf_mkplan_dft
+fftwf_mkplan_dftw
+fftwf_mkplan_f_d
+fftwf_mkplan_hc2c
+fftwf_mkplan_hc2hc
+fftwf_mkplan_rdft
+fftwf_mkplan_rdft2
+fftwf_mkplanner
+fftwf_mkprinter
+fftwf_mkprinter_file
+fftwf_mkproblem
+fftwf_mkproblem_dft
+fftwf_mkproblem_dft_d
+fftwf_mkproblem_rdft
+fftwf_mkproblem_rdft2
+fftwf_mkproblem_rdft2_d
+fftwf_mkproblem_rdft2_d_3pointers
+fftwf_mkproblem_rdft_0_d
+fftwf_mkproblem_rdft_1
+fftwf_mkproblem_rdft_1_d
+fftwf_mkproblem_rdft_d
+fftwf_mkproblem_unsolvable
+fftwf_mkscanner
+fftwf_mksolver
+fftwf_mksolver_ct
+fftwf_mksolver_ct_threads
+fftwf_mksolver_dft_direct
+fftwf_mksolver_dft_directbuf
+fftwf_mksolver_hc2c
+fftwf_mksolver_hc2hc
+fftwf_mksolver_hc2hc_threads
+fftwf_mksolver_rdft2_direct
+fftwf_mksolver_rdft_r2c_direct
+fftwf_mksolver_rdft_r2c_directbuf
+fftwf_mksolver_rdft_r2r_direct
+fftwf_mkstride
+fftwf_mktensor
+fftwf_mktensor_0d
+fftwf_mktensor_1d
+fftwf_mktensor_2d
+fftwf_mktensor_3d
+fftwf_mktensor_4d
+fftwf_mktensor_5d
+fftwf_mktensor_iodims
+fftwf_mktensor_iodims64
+fftwf_mktensor_rowmajor
+fftwf_mktriggen
+fftwf_modulo
+fftwf_nbuf
+fftwf_nbuf_redundant
+fftwf_next_prime
+fftwf_null_awake
+fftwf_ops_add
+fftwf_ops_add2
+fftwf_ops_cpy
+fftwf_ops_madd
+fftwf_ops_madd2
+fftwf_ops_other
+fftwf_ops_zero
+fftwf_pickdim
+fftwf_plan_awake
+fftwf_plan_destroy_internal
+fftwf_plan_dft
+fftwf_plan_dft_1d
+fftwf_plan_dft_2d
+fftwf_plan_dft_3d
+fftwf_plan_dft_c2r
+fftwf_plan_dft_c2r_1d
+fftwf_plan_dft_c2r_2d
+fftwf_plan_dft_c2r_3d
+fftwf_plan_dft_r2c
+fftwf_plan_dft_r2c_1d
+fftwf_plan_dft_r2c_2d
+fftwf_plan_dft_r2c_3d
+fftwf_plan_guru64_dft
+fftwf_plan_guru64_dft_c2r
+fftwf_plan_guru64_dft_r2c
+fftwf_plan_guru64_r2r
+fftwf_plan_guru64_split_dft
+fftwf_plan_guru64_split_dft_c2r
+fftwf_plan_guru64_split_dft_r2c
+fftwf_plan_guru_dft
+fftwf_plan_guru_dft_c2r
+fftwf_plan_guru_dft_r2c
+fftwf_plan_guru_r2r
+fftwf_plan_guru_split_dft
+fftwf_plan_guru_split_dft_c2r
+fftwf_plan_guru_split_dft_r2c
+fftwf_plan_many_dft
+fftwf_plan_many_dft_c2r
+fftwf_plan_many_dft_r2c
+fftwf_plan_many_r2r
+fftwf_plan_null_destroy
+fftwf_plan_r2r
+fftwf_plan_r2r_1d
+fftwf_plan_r2r_2d
+fftwf_plan_r2r_3d
+fftwf_plan_with_nthreads
+fftwf_planner_destroy
+fftwf_power_mod
+fftwf_print_plan
+fftwf_printer_destroy
+fftwf_problem_destroy
+fftwf_rader_tl_delete
+fftwf_rader_tl_find
+fftwf_rader_tl_insert
+fftwf_rdft2_buffered_register
+fftwf_rdft2_complex_n
+fftwf_rdft2_inplace_strides
+fftwf_rdft2_nop_register
+fftwf_rdft2_pad
+fftwf_rdft2_rank0_register
+fftwf_rdft2_rank_geq2_register
+fftwf_rdft2_rdft_register
+fftwf_rdft2_solve
+fftwf_rdft2_strides
+fftwf_rdft2_tensor_max_index
+fftwf_rdft2_thr_vrank_geq1_register
+fftwf_rdft2_vrank_geq1_register
+fftwf_rdft_buffered_register
+fftwf_rdft_conf_standard
+fftwf_rdft_dht_register
+fftwf_rdft_generic_register
+fftwf_rdft_indirect_register
+fftwf_rdft_kind_str
+fftwf_rdft_nop_register
+fftwf_rdft_rank0_register
+fftwf_rdft_rank_geq2_register
+fftwf_rdft_solve
+fftwf_rdft_thr_vrank_geq1_register
+fftwf_rdft_vrank3_transpose_register
+fftwf_rdft_vrank_geq1_register
+fftwf_rdft_zerotens
+fftwf_redft00e_r2hc_pad_register
+fftwf_regsolver_ct_directw
+fftwf_regsolver_ct_directwsq
+fftwf_regsolver_hc2c_direct
+fftwf_regsolver_hc2hc_direct
+fftwf_reodft00e_splitradix_register
+fftwf_reodft010e_r2hc_register
+fftwf_reodft11e_r2hc_odd_register
+fftwf_reodft11e_radix2_r2hc_register
+fftwf_reodft_conf_standard
+fftwf_rodft00e_r2hc_pad_register
+fftwf_safe_mulmod
+fftwf_scanner_destroy
+fftwf_set_timelimit
+fftwf_solver_destroy
+fftwf_solver_register
+fftwf_solver_use
+fftwf_solvtab_exec
+fftwf_spawn_loop
+fftwf_stride_destroy
+fftwf_taint
+fftwf_tensor_append
+fftwf_tensor_compress
+fftwf_tensor_compress_contiguous
+fftwf_tensor_copy
+fftwf_tensor_copy_except
+fftwf_tensor_copy_inplace
+fftwf_tensor_copy_sub
+fftwf_tensor_destroy
+fftwf_tensor_destroy2
+fftwf_tensor_destroy4
+fftwf_tensor_equal
+fftwf_tensor_inplace_locations
+fftwf_tensor_inplace_strides
+fftwf_tensor_inplace_strides2
+fftwf_tensor_kosherp
+fftwf_tensor_max_index
+fftwf_tensor_md5
+fftwf_tensor_min_istride
+fftwf_tensor_min_ostride
+fftwf_tensor_min_stride
+fftwf_tensor_print
+fftwf_tensor_split
+fftwf_tensor_strides_decrease
+fftwf_tensor_sz
+fftwf_tensor_tornk1
+fftwf_the_planner
+fftwf_threads_cleanup
+fftwf_threads_conf_standard
+fftwf_tile2d
+fftwf_toobig
+fftwf_transpose
+fftwf_transpose_tiled
+fftwf_transpose_tiledbuf
+fftwf_triggen_destroy
+fftwf_twiddle_awake
+fftwf_twiddle_length
+;sfftw_cleanup_
+;sfftw_cleanup__
+;sfftw_cleanup_threads_
+;sfftw_cleanup_threads__
+;sfftw_destroy_plan_
+;sfftw_destroy_plan__
+;sfftw_execute_
+;sfftw_execute__
+;sfftw_execute_dft_
+;sfftw_execute_dft__
+;sfftw_execute_dft_c2r_
+;sfftw_execute_dft_c2r__
+;sfftw_execute_dft_r2c_
+;sfftw_execute_dft_r2c__
+;sfftw_execute_r2r_
+;sfftw_execute_r2r__
+;sfftw_execute_split_dft_
+;sfftw_execute_split_dft__
+;sfftw_execute_split_dft_c2r_
+;sfftw_execute_split_dft_c2r__
+;sfftw_execute_split_dft_r2c_
+;sfftw_execute_split_dft_r2c__
+;sfftw_export_wisdom_
+;sfftw_export_wisdom__
+;sfftw_flops_
+;sfftw_flops__
+;sfftw_forget_wisdom_
+;sfftw_forget_wisdom__
+;sfftw_import_system_wisdom_
+;sfftw_import_system_wisdom__
+;sfftw_import_wisdom_
+;sfftw_import_wisdom__
+;sfftw_init_threads_
+;sfftw_init_threads__
+;sfftw_plan_dft_
+;sfftw_plan_dft_1d_
+;sfftw_plan_dft_1d__
+;sfftw_plan_dft_2d_
+;sfftw_plan_dft_2d__
+;sfftw_plan_dft_3d_
+;sfftw_plan_dft_3d__
+;sfftw_plan_dft__
+;sfftw_plan_dft_c2r_
+;sfftw_plan_dft_c2r_1d_
+;sfftw_plan_dft_c2r_1d__
+;sfftw_plan_dft_c2r_2d_
+;sfftw_plan_dft_c2r_2d__
+;sfftw_plan_dft_c2r_3d_
+;sfftw_plan_dft_c2r_3d__
+;sfftw_plan_dft_c2r__
+;sfftw_plan_dft_r2c_
+;sfftw_plan_dft_r2c_1d_
+;sfftw_plan_dft_r2c_1d__
+;sfftw_plan_dft_r2c_2d_
+;sfftw_plan_dft_r2c_2d__
+;sfftw_plan_dft_r2c_3d_
+;sfftw_plan_dft_r2c_3d__
+;sfftw_plan_dft_r2c__
+;sfftw_plan_guru_dft_
+;sfftw_plan_guru_dft__
+;sfftw_plan_guru_dft_c2r_
+;sfftw_plan_guru_dft_c2r__
+;sfftw_plan_guru_dft_r2c_
+;sfftw_plan_guru_dft_r2c__
+;sfftw_plan_guru_r2r_
+;sfftw_plan_guru_r2r__
+;sfftw_plan_guru_split_dft_
+;sfftw_plan_guru_split_dft__
+;sfftw_plan_guru_split_dft_c2r_
+;sfftw_plan_guru_split_dft_c2r__
+;sfftw_plan_guru_split_dft_r2c_
+;sfftw_plan_guru_split_dft_r2c__
+;sfftw_plan_many_dft_
+;sfftw_plan_many_dft__
+;sfftw_plan_many_dft_c2r_
+;sfftw_plan_many_dft_c2r__
+;sfftw_plan_many_dft_r2c_
+;sfftw_plan_many_dft_r2c__
+;sfftw_plan_many_r2r_
+;sfftw_plan_many_r2r__
+;sfftw_plan_r2r_
+;sfftw_plan_r2r_1d_
+;sfftw_plan_r2r_1d__
+;sfftw_plan_r2r_2d_
+;sfftw_plan_r2r_2d__
+;sfftw_plan_r2r_3d_
+;sfftw_plan_r2r_3d__
+;sfftw_plan_r2r__
+;sfftw_plan_with_nthreads_
+;sfftw_plan_with_nthreads__
+;sfftw_print_plan_
+;sfftw_print_plan__
diff -Nru fftw-3.2.2.orig/kernel/CMakeLists.txt fftw-3.2.2/kernel/CMakeLists.txt
--- fftw-3.2.2.orig/kernel/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/kernel/CMakeLists.txt	2010-10-13 01:11:40.611344400 +0200
@@ -0,0 +1,17 @@
+# pkgincludedir = $(includedir)/fftw3@PREC_SUFFIX@
+# pkginclude_HEADERS = ifftw.h cycle.h
+
+set(kernel_SRCS align.c alloc.c assert.c awake.c buffered.c
+cpy1d.c cpy2d-pair.c cpy2d.c ct.c debug.c extract-reim.c hash.c iabs.c
+kalloc.c md5-1.c md5.c minmax.c ops.c pickdim.c plan.c planner.c
+primes.c print.c problem.c rader.c scan.c solver.c solvtab.c stride.c
+tensor.c tensor1.c tensor2.c tensor3.c tensor4.c tensor5.c tensor7.c
+tensor8.c tensor9.c tile2d.c timer.c transpose.c trig.c twiddle.c
+)
+
+if(BUILD_ALL_STATIC)
+    add_library(kernel STATIC ${kernel_SRCS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(kernel_SRCS)
+    set(fftw_SRCS ${fftw_SRCS} ${kernel_SRCS} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
diff -Nru fftw-3.2.2.orig/libbench2/CMakeLists.txt fftw-3.2.2/libbench2/CMakeLists.txt
--- fftw-3.2.2.orig/libbench2/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/libbench2/CMakeLists.txt	2010-10-13 02:10:17.466497000 +0200
@@ -0,0 +1,11 @@
+set(bench2_SRCS after-ccopy-from.c after-ccopy-to.c
+after-hccopy-from.c after-hccopy-to.c after-rcopy-from.c
+after-rcopy-to.c aligned-main.c allocate.c aset.c
+bench-cost-postprocess.c bench-exit.c bench-main.c can-do.c caset.c
+dotens2.c info.c main.c mflops.c mp.c ovtpvt.c pow2.c problem.c
+report.c speed.c tensor.c timer.c useropt.c util.c verify-dft.c
+verify-lib.c verify-r2r.c verify-rdft2.c verify.c zero.c
+my-getopt.c
+)
+
+add_library(bench2 STATIC ${bench2_SRCS})
diff -Nru fftw-3.2.2.orig/rdft/CMakeLists.txt fftw-3.2.2/rdft/CMakeLists.txt
--- fftw-3.2.2.orig/rdft/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/rdft/CMakeLists.txt	2010-10-13 03:03:46.482042200 +0200
@@ -0,0 +1,23 @@
+add_subdirectory(scalar)
+add_subdirectory(simd)
+
+
+set(RDFT2_SRCS buffered2.c direct2.c nop2.c rank0-rdft2.c rank-geq2-rdft2.c
+plan2.c problem2.c solve2.c vrank-geq1-rdft2.c rdft2-rdft.c
+rdft2-tensor-max-index.c rdft2-inplace-strides.c rdft2-strides.c
+khc2c.c ct-hc2c.c ct-hc2c-direct.c
+)
+
+set(rdft_SRCS hc2hc.c dft-r2hc.c dht-r2hc.c dht-rader.c
+buffered.c conf.c direct-r2r.c direct-r2c.c generic.c
+hc2hc-direct.c hc2hc-generic.c khc2hc.c kr2c.c kr2r.c indirect.c nop.c
+plan.c problem.c rank0.c rank-geq2.c rdft-dht.c solve.c
+vrank-geq1.c vrank3-transpose.c ${RDFT2_SRCS}
+)
+
+if(BUILD_ALL_STATIC)
+    add_library(rdft STATIC ${rdft_SRCS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(rdft_SRCS)
+    set(fftw_SRCS ${fftw_SRCS} ${rdft_SRCS} ${_fftw_SRCS} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
diff -Nru fftw-3.2.2.orig/rdft/scalar/CMakeLists.txt fftw-3.2.2/rdft/scalar/CMakeLists.txt
--- fftw-3.2.2.orig/rdft/scalar/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/rdft/scalar/CMakeLists.txt	2010-10-13 01:13:03.826104000 +0200
@@ -0,0 +1,12 @@
+add_subdirectory(r2cb)
+add_subdirectory(r2cf)
+add_subdirectory(r2r)
+
+set(rdft_scalar_SRCS ${rdft_scalar_SRCS} hfb.c r2c.c r2r.c hc2c.c)
+
+if(BUILD_ALL_STATIC)
+    add_library(rdft_scalar STATIC ${rdft_scalar_SRCS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(rdft_scalar_SRCS)
+    set(_fftw_SRCS ${_fftw_SRCS} ${rdft_scalar_SRCS} ${__fftw_SRCS} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
diff -Nru fftw-3.2.2.orig/rdft/scalar/r2cb/CMakeLists.txt fftw-3.2.2/rdft/scalar/r2cb/CMakeLists.txt
--- fftw-3.2.2.orig/rdft/scalar/r2cb/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/rdft/scalar/r2cb/CMakeLists.txt	2010-10-13 01:27:41.314293500 +0200
@@ -0,0 +1,126 @@
+# This Makefile.am specifies a set of codelets, efficient transforms
+# of small sizes, that are used as building blocks (kernels) by FFTW
+# to build up large transforms, as well as the options for generating
+# and compiling them.
+
+# You can customize FFTW for special needs, e.g. to handle certain
+# sizes more efficiently, by adding new codelets to the lists of those
+# included by default.  If you change the list of codelets, any new
+# ones you added will be automatically generated when you run the
+# bootstrap script (see "Generating your own code" in the FFTW
+# manual).
+
+###########################################################################
+# r2cb_<n> is a hard-coded complex-to-real FFT of size <n> (base cases
+# of real-output FFT recursion)
+set(R2CB r2cb_2.c r2cb_3.c r2cb_4.c r2cb_5.c r2cb_6.c r2cb_7.c r2cb_8.c
+r2cb_9.c r2cb_10.c r2cb_11.c r2cb_12.c r2cb_13.c r2cb_14.c r2cb_15.c
+r2cb_16.c r2cb_32.c r2cb_64.c r2cb_128.c r2cb_20.c r2cb_25.c
+# r2cb_30.c r2cb_40.c r2cb_50.c
+)
+
+###########################################################################
+# hb_<r> is a "twiddle" FFT of size <r>, implementing a radix-r DIF
+# step for a real-output FFT.  Every hb codelet must have a
+# corresponding r2cbIII codelet (see below)!
+set(HB hb_2.c hb_3.c hb_4.c hb_5.c hb_6.c hb_7.c hb_8.c hb_9.c
+hb_10.c hb_12.c hb_15.c hb_16.c hb_32.c hb_64.c
+hb_20.c hb_25.c # hb_30.c hb_40.c hb_50.c
+)
+
+# like hb, but generates part of its trig table on the fly (good for large n)
+set(HB2 hb2_4.c hb2_8.c hb2_16.c hb2_32.c
+hb2_5.c hb2_20.c hb2_25.c
+)
+
+# an r2cb transform where the output is shifted by half a sample (input
+# is multiplied by a phase).  This is needed as part of the DIF recursion;
+# every hb_<r> or hb2_<r> codelet should have a corresponding r2cbIII_<r>
+set(R2CBIII r2cbIII_2.c r2cbIII_3.c r2cbIII_4.c r2cbIII_5.c r2cbIII_6.c
+r2cbIII_7.c r2cbIII_8.c r2cbIII_9.c r2cbIII_10.c r2cbIII_12.c
+r2cbIII_15.c r2cbIII_16.c r2cbIII_32.c r2cbIII_64.c
+r2cbIII_20.c r2cbIII_25.c # r2cbIII_30.c r2cbIII_40.c r2cbIII_50.c
+)
+
+###########################################################################
+# hc2cb_<r> is a "twiddle" FFT of size <r>, implementing a radix-r DIF
+# step for a real-input FFT with rdft2-style output.  <r> must be even.
+set(HC2CB hc2cb_2.c hc2cb_4.c hc2cb_6.c hc2cb_8.c hc2cb_10.c hc2cb_12.c
+hc2cb_16.c hc2cb_32.c
+hc2cb_20.c # hc2cb_30.c
+)
+
+set(HC2CBDFT hc2cbdft_2.c hc2cbdft_4.c hc2cbdft_6.c hc2cbdft_8.c
+hc2cbdft_10.c hc2cbdft_12.c hc2cbdft_16.c hc2cbdft_32.c
+hc2cbdft_20.c # hc2cbdft_30.c
+)
+
+# like hc2cb, but generates part of its trig table on the fly (good
+# for large n)
+set(HC2CB2 hc2cb2_4.c hc2cb2_8.c hc2cb2_16.c hc2cb2_32.c
+hc2cb2_20.c # hc2cb2_30.c
+)
+set(HC2CBDFT2 hc2cbdft2_4.c hc2cbdft2_8.c hc2cbdft2_16.c hc2cbdft2_32.c
+hc2cbdft2_20.c # hc2cbdft2_30.c
+)
+
+###########################################################################
+set(ALL_CODELETS ${R2CB} ${HB} ${HB2} ${R2CBIII} ${HC2CB} ${HC2CB2} ${HC2CBDFT} ${HC2CBDFT2})
+
+include(${CMAKE_SOURCE_DIR}/support/codelets.cmake)
+
+set(SOLVTAB_NAME "X(solvtab_rdft_r2cb)")
+
+set(CODLIST ${CMAKE_CURRENT_BINARY_DIR}/codlist.c)
+set(CODELET_NAME codelet_)
+
+write_codelet_list(${CODLIST} ${CODELET_NAME} ${SOLVTAB_NAME} ${ALL_CODELETS})
+
+set(rdft_scalar_r2cb_SRCS ${ALL_CODELETS})
+
+if(BUILD_ALL_STATIC)
+    add_library(rdft_scalar_r2cb STATIC ${rdft_scalar_r2cb_SRCS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(rdft_scalar_r2cb_SRCS)
+    set(__fftw_SRCS ${__fftw_SRCS} ${rdft_scalar_r2cb_SRCS} ${CODLIST} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
+
+# this is old source code which can be changed later
+# only delete codlist.c in maintainer-mode, since it is included in the dist
+# FIXME: is there a way to delete in 'make clean' only when builddir != srcdir?
+#maintainer-clean-local:
+#	rm -f $(CODLIST)
+
+#if MAINTAINER_MODE
+#FLAGS_R2CB=$(RDFT_FLAGS_COMMON) -sign 1
+#FLAGS_HB=$(RDFT_FLAGS_COMMON) -sign 1
+#FLAGS_HB2=$(RDFT_FLAGS_COMMON) -sign 1 -twiddle-log3 -precompute-twiddles
+#FLAGS_HC2CB=$(RDFT_FLAGS_COMMON) -sign 1
+#FLAGS_HC2CB2=$(RDFT_FLAGS_COMMON) -sign 1 -twiddle-log3 -precompute-twiddles
+#FLAGS_R2CBIII=$(RDFT_FLAGS_COMMON) -sign 1
+#
+#r2cb_%.c:  $(CODELET_DEPS) $(GEN_R2CB)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_R2CB) $(FLAGS_R2CB) -n $* -name r2cb_$* -include "r2cb.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#hb_%.c:  $(CODELET_DEPS) $(GEN_HC2HC)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_HC2HC) $(FLAGS_HB) -n $* -dif -name hb_$* -include "hb.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#hb2_%.c:  $(CODELET_DEPS) $(GEN_HC2HC)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_HC2HC) $(FLAGS_HB2) -n $* -dif -name hb2_$* -include "hb.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#r2cbIII_%.c:  $(CODELET_DEPS) $(GEN_R2CB)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_R2CB) $(FLAGS_R2CB) -n $* -name r2cbIII_$* -dft-III -include "r2cbIII.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#hc2cb_%.c:  $(CODELET_DEPS) $(GEN_HC2C)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_HC2C) $(FLAGS_HC2CB) -n $* -dif -name hc2cb_$* -include "hc2cb.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#hc2cb2_%.c:  $(CODELET_DEPS) $(GEN_HC2C)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_HC2C) $(FLAGS_HC2CB2) -n $* -dif -name hc2cb2_$* -include "hc2cb.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#hc2cbdft_%.c:  $(CODELET_DEPS) $(GEN_HC2CDFT)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_HC2CDFT) $(FLAGS_HC2CB) -n $* -dif -name hc2cbdft_$* -include "hc2cb.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#hc2cbdft2_%.c:  $(CODELET_DEPS) $(GEN_HC2CDFT)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_HC2CDFT) $(FLAGS_HC2CB) -n $* -dif -name hc2cbdft2_$* -include "hc2cb.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#endif # MAINTAINER_MODE
diff -Nru fftw-3.2.2.orig/rdft/scalar/r2cf/CMakeLists.txt fftw-3.2.2/rdft/scalar/r2cf/CMakeLists.txt
--- fftw-3.2.2.orig/rdft/scalar/r2cf/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/rdft/scalar/r2cf/CMakeLists.txt	2010-10-13 01:25:33.381976200 +0200
@@ -0,0 +1,128 @@
+# This Makefile.am specifies a set of codelets, efficient transforms
+# of small sizes, that are used as building blocks (kernels) by FFTW
+# to build up large transforms, as well as the options for generating
+# and compiling them.
+
+# You can customize FFTW for special needs, e.g. to handle certain
+# sizes more efficiently, by adding new codelets to the lists of those
+# included by default.  If you change the list of codelets, any new
+# ones you added will be automatically generated when you run the
+# bootstrap script (see "Generating your own code" in the FFTW
+# manual).
+
+###########################################################################
+
+###########################################################################
+# r2cf_<n> is a hard-coded real-to-complex FFT of size <n> (base cases
+# of real-input FFT recursion)
+set(R2CF r2cf_2.c r2cf_3.c r2cf_4.c r2cf_5.c r2cf_6.c r2cf_7.c r2cf_8.c
+r2cf_9.c r2cf_10.c r2cf_11.c r2cf_12.c r2cf_13.c r2cf_14.c r2cf_15.c
+r2cf_16.c r2cf_32.c r2cf_64.c r2cf_128.c
+r2cf_20.c r2cf_25.c # r2cf_30.c r2cf_40.c r2cf_50.c
+)
+
+###########################################################################
+# hf_<r> is a "twiddle" FFT of size <r>, implementing a radix-r DIT
+# step for a real-input FFT.  Every hf codelet must have a
+# corresponding r2cfII codelet (see below)!
+set(HF hf_2.c hf_3.c hf_4.c hf_5.c hf_6.c hf_7.c hf_8.c hf_9.c
+hf_10.c hf_12.c hf_15.c hf_16.c hf_32.c hf_64.c
+hf_20.c hf_25.c # hf_30.c hf_40.c hf_50.c
+)
+
+# like hf, but generates part of its trig table on the fly (good for large n)
+set(HF2 hf2_4.c hf2_8.c hf2_16.c hf2_32.c
+hf2_5.c hf2_20.c hf2_25.c
+)
+
+# an r2cf transform where the input is shifted by half a sample (output
+# is multiplied by a phase).  This is needed as part of the DIT recursion;
+# every hf_<r> or hf2_<r> codelet should have a corresponding r2cfII_<r>
+set(R2CFII r2cfII_2.c r2cfII_3.c r2cfII_4.c r2cfII_5.c r2cfII_6.c	
+r2cfII_7.c r2cfII_8.c r2cfII_9.c r2cfII_10.c r2cfII_12.c r2cfII_15.c
+r2cfII_16.c r2cfII_32.c r2cfII_64.c
+r2cfII_20.c r2cfII_25.c # r2cfII_30.c r2cfII_40.c r2cfII_50.c
+)
+
+###########################################################################
+# hc2cf_<r> is a "twiddle" FFT of size <r>, implementing a radix-r DIT
+# step for a real-input FFT with rdft2-style output.  <r> must be even.
+set(HC2CF hc2cf_2.c hc2cf_4.c hc2cf_6.c hc2cf_8.c hc2cf_10.c hc2cf_12.c
+hc2cf_16.c hc2cf_32.c
+hc2cf_20.c # hc2cf_30.c
+)
+
+set(HC2CFDFT hc2cfdft_2.c hc2cfdft_4.c hc2cfdft_6.c hc2cfdft_8.c
+hc2cfdft_10.c hc2cfdft_12.c hc2cfdft_16.c hc2cfdft_32.c
+hc2cfdft_20.c # hc2cfdft_30.c
+)
+
+# like hc2cf, but generates part of its trig table on the fly (good
+# for large n)
+set(HC2CF2 hc2cf2_4.c hc2cf2_8.c hc2cf2_16.c hc2cf2_32.c
+hc2cf2_20.c # hc2cf2_30.c
+)
+set(HC2CFDFT2 hc2cfdft2_4.c hc2cfdft2_8.c hc2cfdft2_16.c hc2cfdft2_32.c
+hc2cfdft2_20.c # hc2cfdft2_30.c
+)
+
+###########################################################################
+set(ALL_CODELETS ${R2CF} ${HF} ${HF2} ${R2CFII} ${HC2CF} ${HC2CF2} ${HC2CFDFT} ${HC2CFDFT2})
+
+include(${CMAKE_SOURCE_DIR}/support/codelets.cmake)
+
+set(SOLVTAB_NAME "X(solvtab_rdft_r2cf)")
+
+set(CODLIST ${CMAKE_CURRENT_BINARY_DIR}/codlist.c)
+set(CODELET_NAME codelet_)
+
+write_codelet_list(${CODLIST} ${CODELET_NAME} ${SOLVTAB_NAME} ${ALL_CODELETS})
+
+set(rdft_scalar_r2cf_SRCS ${ALL_CODELETS})
+
+if(BUILD_ALL_STATIC)
+    add_library(rdft_scalar_r2cf STATIC ${rdft_scalar_r2cf_SRCS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(rdft_scalar_r2cf_SRCS)
+    set(__fftw_SRCS ${__fftw_SRCS} ${rdft_scalar_r2cf_SRCS} ${CODLIST} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
+
+# this is old source code which can be changed later
+# only delete codlist.c in maintainer-mode, since it is included in the dist
+# FIXME: is there a way to delete in 'make clean' only when builddir != srcdir?
+#maintainer-clean-local:
+#	rm -f $(CODLIST)
+
+#if MAINTAINER_MODE
+#FLAGS_R2CF=$(RDFT_FLAGS_COMMON)
+#FLAGS_HF=$(RDFT_FLAGS_COMMON)
+#FLAGS_HF2=$(RDFT_FLAGS_COMMON) -twiddle-log3 -precompute-twiddles
+#FLAGS_HC2CF=$(RDFT_FLAGS_COMMON)
+#FLAGS_HC2CF2=$(RDFT_FLAGS_COMMON) -twiddle-log3 -precompute-twiddles
+#FLAGS_R2CFII=$(RDFT_FLAGS_COMMON)
+#
+#r2cf_%.c:  $(CODELET_DEPS) $(GEN_R2CF)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_R2CF) $(FLAGS_R2CF) -n $* -name r2cf_$* -include "r2cf.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#hf_%.c:  $(CODELET_DEPS) $(GEN_HC2HC)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_HC2HC) $(FLAGS_HF) -n $* -dit -name hf_$* -include "hf.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#hf2_%.c:  $(CODELET_DEPS) $(GEN_HC2HC)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_HC2HC) $(FLAGS_HF2) -n $* -dit -name hf2_$* -include "hf.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#r2cfII_%.c:  $(CODELET_DEPS) $(GEN_R2CF)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_R2CF) $(FLAGS_R2CF) -n $* -name r2cfII_$* -dft-II -include "r2cfII.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#hc2cf_%.c:  $(CODELET_DEPS) $(GEN_HC2C)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_HC2C) $(FLAGS_HC2CF) -n $* -dit -name hc2cf_$* -include "hc2cf.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#hc2cf2_%.c:  $(CODELET_DEPS) $(GEN_HC2C)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_HC2C) $(FLAGS_HC2CF2) -n $* -dit -name hc2cf2_$* -include "hc2cf.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#hc2cfdft_%.c:  $(CODELET_DEPS) $(GEN_HC2CDFT)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_HC2CDFT) $(FLAGS_HC2CF) -n $* -dit -name hc2cfdft_$* -include "hc2cf.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#hc2cfdft2_%.c:  $(CODELET_DEPS) $(GEN_HC2CDFT)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_HC2CDFT) $(FLAGS_HC2CF2) -n $* -dit -name hc2cfdft2_$* -include "hc2cf.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#endif # MAINTAINER_MODE
diff -Nru fftw-3.2.2.orig/rdft/scalar/r2r/CMakeLists.txt fftw-3.2.2/rdft/scalar/r2r/CMakeLists.txt
--- fftw-3.2.2.orig/rdft/scalar/r2r/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/rdft/scalar/r2r/CMakeLists.txt	2010-10-13 01:26:53.051533000 +0200
@@ -0,0 +1,100 @@
+# This Makefile.am specifies a set of codelets, efficient transforms
+# of small sizes, that are used as building blocks (kernels) by FFTW
+# to build up large transforms, as well as the options for generating
+# and compiling them.
+
+# You can customize FFTW for special needs, e.g. to handle certain
+# sizes more efficiently, by adding new codelets to the lists of those
+# included by default.  If you change the list of codelets, any new
+# ones you added will be automatically generated when you run the
+# bootstrap script (see "Generating your own code" in the FFTW
+# manual).
+
+###########################################################################
+
+###########################################################################
+# The following lines specify the REDFT/RODFT/DHT sizes for which to generate
+# specialized codelets.  Currently, only REDFT01/10 of size 8 (used in JPEG).
+
+# e<a><b>_<n> is a hard-coded REDFT<a><b> FFT (DCT) of size <n>
+set(E00 # e00_2.c e00_3.c e00_4.c e00_5.c e00_6.c e00_7.c e00_8.c
+)
+set(E01 e01_8.c # e01_2.c e01_3.c e01_4.c e01_5.c e01_6.c e01_7.c
+)
+set(E10 e10_8.c # e10_2.c e10_3.c e10_4.c e10_5.c e10_6.c e10_7.c
+)
+set(E11 # e11_2.c e11_3.c e11_4.c e11_5.c e11_6.c e11_7.c e11_8.c
+)
+
+# o<a><b>_<n> is a hard-coded RODFT<a><b> FFT (DST) of size <n>
+set(O00 # o00_2.c o00_3.c o00_4.c o00_5.c o00_6.c o00_7.c o00_8.c
+)
+set(O01 # o01_2.c o01_3.c o01_4.c o01_5.c o01_6.c o01_7.c o01_8.c
+)
+set(O10 # o10_2.c o10_3.c o10_4.c o10_5.c o10_6.c o10_7.c o10_8.c
+)
+set(O11 # o11_2.c o11_3.c o11_4.c o11_5.c o11_6.c o11_7.c o11_8.c
+)
+
+# dht_<n> is a hard-coded DHT of size <n>
+set(DHT # dht_2.c dht_3.c dht_4.c dht_5.c dht_6.c dht_7.c dht_8.c
+)
+
+###########################################################################
+set(ALL_CODELETS ${E00} ${E01} ${E10} ${E11} ${O00} ${O01} ${O10} ${O11} ${DHT})
+
+include(${CMAKE_SOURCE_DIR}/support/codelets.cmake)
+
+set(SOLVTAB_NAME "X(solvtab_rdft_r2r)")
+
+set(CODLIST ${CMAKE_CURRENT_BINARY_DIR}/codlist.c)
+set(CODELET_NAME codelet_)
+
+write_codelet_list(${CODLIST} ${CODELET_NAME} ${SOLVTAB_NAME} ${ALL_CODELETS})
+
+set(rdft_scalar_r2r_SRCS ${ALL_CODELETS})
+
+if(BUILD_ALL_STATIC)
+    add_library(rdft_scalar_r2r STATIC ${rdft_scalar_r2r_SRCS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(rdft_scalar_r2r_SRCS)
+    set(__fftw_SRCS ${__fftw_SRCS} ${rdft_scalar_r2r_SRCS} ${CODLIST} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
+
+# this is old source code which can be changed later
+# only delete codlist.c in maintainer-mode, since it is included in the dist
+# FIXME: is there a way to delete in 'make clean' only when builddir != srcdir?
+#maintainer-clean-local:
+#	rm -f $(CODLIST)
+
+#if MAINTAINER_MODE
+#FLAGS_N1=$(DFT_FLAGS_COMMON)
+#FLAGS_T1=$(DFT_FLAGS_COMMON)
+#FLAGS_T2=$(DFT_FLAGS_COMMON) -twiddle-log3 -precompute-twiddles
+#FLAGS_F1=$(DFT_FLAGS_COMMON)
+#FLAGS_F2=$(DFT_FLAGS_COMMON) -twiddle-log3  -precompute-twiddles
+#FLAGS_Q1=$(DFT_FLAGS_COMMON) -reload-twiddle
+#FLAGS_Q2=$(DFT_FLAGS_COMMON) -twiddle-log3  -precompute-twiddles
+#
+#n1_%.c:  $(CODELET_DEPS) $(GEN_NOTW)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_NOTW) $(FLAGS_N1) -n $* -name n1_$* -include "n.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#t1_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE) $(FLAGS_T1) -n $* -name t1_$* -include "t.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#t2_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE) $(FLAGS_T2) -n $* -name t2_$* -include "t.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#f1_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE) $(FLAGS_F1) -dif -n $* -name f1_$* -include "f.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#f2_%.c:  $(CODELET_DEPS) $(GEN_TWIDDLE)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDDLE) $(FLAGS_F2) -dif -n $* -name f2_$* -include "f.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#q1_%.c:  $(CODELET_DEPS) $(GEN_TWIDSQ)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDSQ) $(FLAGS_Q1) -dif -n $* -name q1_$* -include "q.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#q2_%.c:  $(CODELET_DEPS) $(GEN_TWIDSQ)
+#	($(PRELUDE_COMMANDS_DFT); $(TWOVERS) $(GEN_TWIDSQ) $(FLAGS_Q2) -dif -n $* -name q2_$* -include "q.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#endif # MAINTAINER_MODE
diff -Nru fftw-3.2.2.orig/rdft/simd/CMakeLists.txt fftw-3.2.2/rdft/simd/CMakeLists.txt
--- fftw-3.2.2.orig/rdft/simd/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/rdft/simd/CMakeLists.txt	2010-10-13 01:12:52.184438200 +0200
@@ -0,0 +1,10 @@
+add_subdirectory(codelets)
+
+set(rdft_simd_SRCS hc2cbv.c hc2cfv.c)
+
+if(BUILD_ALL_STATIC)
+    add_library(rdft_simd STATIC ${rdft_simd_SRCS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(rdft_simd_SRCS)
+    set(_fftw_SRCS ${_fftw_SRCS} ${rdft_simd_SRCS} ${__fftw_SRCS} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
diff -Nru fftw-3.2.2.orig/rdft/simd/codelets/CMakeLists.txt fftw-3.2.2/rdft/simd/codelets/CMakeLists.txt
--- fftw-3.2.2.orig/rdft/simd/codelets/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/rdft/simd/codelets/CMakeLists.txt	2010-10-13 14:20:11.458370100 +0200
@@ -0,0 +1,61 @@
+# This Makefile.am specifies a set of codelets, efficient transforms
+# of small sizes, that are used as building blocks (kernels) by FFTW
+# to build up large transforms, as well as the options for generating
+# and compiling them.
+
+# You can customize FFTW for special needs, e.g. to handle certain
+# sizes more efficiently, by adding new codelets to the lists of those
+# included by default.  If you change the list of codelets, any new
+# ones you added will be automatically generated when you run the
+# bootstrap script (see "Generating your own code" in the FFTW
+# manual).
+
+###########################################################################
+
+set(HC2CFDFTV hc2cfdftv_2.c hc2cfdftv_4.c hc2cfdftv_6.c hc2cfdftv_8.c
+hc2cfdftv_10.c hc2cfdftv_12.c hc2cfdftv_16.c hc2cfdftv_32.c
+hc2cfdftv_20.c # hc2cfdftv_30.c
+)
+
+set(HC2CBDFTV hc2cbdftv_2.c hc2cbdftv_4.c hc2cbdftv_6.c hc2cbdftv_8.c
+hc2cbdftv_10.c hc2cbdftv_12.c hc2cbdftv_16.c hc2cbdftv_32.c
+hc2cbdftv_20.c # hc2cbdftv_30.c
+)
+
+###########################################################################
+set(SIMD_CODELETS ${HC2CFDFTV} ${HC2CBDFTV})
+
+if(HAVE_SIMD)
+    set(ALL_CODELETS ${SIMD_CODELETS})
+else(HAVE_SIMD)
+    set(ALL_CODELETS)
+endif(HAVE_SIMD)
+
+set(SOLVTAB_NAME "X(solvtab_rdft_simd)")
+set(CODLIST ${CMAKE_CURRENT_BINARY_DIR}/codlist.c)
+set(CODELET_NAME codelet_)
+
+set(rdft_simd_codelets_SRCS ${ALL_CODELETS})
+
+# special rules for regenerating codelets.
+include(${CMAKE_SOURCE_DIR}/support/codelets.cmake)
+
+write_codelet_list(${CODLIST} ${CODELET_NAME} ${SOLVTAB_NAME} ${ALL_CODELETS})
+
+if(BUILD_ALL_STATIC)
+    add_library(rdft_simd_codelets STATIC ${ALL_CODELETS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(rdft_simd_codelets_SRCS)
+    set(__fftw_SRCS ${__fftw_SRCS} ${rdft_simd_codelets_SRCS} ${CODLIST} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
+
+#if MAINTAINER_MODE
+#FLAGS_HC2C=-simd $(FLAGS_COMMON) -pipeline-latency 8 -trivial-stores -variables 32 -no-generate-bytw
+#
+#hc2cfdftv_%.c:  $(CODELET_DEPS) $(GEN_HC2CDFT_C)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_HC2CDFT_C) $(FLAGS_HC2C) -n $* -dit -name hc2cfdftv_$* -include "hc2cfv.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#hc2cbdftv_%.c:  $(CODELET_DEPS) $(GEN_HC2CDFT_C)
+#	($(PRELUDE_COMMANDS_RDFT); $(TWOVERS) $(GEN_HC2CDFT_C) $(FLAGS_HC2C) -n $* -dif -sign 1 -name hc2cbdftv_$* -include "hc2cbv.h") | $(ADD_DATE) | $(INDENT) >$@
+#
+#endif # MAINTAINER_MODE
diff -Nru fftw-3.2.2.orig/reodft/CMakeLists.txt fftw-3.2.2/reodft/CMakeLists.txt
--- fftw-3.2.2.orig/reodft/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/reodft/CMakeLists.txt	2010-10-13 01:35:38.847606800 +0200
@@ -0,0 +1,12 @@
+set(reodft_SRCS conf.c reodft010e-r2hc.c
+reodft11e-radix2.c reodft11e-r2hc-odd.c redft00e-r2hc-pad.c
+rodft00e-r2hc-pad.c reodft00e-splitradix.c
+# redft00e-r2hc.c rodft00e-r2hc.c reodft11e-r2hc.c
+)
+
+if(BUILD_ALL_STATIC)
+    add_library(reodft STATIC ${reodft_SRCS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(reodft_SRCS)
+    set(fftw_SRCS ${fftw_SRCS} ${reodft_SRCS} ${_fftw_SRCS} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
diff -Nru fftw-3.2.2.orig/simd/CMakeLists.txt fftw-3.2.2/simd/CMakeLists.txt
--- fftw-3.2.2.orig/simd/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/simd/CMakeLists.txt	2010-10-13 01:11:47.672748300 +0200
@@ -0,0 +1,10 @@
+set(simd_SRCS altivec.c sse.c sse2.c taint.c mips_ps.c)
+
+add_subdirectory(nonportable)
+
+if(BUILD_ALL_STATIC)
+    add_library(simd STATIC ${simd_SRCS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(simd_SRCS)
+    set(fftw_SRCS ${fftw_SRCS} ${simd_SRCS} ${_fftw_SRCS} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
diff -Nru fftw-3.2.2.orig/simd/nonportable/CMakeLists.txt fftw-3.2.2/simd/nonportable/CMakeLists.txt
--- fftw-3.2.2.orig/simd/nonportable/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/simd/nonportable/CMakeLists.txt	2010-10-13 01:11:55.042169800 +0200
@@ -0,0 +1,8 @@
+set(simd_nonportable_SRCS  sse.c sse2.c)
+
+if(BUILD_ALL_STATIC)
+    add_library(simd_nonportable STATIC ${simd_nonportable_SRCS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(simd_nonportable_SRCS)
+    set(_fftw_SRCS ${_fftw_SRCS} ${simd_nonportable_SRCS} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
diff -Nru fftw-3.2.2.orig/support/codelets.cmake fftw-3.2.2/support/codelets.cmake
--- fftw-3.2.2.orig/support/codelets.cmake	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/support/codelets.cmake	2010-10-12 23:41:52.770177500 +0200
@@ -0,0 +1,18 @@
+# generate file codlist.c
+
+macro(write_codelet_list CODLIST CODELET_NAME SOLVTAB_NAME)
+    file(RELATIVE_PATH filename ${CMAKE_BINARY_DIR} ${CODLIST})
+    message(STATUS "writing codelet list file ${filename}")
+    file(WRITE ${CODLIST} "#include \"ifftw.h\"\n\n")
+    foreach(codelet ${ARGN})
+        string(REGEX REPLACE "([A-Za-z0-9_]*)\\.c" "\\1" codeletbase "${codelet}")
+        file(APPEND ${CODLIST} "extern void X(${CODELET_NAME}${codeletbase})(planner *);\n")
+    endforeach(codelet ${ARGN})
+    file(APPEND ${CODLIST} "\n\nextern const solvtab ${SOLVTAB_NAME};\n")
+    file(APPEND ${CODLIST} "const solvtab ${SOLVTAB_NAME} = {\n")
+    foreach(codelet ${ARGN})
+        string(REGEX REPLACE "([A-Za-z0-9_]*)\\.c" "\\1" codeletbase "${codelet}")
+        file(APPEND ${CODLIST} "    SOLVTAB(X(${CODELET_NAME}${codeletbase})),\n")
+    endforeach(codelet ${ARGN})
+    file(APPEND ${CODLIST} "    SOLVTAB_END\n};\n")
+endmacro(write_codelet_list CODLIST CODELET_NAME SOLVTAB_NAME)
\ Kein Zeilenumbruch am Dateiende.
diff -Nru fftw-3.2.2.orig/tests/CMakeLists.txt fftw-3.2.2/tests/CMakeLists.txt
--- fftw-3.2.2.orig/tests/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/tests/CMakeLists.txt	2010-10-13 16:10:46.404867300 +0200
@@ -0,0 +1,71 @@
+#noinst_PROGRAMS = bench
+#EXTRA_DIST = check.pl README
+
+#if SMP
+#if !COMBINED_THREADS
+#LIBFFTWTHREADS = $(top_builddir)/threads/libfftw3@PREC_SUFFIX@_threads.la
+#endif
+#else
+#LIBFFTWTHREADS = 
+#endif
+
+set(bench_SRCS bench.c hook.c fftw-bench.c)
+add_executable(bench ${bench_SRCS})
+target_link_libraries(bench fftw bench2 fftw)
+
+#check-local: bench$(EXEEXT)
+#	perl -w $(srcdir)/check.pl -r -c=30 -v `pwd`/bench
+#	@echo "--------------------------------------------------------------"
+#	@echo "         FFTW transforms passed basic tests!"
+#	@echo "--------------------------------------------------------------"
+#if SMP
+#	perl -w $(srcdir)/check.pl -r -c=30 -v --nthreads=2 `pwd`/bench
+#	@echo "--------------------------------------------------------------"
+#	@echo "         FFTW threaded transforms passed basic tests!"
+#	@echo "--------------------------------------------------------------"
+#endif
+#
+#bigcheck: bench$(EXEEXT)
+#	perl -w $(srcdir)/check.pl -a -v `pwd`/bench
+#	@echo "--------------------------------------------------------------"
+#	@echo "         FFTW transforms passed big tests!"
+#	@echo "--------------------------------------------------------------"
+#if SMP
+#	perl -w $(srcdir)/check.pl -a -v --nthreads=2 `pwd`/bench
+#	perl -w $(srcdir)/check.pl -a -v --nthreads=3 `pwd`/bench
+#	perl -w $(srcdir)/check.pl -a -v --nthreads=10 `pwd`/bench
+#	@echo "--------------------------------------------------------------"
+#	@echo "         FFTW threaded transforms passed big tests!"
+#	@echo "--------------------------------------------------------------"
+#endif
+#
+#smallcheck: bench$(EXEEXT)
+#	perl -w $(srcdir)/check.pl -r -c=1 -v `pwd`/bench
+#	perl -w $(srcdir)/check.pl -r --estimate -c=5 -v `pwd`/bench
+#	@echo "--------------------------------------------------------------"
+#	@echo "         FFTW transforms passed a few tests!"
+#	@echo "--------------------------------------------------------------"
+#if SMP
+#	perl -w $(srcdir)/check.pl -r --estimate -c=2 -v --nthreads=2 `pwd`/bench
+#	@echo "--------------------------------------------------------------"
+#	@echo "         FFTW threaded transforms passed a few tests!"
+#	@echo "--------------------------------------------------------------"
+#endif
+#
+#paranoid-check: bench$(EXEEXT)
+#if SMP
+#	perl -w $(srcdir)/check.pl -a --patient --nthreads=10 --paranoid `pwd`/bench
+#	perl -w $(srcdir)/check.pl -a --patient --nthreads=7 --paranoid `pwd`/bench
+#	perl -w $(srcdir)/check.pl -a --patient --nthreads=3 --paranoid `pwd`/bench
+#	perl -w $(srcdir)/check.pl -a --patient --nthreads=2 --paranoid `pwd`/bench
+#endif
+#	perl -w $(srcdir)/check.pl -a --patient --paranoid `pwd`/bench
+#
+#exhaustive-check: bench$(EXEEXT)
+#if SMP
+#	perl -w $(srcdir)/check.pl -a --exhaustive --nthreads=10 --paranoid `pwd`/bench
+#	perl -w $(srcdir)/check.pl -a --exhaustive --nthreads=7 --paranoid `pwd`/bench
+#	perl -w $(srcdir)/check.pl -a --exhaustive --nthreads=3 --paranoid `pwd`/bench
+#	perl -w $(srcdir)/check.pl -a --exhaustive --nthreads=2 --paranoid `pwd`/bench
+#endif
+#	perl -w $(srcdir)/check.pl -a --exhaustive --paranoid `pwd`/bench
diff -Nru fftw-3.2.2.orig/threads/api.c fftw-3.2.2/threads/api.c
--- fftw-3.2.2.orig/threads/api.c	2009-07-12 12:35:49.000000000 +0200
+++ fftw-3.2.2/threads/api.c	2010-10-13 02:57:10.297381700 +0200
@@ -56,7 +56,6 @@
      return 1;
 }
 
-
 void X(cleanup_threads)(void)
 {
      X(cleanup)();
diff -Nru fftw-3.2.2.orig/threads/CMakeLists.txt fftw-3.2.2/threads/CMakeLists.txt
--- fftw-3.2.2.orig/threads/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ fftw-3.2.2/threads/CMakeLists.txt	2010-10-13 02:54:52.116478200 +0200
@@ -0,0 +1,9 @@
+set(threads_SRCS api.c conf.c threads.c openmp.c dft-vrank-geq1.c ct.c rdft-vrank-geq1.c hc2hc.c vrank-geq1-rdft2.c f77api.c
+)
+
+if(BUILD_ALL_STATIC)
+    add_library(threads STATIC ${threads_SRCS})
+else(BUILD_ALL_STATIC)
+    prepend_prefix(threads_SRCS)
+    set(fftw_SRCS ${fftw_SRCS} ${threads_SRCS} PARENT_SCOPE)
+endif(BUILD_ALL_STATIC)
\ Kein Zeilenumbruch am Dateiende.
