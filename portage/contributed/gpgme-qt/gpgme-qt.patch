diff -N -r -u gpgme-qt-orig/cmake/modules/FindGpgme.cmake gpgme-qt/cmake/modules/FindGpgme.cmake
--- gpgme-qt-orig/cmake/modules/FindGpgme.cmake	1970-01-01 01:00:00.000000000 +0100
+++ gpgme-qt/cmake/modules/FindGpgme.cmake	2008-01-21 22:49:20.094826500 +0100
@@ -0,0 +1,384 @@
+# - Try to find the gpgme library
+#
+# Algorithm:
+#  - Windows:
+#    On Windows, there's three gpgme variants: gpgme{,-glib,-qt}.
+#    - The variant used determines the event loop integration possible:
+#      - gpgme:      no event loop integration possible, only synchronous operations supported
+#      - gpgme-glib: glib event loop integration possible, only asynchronous operations supported
+#      - gpgme-qt:   qt event loop integration possible, only asynchronous operations supported
+#    - GPGME_{VANILLA,GLIB,QT}_{FOUND,LIBRARIES} will be set for each of the above
+#    - GPGME_INCLUDES is the same for all of the above
+#    - GPGME_FOUND is set if any of the above was found
+#  - *nix:
+#    There's also three variants: gpgme{,-pthread,-pth}.
+#    - The variant used determines the multithreaded use possible:
+#      - gpgme:         no multithreading support available
+#      - gpgme-pthread: multithreading available using POSIX threads
+#      - gpgme-pth:     multithreading available using GNU PTH (cooperative multithreading)
+#    - GPGME_{VANILLA,PTH,PTHREAD}_{FOUND,LIBRARIES} will be set for each of the above
+#    - GPGME_INCLUDES is the same for all of the above
+#    - GPGME_FOUND is set if any of the above was found
+#
+
+#
+# THIS IS ALMOST A 1:1 COPY OF FindAssuan.cmake in kdepim.
+# Any changes here likely apply there, too.
+#
+
+# do away with crappy condition repetition on else/endfoo
+set( CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS_gpgme_saved ${CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS} )
+set( CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true )
+
+#if this is built-in, please replace, if it isn't, export into a MacroToBool.cmake of it's own
+macro( macro_bool_to_bool FOUND_VAR )
+  foreach( _current_VAR ${ARGN} )
+    if ( ${FOUND_VAR} )
+      set( ${_current_VAR} TRUE )
+    else()
+      set( ${_current_VAR} FALSE )
+    endif()
+  endforeach()
+endmacro()
+
+include (MacroEnsureVersion)
+include (MacroBoolTo01)
+include (MacroLogFeature)
+
+
+if ( WIN32 )
+
+  # On Windows, we don't have a gpgme-config script, so we need to
+  # look for the stuff ourselves:
+
+  # in cmake, AND and OR have the same precedence, there's no
+  # subexpressions, and expressions are evaluated short-circuit'ed
+  # IOW: CMake if() suxx.
+  set( _seem_to_have_cached_gpgme false )
+  if ( GPGME_INCLUDES )
+    if ( GPGME_VANILLA_LIBRARIES OR GPGME_QT_LIBRARIES OR GPGME_GLIB_LIBRARIES )
+      set( _seem_to_have_cached_gpgme true )
+    endif()
+  endif()
+
+  if ( _seem_to_have_cached_gpgme )
+
+    macro_bool_to_bool( GPGME_VANILLA_LIBRARIES  GPGME_VANILLA_FOUND )
+    macro_bool_to_bool( GPGME_GLIB_LIBRARIES     GPGME_GLIB_FOUND    )
+    macro_bool_to_bool( GPGME_QT_LIBRARIES       GPGME_QT_FOUND      )
+    # this would have been preferred:
+    #set( GPGME_*_FOUND macro_bool_to_bool(GPGME_*_LIBRARIES) )
+
+    if ( GPGME_VANILLA_FOUND OR GPGME_GLIB_FOUND OR GPGME_QT_FOUND )
+      set( GPGME_FOUND true )
+    else()
+      set( GPGME_FOUND false )
+    endif()
+
+  else()
+
+    # is this needed, of just unreflected cut'n'paste?
+    # this isn't a KDE library, after all!
+#    if( NOT KDEWIN_FOUND )
+#      find_package( KDEWIN REQUIRED )
+#    endif()
+
+    set( GPGME_FOUND         false )
+    set( GPGME_VANILLA_FOUND false )
+    set( GPGME_GLIB_FOUND    false )
+    set( GPGME_QT_FOUND      false )
+
+    find_path( GPGME_INCLUDES gpgme.h
+      ${CMAKE_INCLUDE_PATH}
+      ${CMAKE_INSTALL_PREFIX}/include
+    )
+
+    find_library( _gpgme_vanilla_library NAMES gpgme libgpgme gpgme-11 libgpgme-11
+      PATHS 
+        ${CMAKE_LIBRARY_PATH}
+        ${CMAKE_INSTALL_PREFIX}/lib
+    )
+
+    find_library( _gpgme_glib_library    NAMES gpgme-glib libgpgme-glib gpgme-glib-11 libgpgme-glib-11
+      PATHS 
+        ${CMAKE_LIBRARY_PATH}
+        ${CMAKE_INSTALL_PREFIX}/lib
+    )
+
+    find_library( _gpgme_qt_library      NAMES gpgme-qt libgpgme-qt gpgme-qt-11 libgpgme-qt-11
+      PATHS 
+        ${CMAKE_LIBRARY_PATH}
+        ${CMAKE_INSTALL_PREFIX}/lib
+    )
+
+    find_library( _gpg_error_library     NAMES gpg-error libgpg-error gpg-error-0 libgpg-error-0
+      PATHS 
+        ${CMAKE_LIBRARY_PATH}
+        ${CMAKE_INSTALL_PREFIX}/lib
+    )
+
+    set( GPGME_INCLUDES ${GPGME_INCLUDES} CACHE INTERNAL "The gpgme include paths" )
+
+    if ( _gpgme_vanilla_library AND _gpg_error_library )
+      set( GPGME_VANILLA_LIBRARIES ${_gpgme_vanilla_library} ${_gpg_error_library} CACHE INTERNAL "The gpgme (vanilla) libraries" )
+      set( GPGME_VANILLA_FOUND     true )
+      set( GPGME_FOUND             true )
+    endif()
+
+    if ( _gpgme_glib_library AND _gpg_error_library )
+      set( GPGME_GLIB_LIBRARIES    ${_gpgme_glib_library}    ${_gpg_error_library} CACHE INTERNAL "The gpgme-glib libraries" )
+      set( GPGME_GLIB_FOUND        true )
+      set( GPGME_FOUND             true )
+    endif()
+
+    if ( _gpgme_qt_library AND _gpg_error_library )
+      set( GPGME_QT_LIBRARIES      ${_gpgme_qt_library}      ${_gpg_error_library} CACHE INTERNAL "The gpgme-qt libraries" )
+      set( GPGME_QT_FOUND          true )
+      set( GPGME_FOUND             true )
+    endif()
+
+  endif()
+
+  # these are Unix-only:
+  set( GPGME_PTHREAD_FOUND false )
+  set( GPGME_PTH_FOUND     false )
+  set( HAVE_GPGME_PTHREAD  0     )
+  set( HAVE_GPGME_PTH      0     )
+
+  macro_bool_to_01( GPGME_FOUND         HAVE_GPGME         )
+  macro_bool_to_01( GPGME_VANILLA_FOUND HAVE_GPGME_VANILLA )
+  macro_bool_to_01( GPGME_GLIB_FOUND    HAVE_GPGME_GLIB    )
+  macro_bool_to_01( GPGME_QT_FOUND      HAVE_GPGME_QT      )
+
+else() # not WIN32
+
+  # On *nix, we have the gpgme-config script which can tell us all we
+  # need to know:
+
+  # see WIN32 case for an explanation of what this does:
+  set( _seem_to_have_cached_gpgme false )
+  if ( GPGME_INCLUDES )
+    if ( GPGME_VANILLA_LIBRARIES OR GPGME_PTHREAD_LIBRARIES OR GPGME_PTH_LIBRARIES )
+      set( _seem_to_have_cached_gpgme true )
+    endif()
+  endif()
+
+  if ( _seem_to_have_cached_gpgme )
+
+    macro_bool_to_bool( GPGME_VANILLA_LIBRARIES GPGME_VANILLA_FOUND )
+    macro_bool_to_bool( GPGME_PTHREAD_LIBRARIES GPGME_PTHREAD_FOUND )
+    macro_bool_to_bool( GPGME_PTH_LIBRARIES     GPGME_PTH_FOUND     )
+
+    if ( GPGME_VANILLA_FOUND OR GPGME_PTHREAD_FOUND OR GPGME_PTH_FOUND )
+      set( GPGME_FOUND true )
+    else()
+      set( GPGME_FOUND false )
+    endif()
+
+  else()
+
+    set( GPGME_FOUND         false )
+    set( GPGME_VANILLA_FOUND false )
+    set( GPGME_PTHREAD_FOUND false )
+    set( GPGME_PTH_FOUND     false )
+
+    find_program( _GPGMECONFIG_EXECUTABLE NAMES gpgme-config )
+
+    # if gpgme-config has been found
+    if ( _GPGMECONFIG_EXECUTABLE )
+
+      message( STATUS "Found gpgme-config at ${_GPGMECONFIG_EXECUTABLE}" )
+
+      exec_program( ${_GPGMECONFIG_EXECUTABLE} ARGS --version OUTPUT_VARIABLE GPGME_VERSION )
+
+      set( _GPGME_MIN_VERSION "1.0.0" )
+      macro_ensure_version( ${_GPGME_MIN_VERSION} ${GPGME_VERSION} _GPGME_INSTALLED_VERSION_OK )
+
+      if ( NOT _GPGME_INSTALLED_VERSION_OK )
+
+        message( STATUS "The installed version of gpgme is too old: ${GPGME_VERSION} (required: >= ${_GPGME_MIN_VERSION})" )
+
+      else()
+
+        message( STATUS "Found gpgme v${GPGME_VERSION}, checking for flavours..." )
+
+        exec_program( ${_GPGMECONFIG_EXECUTABLE} ARGS                  --libs OUTPUT_VARIABLE _gpgme_config_vanilla_libs RETURN_VALUE _ret )
+	if ( _ret )
+	  set( _gpgme_config_vanilla_libs )
+	endif()
+
+        exec_program( ${_GPGMECONFIG_EXECUTABLE} ARGS --thread=pthread --libs OUTPUT_VARIABLE _gpgme_config_pthread_libs RETURN_VALUE _ret )
+	if ( _ret )
+	  set( _gpgme_config_pthread_libs )
+	endif()
+
+        exec_program( ${_GPGMECONFIG_EXECUTABLE} ARGS --thread=pth     --libs OUTPUT_VARIABLE _gpgme_config_pth_libs     RETURN_VALUE _ret )
+	if ( _ret )
+	  set( _gpgme_config_pth_libs )
+	endif()
+
+        # append -lgpg-error to the list of libraries, if necessary
+        foreach ( _flavour vanilla pthread pth )
+          if ( _gpgme_config_${_flavour}_libs AND NOT _gpgme_config_${_flavour}_libs MATCHES "lgpg-error" )
+            set( _gpgme_config_${_flavour}_libs "${_gpgme_config_${_flavour}_libs} -lgpg-error" )
+          endif()
+        endforeach()
+
+        if ( _gpgme_config_vanilla_libs OR _gpgme_config_pthread_libs OR _gpgme_config_pth_libs )
+
+          exec_program( ${_GPGMECONFIG_EXECUTABLE} ARGS --cflags OUTPUT_VARIABLE _GPGME_CFLAGS )
+
+          if ( _GPGME_CFLAGS )
+            string( REGEX REPLACE "(\r?\n)+$" " " _GPGME_CFLAGS  "${_GPGME_CFLAGS}" )
+            string( REGEX REPLACE " *-I"      ";" GPGME_INCLUDES "${_GPGME_CFLAGS}" )
+          endif()
+
+          foreach ( _flavour vanilla pthread pth )
+            if ( _gpgme_config_${_flavour}_libs )
+
+              set( _gpgme_library_dirs )
+              set( _gpgme_library_names )
+              string( TOUPPER "${_flavour}" _FLAVOUR )
+
+              string( REGEX REPLACE " +" ";" _gpgme_config_${_flavour}_libs "${_gpgme_config_${_flavour}_libs}" )
+
+              foreach( _flag ${_gpgme_config_${_flavour}_libs} )
+                if ( "${_flag}" MATCHES "^-L" )
+                  string( REGEX REPLACE "^-L" "" _dir "${_flag}" )
+                  file( TO_CMAKE_PATH "${_dir}" _dir )
+                  set( _gpgme_library_dirs ${_gpgme_library_dirs} "${_dir}" )
+                elseif( "${_flag}" MATCHES "^-l" )
+                  string( REGEX REPLACE "^-l" "" _name "${_flag}" )
+                  set( _gpgme_library_names ${_gpgme_library_names} "${_name}" )
+                endif()
+              endforeach()
+
+              set( GPGME_${_FLAVOUR}_FOUND true )
+
+              foreach( _name ${_gpgme_library_names} )
+                set( _gpgme_${_name}_lib )
+
+                # if -L options were given, look only there
+                if ( _gpgme_library_dirs )
+                  find_library( _gpgme_${_name}_lib NAMES ${_name} PATHS ${_gpgme_library_dirs} NO_DEFAULT_PATH )
+                endif()
+
+                # if not found there, look in system directories
+                if ( NOT _gpgme_${_name}_lib )
+                  find_library( _gpgme_${_name}_lib NAMES ${_name} )
+                endif()
+
+                # if still not found, then the whole flavour isn't found
+                if ( NOT _gpgme_${_name}_lib )
+                  if ( GPGME_${_FLAVOUR}_FOUND )
+                    set( GPGME_${_FLAVOUR}_FOUND false )
+                    set( _not_found_reason "dependant library ${_name} wasn't found" )
+                  endif()
+                endif()
+
+                set( GPGME_${_FLAVOUR}_LIBRARIES ${GPGME_${_FLAVOUR}_LIBRARIES} "${_gpgme_${_name}_lib}" )
+              endforeach()
+
+              #check_c_library_exists_explicit( gpgme         gpgme_check_version "${_GPGME_CFLAGS}" "${GPGME_LIBRARIES}"         GPGME_FOUND         )
+              if ( GPGME_${_FLAVOUR}_FOUND )
+                message( STATUS " Found flavour '${_flavour}', checking whether it's usable...yes" )
+              else()
+                message( STATUS " Found flavour '${_flavour}', checking whether it's usable...no" )
+                message( STATUS "  (${_not_found_reason})" )
+              endif()
+            endif()
+
+          endforeach( _flavour )
+
+          # ensure that they are cached
+          set( GPGME_INCLUDES          ${GPGME_INCLUDES}          CACHE INTERNAL "The gpgme include paths" )
+          set( GPGME_VANILLA_LIBRARIES ${GPGME_VANILLA_LIBRARIES} CACHE INTERNAL "The gpgme (vanilla) libraries" )
+          set( GPGME_PTHREAD_LIBRARIES ${GPGME_PTHREAD_LIBRARIES} CACHE INTERNAL "The gpgme-pthread libraries" )
+          set( GPGME_PTH_LIBRARIES     ${GPGME_PTH_LIBRARIES}     CACHE INTERNAL "The gpgme-pth libraries" )
+
+          if ( GPGME_VANILLA_FOUND OR GPGME_PTHREAD_FOUND OR GPGME_PTH_FOUND )
+            set( GPGME_FOUND true )
+          else()
+            set( GPGME_FOUND false )
+          endif()
+
+        endif()
+
+      endif()
+
+    endif()
+
+  endif()
+
+  # these are Windows-only:
+  set( GPGME_GLIB_FOUND false )
+  set( GPGME_QT_FOUND   false )
+  set( HAVE_GPGME_GLIB  0     )
+  set( HAVE_GPGME_QT    0     )
+
+  macro_bool_to_01( GPGME_FOUND         HAVE_GPGME         )
+  macro_bool_to_01( GPGME_VANILLA_FOUND HAVE_GPGME_VANILLA )
+  macro_bool_to_01( GPGME_PTHREAD_FOUND HAVE_GPGME_PTHREAD )
+  macro_bool_to_01( GPGME_PTH_FOUND     HAVE_GPGME_PTH     )
+
+endif() # WIN32 | Unix
+
+
+set( _gpgme_flavours "" )
+
+if ( GPGME_VANILLA_FOUND )
+  set( _gpgme_flavours "${_gpgme_flavours} vanilla" )
+endif()
+
+if ( GPGME_GLIB_FOUND )
+  set( _gpgme_flavours "${_gpgme_flavours} Glib" )
+endif()
+
+if ( GPGME_QT_FOUND )
+  set( _gpgme_flavours "${_gpgme_flavours} Qt" )
+endif()
+
+if ( GPGME_PTHREAD_FOUND )
+  set( _gpgme_flavours "${_gpgme_flavours} pthread" )
+endif()
+
+if ( GPGME_PTH_FOUND )
+  set( _gpgme_flavours "${_gpgme_flavours} pth" )
+endif()
+
+
+if ( NOT Gpgme_FIND_QUIETLY )
+
+  if ( GPGME_FOUND )
+    message( STATUS "Usable gpgme flavours found: ${_gpgme_flavours}" )
+  else()
+    message( STATUS "No usable gpgme flavours found." )
+  endif()
+
+  macro_bool_to_bool( Gpgme_FIND_REQUIRED _req )
+
+  if ( WIN32 )
+    set( _gpgme_homepage "http://www.gpg4win.org" )
+  else()
+    set( _gpgme_homepage "http://www.gnupg.org/related_software/gpgme" )
+  endif()
+
+  macro_log_feature(
+    GPGME_FOUND
+    "gpgme"
+    "GnuPG Made Easy Development Libraries"
+    ${_gpgme_homepage}
+    ${_req}
+    "${_GPGME_MIN_VERSION} or greater"
+    "Needed to provide GNU Privacy Guard support in KDE PIM applications. Necessary to compile many PIM application, including KMail."
+  )
+
+else()
+
+  if ( Gpgme_FIND_REQUIRED AND NOT GPGME_FOUND )
+    message( FATAL_ERROR "" )
+  endif()
+
+endif()
+
+set( CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS_gpgme_saved )
diff -N -r -u gpgme-qt-orig/cmake/modules/MacroBoolTo01.cmake gpgme-qt/cmake/modules/MacroBoolTo01.cmake
--- gpgme-qt-orig/cmake/modules/MacroBoolTo01.cmake	1970-01-01 01:00:00.000000000 +0100
+++ gpgme-qt/cmake/modules/MacroBoolTo01.cmake	2008-01-21 22:49:20.110451500 +0100
@@ -0,0 +1,20 @@
+# MACRO_BOOL_TO_01( VAR RESULT0 ... RESULTN )
+# This macro evaluates its first argument
+# and sets all the given vaiables either to 0 or 1
+# depending on the value of the first one
+
+# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+
+MACRO(MACRO_BOOL_TO_01 FOUND_VAR )
+   FOREACH (_current_VAR ${ARGN})
+      IF(${FOUND_VAR})
+         SET(${_current_VAR} 1)
+      ELSE(${FOUND_VAR})
+         SET(${_current_VAR} 0)
+      ENDIF(${FOUND_VAR})
+   ENDFOREACH(_current_VAR)
+ENDMACRO(MACRO_BOOL_TO_01)
diff -N -r -u gpgme-qt-orig/cmake/modules/MacroEnsureVersion.cmake gpgme-qt/cmake/modules/MacroEnsureVersion.cmake
--- gpgme-qt-orig/cmake/modules/MacroEnsureVersion.cmake	1970-01-01 01:00:00.000000000 +0100
+++ gpgme-qt/cmake/modules/MacroEnsureVersion.cmake	2008-01-21 22:49:20.110451500 +0100
@@ -0,0 +1,117 @@
+# This file defines the following macros for developers to use in ensuring
+# that installed software is of the right version:
+#
+# MACRO_ENSURE_VERSION        - test that a version number is greater than
+#                               or equal to some minimum
+# MACRO_ENSURE_VERSION_RANGE - test that a version number is greater than
+#                               or equal to some minimum and less than some
+#                               maximum
+# MACRO_ENSURE_VERSION2       - deprecated, do not use in new code
+#
+
+# MACRO_ENSURE_VERSION
+# This macro compares version numbers of the form "x.y.z" or "x.y"
+# MACRO_ENSURE_VERSION( FOO_MIN_VERSION FOO_VERSION_FOUND FOO_VERSION_OK)
+# will set FOO_VERSION_OK to true if FOO_VERSION_FOUND >= FOO_MIN_VERSION
+# Leading and trailing text is ok, e.g.
+# MACRO_ENSURE_VERSION( "2.5.31" "flex 2.5.4a" VERSION_OK)
+# which means 2.5.31 is required and "flex 2.5.4a" is what was found on the system
+
+# Copyright (c) 2006, David Faure, <faure@kde.org>
+# Copyright (c) 2007, Will Stephenson <wstephenson@kde.org>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+# MACRO_ENSURE_VERSION_RANGE
+# This macro ensures that a version number of the form
+# "x.y.z" or "x.y" falls within a range defined by
+# min_version <= found_version < max_version.
+# If this expression holds, FOO_VERSION_OK will be set TRUE
+#
+# Example: MACRO_ENSURE_VERSION_RANGE3( "0.1.0" ${FOOCODE_VERSION} "0.7.0" FOO_VERSION_OK )
+#
+# This macro will break silently if any of x,y,z are greater than 100.
+#
+# Copyright (c) 2007, Will Stephenson <wstephenson@kde.org>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+# NORMALIZE_VERSION
+# Helper macro to convert version numbers of the form "x.y.z"
+# to an integer equal to 10^4 * x + 10^2 * y + z
+#
+# This macro will break silently if any of x,y,z are greater than 100.
+#
+# Copyright (c) 2006, David Faure, <faure@kde.org>
+# Copyright (c) 2007, Will Stephenson <wstephenson@kde.org>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+# CHECK_RANGE_INCLUSIVE_LOWER
+# Helper macro to check whether x <= y < z
+#
+# Copyright (c) 2007, Will Stephenson <wstephenson@kde.org>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+
+MACRO(NORMALIZE_VERSION _requested_version _normalized_version)
+    STRING(REGEX MATCH "[^0-9]*[0-9]+\\.[0-9]+\\.[0-9]+.*" _threePartMatch "${_requested_version}")
+    if (_threePartMatch)
+    # parse the parts of the version string
+        STRING(REGEX REPLACE "[^0-9]*([0-9]+)\\.[0-9]+\\.[0-9]+.*" "\\1" _major_vers "${_requested_version}")
+        STRING(REGEX REPLACE "[^0-9]*[0-9]+\\.([0-9]+)\\.[0-9]+.*" "\\1" _minor_vers "${_requested_version}")
+        STRING(REGEX REPLACE "[^0-9]*[0-9]+\\.[0-9]+\\.([0-9]+).*" "\\1" _patch_vers "${_requested_version}")
+    else (_threePartMatch)
+        STRING(REGEX REPLACE "([0-9]+)\\.[0-9]+" "\\1" _major_vers "${_requested_version}")
+        STRING(REGEX REPLACE "[0-9]+\\.([0-9]+)" "\\1" _minor_vers "${_requested_version}")
+        set(_patch_vers "0")
+    endif (_threePartMatch)
+
+    # compute an overall version number which can be compared at once
+    MATH(EXPR ${_normalized_version} "${_major_vers}*10000 + ${_minor_vers}*100 + ${_patch_vers}")
+ENDMACRO(NORMALIZE_VERSION)
+
+MACRO(MACRO_CHECK_RANGE_INCLUSIVE_LOWER _lower_limit _value _upper_limit _ok)
+   if (${_value} LESS ${_lower_limit})
+      set( ${_ok} FALSE )
+  elseif (${_value} EQUAL ${_lower_limit})
+      set( ${_ok} TRUE )
+  elseif (${_value} EQUAL ${_upper_limit})
+      set( ${_ok} FALSE )
+  elseif (${_value} GREATER ${_upper_limit})
+      set( ${_ok} FALSE )
+  else (${_value} LESS ${_lower_limit})
+      set( ${_ok} TRUE )
+  endif (${_value} LESS ${_lower_limit})
+ENDMACRO(MACRO_CHECK_RANGE_INCLUSIVE_LOWER)
+
+MACRO(MACRO_ENSURE_VERSION requested_version found_version var_too_old)
+    NORMALIZE_VERSION( ${requested_version} req_vers_num )
+    NORMALIZE_VERSION( ${found_version} found_vers_num )
+
+    if (found_vers_num LESS req_vers_num)
+        set( ${var_too_old} FALSE )
+    else (found_vers_num LESS req_vers_num)
+        set( ${var_too_old} TRUE )
+    endif (found_vers_num LESS req_vers_num)
+
+ENDMACRO(MACRO_ENSURE_VERSION)
+
+MACRO(MACRO_ENSURE_VERSION2 requested_version2 found_version2 var_too_old2)
+    MACRO_ENSURE_VERSION( ${requested_version2} ${found_version2} ${var_too_old2})
+ENDMACRO(MACRO_ENSURE_VERSION2)
+
+MACRO(MACRO_ENSURE_VERSION_RANGE min_version found_version max_version var_ok)
+    NORMALIZE_VERSION( ${min_version} req_vers_num )
+    NORMALIZE_VERSION( ${found_version} found_vers_num )
+    NORMALIZE_VERSION( ${max_version} max_vers_num )
+
+    MACRO_CHECK_RANGE_INCLUSIVE_LOWER( ${req_vers_num} ${found_vers_num} ${max_vers_num} ${var_ok})
+ENDMACRO(MACRO_ENSURE_VERSION_RANGE)
+
+
diff -N -r -u gpgme-qt-orig/cmake/modules/MacroLogFeature.cmake gpgme-qt/cmake/modules/MacroLogFeature.cmake
--- gpgme-qt-orig/cmake/modules/MacroLogFeature.cmake	1970-01-01 01:00:00.000000000 +0100
+++ gpgme-qt/cmake/modules/MacroLogFeature.cmake	2008-01-21 22:49:20.110451500 +0100
@@ -0,0 +1,125 @@
+# This file defines the Feature Logging macros.
+#
+# MACRO_LOG_FEATURE(VAR FEATURE DESCRIPTION URL [REQUIRED [MIN_VERSION [COMMENTS]]])
+#   Logs the information so that it can be displayed at the end
+#   of the configure run
+#   VAR : TRUE or FALSE, indicating whether the feature is supported
+#   FEATURE: name of the feature, e.g. "libjpeg"
+#   DESCRIPTION: description what this feature provides
+#   URL: home page
+#   REQUIRED: TRUE or FALSE, indicating whether the featue is required
+#   MIN_VERSION: minimum version number. empty string if unneeded
+#   COMMENTS: More info you may want to provide.  empty string if unnecessary
+#
+# MACRO_DISPLAY_FEATURE_LOG()
+#   Call this to display the collected results.
+#   Exits CMake with a FATAL error message if a required feature is missing
+#
+# Example:
+#
+# INCLUDE(MacroLogFeature)
+#
+# FIND_PACKAGE(JPEG)
+# MACRO_LOG_FEATURE(JPEG_FOUND "libjpeg" "Support JPEG images" "http://www.ijg.org" TRUE "3.2a" "")
+# ...
+# MACRO_DISPLAY_FEATURE_LOG()
+
+# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>
+# Copyright (c) 2006, Allen Winter, <winter@kde.org>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+IF (NOT _macroLogFeatureAlreadyIncluded)
+   SET(_file ${CMAKE_BINARY_DIR}/MissingRequirements.txt)
+   IF (EXISTS ${_file})
+      FILE(REMOVE ${_file})
+   ENDIF (EXISTS ${_file})
+
+   SET(_file ${CMAKE_BINARY_DIR}/EnabledFeatures.txt)
+   IF (EXISTS ${_file})
+      FILE(REMOVE ${_file})
+   ENDIF (EXISTS ${_file})
+
+   SET(_file ${CMAKE_BINARY_DIR}/DisabledFeatures.txt)
+   IF (EXISTS ${_file})
+      FILE(REMOVE ${_file})
+  ENDIF (EXISTS ${_file})
+
+  SET(_macroLogFeatureAlreadyIncluded TRUE)
+ENDIF (NOT _macroLogFeatureAlreadyIncluded)
+
+
+MACRO(MACRO_LOG_FEATURE _var _package _description _url ) # _required _minvers _comments)
+
+   SET(_required "${ARGV4}")
+   SET(_minvers "${ARGV5}")
+   SET(_comments "${ARGV6}")
+
+   IF (${_var})
+     SET(_LOGFILENAME ${CMAKE_BINARY_DIR}/EnabledFeatures.txt)
+   ELSE (${_var})
+     IF (${_required} MATCHES "[Tt][Rr][Uu][Ee]")
+       SET(_LOGFILENAME ${CMAKE_BINARY_DIR}/MissingRequirements.txt)
+     ELSE (${_required} MATCHES "[Tt][Rr][Uu][Ee]")
+       SET(_LOGFILENAME ${CMAKE_BINARY_DIR}/DisabledFeatures.txt)
+     ENDIF (${_required} MATCHES "[Tt][Rr][Uu][Ee]")
+   ENDIF (${_var})
+
+   SET(_logtext "+ ${_package}")
+
+   IF (NOT ${_var})
+      IF (${_minvers} MATCHES ".*")
+        SET(_logtext "${_logtext}, ${_minvers}")
+      ENDIF (${_minvers} MATCHES ".*")
+      SET(_logtext "${_logtext}: ${_description} <${_url}>")
+      IF (${_comments} MATCHES ".*")
+        SET(_logtext "${_logtext}\n${_comments}")
+      ENDIF (${_comments} MATCHES ".*")
+#      SET(_logtext "${_logtext}\n") #double-space missing features?
+   ENDIF (NOT ${_var})
+   FILE(APPEND "${_LOGFILENAME}" "${_logtext}\n")
+ 
+ENDMACRO(MACRO_LOG_FEATURE)
+
+
+MACRO(MACRO_DISPLAY_FEATURE_LOG)
+
+   SET(_file ${CMAKE_BINARY_DIR}/MissingRequirements.txt)
+   IF (EXISTS ${_file})
+      FILE(READ ${_file} _requirements)
+      MESSAGE(STATUS "\n-----------------------------------------------------------------------------\n-- The following REQUIRED packages could NOT be located on your system.\n-- Please install them before continuing this software installation.\n-----------------------------------------------------------------------------\n${_requirements}-----------------------------------------------------------------------------")
+      FILE(REMOVE ${_file})
+      MESSAGE(FATAL_ERROR "Exiting: Missing Requirements")
+   ENDIF (EXISTS ${_file})
+
+   SET(_summary "\n")
+
+   SET(_elist 0)
+   SET(_file ${CMAKE_BINARY_DIR}/EnabledFeatures.txt)
+   IF (EXISTS ${_file})
+      SET(_elist 1)
+      FILE(READ ${_file} _enabled)
+      FILE(REMOVE ${_file})
+      SET(_summary "${_summary}-----------------------------------------------------------------------------\n-- The following external packages were located on your system.\n-- This installation will have the extra features provided by these packages.\n${_enabled}")
+   ENDIF (EXISTS ${_file})
+
+   SET(_dlist 0)
+   SET(_file ${CMAKE_BINARY_DIR}/DisabledFeatures.txt)
+   IF (EXISTS ${_file})
+      SET(_dlist 1)
+      FILE(READ ${_file} _disabled)
+      FILE(REMOVE ${_file})
+      SET(_summary "${_summary}-----------------------------------------------------------------------------\n-- The following OPTIONAL packages could NOT be located on your system.\n-- Consider installing them to enable more features from this software.\n${_disabled}")
+   ELSE (EXISTS ${_file})
+      IF (${_elist})
+        SET(_summary "${_summary}Congratulations! All external packages have been found.\n")
+      ENDIF (${_elist})
+   ENDIF (EXISTS ${_file})
+
+   IF (${_elist} OR ${_dlist})
+      SET(_summary "${_summary}-----------------------------------------------------------------------------\n")
+   ENDIF (${_elist} OR ${_dlist})
+   MESSAGE(STATUS "${_summary}")
+
+ENDMACRO(MACRO_DISPLAY_FEATURE_LOG)
diff -N -r -u gpgme-qt-orig/CMakeLists.txt gpgme-qt/CMakeLists.txt
--- gpgme-qt-orig/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ gpgme-qt/CMakeLists.txt	2008-01-21 22:49:20.141701500 +0100
@@ -0,0 +1,61 @@
+project( gpgme_qt )
+
+set( CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules )
+
+# search packages used by KDE
+find_package(QT4 REQUIRED)
+#include (KDE4Defaults)
+#include (MacroLibrary)
+
+find_package(Gpgme REQUIRED)
+include(MacroEnsureVersion)
+add_definitions (${QT_DEFINITIONS})
+include_directories (${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR})
+include_directories ("${CMAKE_INSTALL_PREFIX}/include" ${CMAKE_BINARY_DIR} ${QT_INCLUDES}) 
+configure_file(config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h )
+add_definitions(-DHAVE_CONFIG_H)
+
+if (WIN32)
+# overriding LIB_INSTALL_DIR specific for win32 to archieve 
+# propper installation of shared library targets will also be 
+# used in install(FILES ...) which fails with error
+# 'INSTALL FILES given unknown argument "RUNTIME".'
+# There must be a way to only patch install(TARGETS) 
+#    set (LIB_INSTALL_DIR lib)
+  add_definitions(-DHAVE_W32_SYSTEM)
+endif (WIN32)
+
+## gpgme comes in three flavours on each of the platforms:
+##  Windows: gpgme, gpgme-glib, gpgme-qt
+##     Unix: gpgme, gpgme-pthread, gpgme-pth
+## We're building corresponding gpgme++ flavours
+
+set(gpgme_qt_LIB_SRCS 
+  gpgme/get-env.c
+  gpgme/w32-sema.c
+  gpgme/vasprintf.c
+  gpgme/debug.c
+  gpgme/w32-util.c
+#(js) todo - readd later, as I do not have gpgme supporting getauditlog
+#gpgme/getauditlog.c
+  gpgme/w32-qt-io.cpp 
+  gpgme/kdpipeiodevice.cpp
+  gpgme/kdpipeiodevice.h
+)
+
+qt4_automoc(${gpgme_qt_LIB_SRCS})
+
+set( _gpgme_qt_version 1.0.0 )
+
+#set( GPGMEPP_INCLUDE ${INCLUDE_INSTALL_DIR} ${GPGME_INCLUDES} )
+
+if ( GPGME_VANILLA_FOUND )
+  add_library( gpgme-qt SHARED ${gpgme_qt_LIB_SRCS} gpgme/gpgme.def )
+  target_link_libraries( gpgme-qt ${GPGME_VANILLA_LIBRARIES} ${QT_QTCORE_LIBRARY} )
+  set_target_properties( gpgme-qt PROPERTIES
+    VERSION     ${_gpgme_qt_version}
+    SOVERSION   ${_gpgme_qt_version}
+    OUTPUT_NAME gpgme-qt
+  )
+  install(TARGETS gpgme-qt RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib )
+endif ( GPGME_VANILLA_FOUND )
diff -N -r -u gpgme-qt-orig/config.h.cmake gpgme-qt/config.h.cmake
--- gpgme-qt-orig/config.h.cmake	1970-01-01 01:00:00.000000000 +0100
+++ gpgme-qt/config.h.cmake	2008-01-21 22:49:20.141701500 +0100
@@ -0,0 +1,42 @@
+/* This file is part of the KDE libraries
+   Copyright (c) 2007 The KDE Project
+
+   This library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Library General Public
+   License version 2 as published by the Free Software Foundation.
+
+   This library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Library General Public License for more details.
+
+   You should have received a copy of the GNU Library General Public License
+   along with this library; see the file COPYING.LIB.  If not, write to
+   the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+   Boston, MA 02110-1301, USA.
+*/
+
+#ifndef GPGME_QT_CONFIG_H
+#define GPGME_QT_CONFIG_H
+
+/* Definition of GCC specific attributes.  */
+#if defined __GNUC__ && __GNUC__ > 2
+# define GPGME_GCC_A_PURE  __attribute__ ((__pure__))
+#else
+# define GPGME_GCC_A_PURE
+#endif
+
+#ifdef _MSC_VER
+# define snprintf _snprintf 
+
+#endif
+
+/* Separators as used in $PATH.  */
+#if defined _WIN32 || defined _WIN64
+# define HAVE_DOSISH_SYSTEM
+# define PATHSEP_C ';'
+#else
+# define PATHSEP_C ':'
+#endif
+
+#endif
diff -N -r -u gpgme-qt-orig/gpgme/debug.h gpgme-qt/gpgme/debug.h
--- gpgme-qt-orig/gpgme/debug.h	2008-01-21 22:48:20.360451500 +0100
+++ gpgme-qt/gpgme/debug.h	2008-01-21 22:49:20.157326500 +0100
@@ -22,6 +22,7 @@
 #define DEBUG_H
 
 #include <string.h>
+#include "config.h"
 
 /* Indirect stringification, requires __STDC__ to work.  */
 #define STRINGIFY(v) #v
@@ -40,10 +41,10 @@
 
 /* Remove path components from filenames (i.e. __FILE__) for cleaner
    logs. */
-static inline const char *_gpgme_debug_srcname (const char *file)
+static const char *_gpgme_debug_srcname (const char *file)
                                                 GPGME_GCC_A_PURE;
 
-static inline const char *
+static const char *
 _gpgme_debug_srcname (const char *file)
 {
   const char *s = strrchr (file, '/');
diff -N -r -u gpgme-qt-orig/gpgme/gpgme.def gpgme-qt/gpgme/gpgme.def
--- gpgme-qt-orig/gpgme/gpgme.def	2008-01-21 22:48:20.360451500 +0100
+++ gpgme-qt/gpgme/gpgme.def	2008-01-21 22:49:20.157326500 +0100
@@ -156,15 +156,15 @@
     gpgme_get_giochannel		  @121
     gpgme_get_fdptr			  @122
 
-    gpgme_op_getauditlog_start            @123
-    gpgme_op_getauditlog                  @124
+;    gpgme_op_getauditlog_start            @123
+;    gpgme_op_getauditlog                  @124
 
-    gpgme_conf_release			  @125
-    gpgme_conf_arg_new			  @126
-    gpgme_conf_arg_release		  @127
-    gpgme_conf_opt_change		  @128
-    gpgme_op_conf_load			  @129
-    gpgme_op_conf_save			  @130
+;    gpgme_conf_release			  @125
+;    gpgme_conf_arg_new			  @126
+;    gpgme_conf_arg_release		  @127
+;    gpgme_conf_opt_change		  @128
+;    gpgme_op_conf_load			  @129
+;    gpgme_op_conf_save			  @130
 
 ; END
 
diff -N -r -u gpgme-qt-orig/gpgme/gpgme.h gpgme-qt/gpgme/gpgme.h
--- gpgme-qt-orig/gpgme/gpgme.h	2008-01-21 22:48:20.376076500 +0100
+++ gpgme-qt/gpgme/gpgme.h	2008-01-21 22:49:20.157326500 +0100
@@ -34,7 +34,11 @@
 
 #ifdef _MSC_VER
   typedef long off_t;
-  typedef long ssize_t;
+  typedef int pid_t;
+  #ifndef _SSIZE_T_DEFINED
+  #define _SSIZE_T_DEFINED
+    typedef long ssize_t;
+  #endif
 #else
 # include <sys/types.h>
 #endif
diff -N -r -u gpgme-qt-orig/gpgme/w32-qt-io.cpp gpgme-qt/gpgme/w32-qt-io.cpp
--- gpgme-qt-orig/gpgme/w32-qt-io.cpp	2008-01-21 22:48:20.376076500 +0100
+++ gpgme-qt/gpgme/w32-qt-io.cpp	2008-01-21 22:49:20.172951500 +0100
@@ -29,8 +29,6 @@
 #include <errno.h>
 #include <signal.h>
 #include <fcntl.h>
-#include <unistd.h>
-#include <sys/time.h>
 #include <sys/types.h>
 #include <windows.h>
 #include <io.h>
@@ -408,7 +406,7 @@
       0,         /* returns pid */
       0         /* returns tid */
     };
-  STARTUPINFO si;
+  STARTUPINFOA si;
   int cr_flags = CREATE_DEFAULT_ERROR_MODE
     | GetPriorityClass (GetCurrentProcess ());
   int i;
diff -N -r -u gpgme-qt-orig/gpgme/w32-sema.c gpgme-qt/gpgme/w32-sema.c
--- gpgme-qt-orig/gpgme/w32-sema.c	2008-01-21 22:48:20.376076500 +0100
+++ gpgme-qt/gpgme/w32-sema.c	2008-01-21 22:49:20.172951500 +0100
@@ -29,7 +29,6 @@
 #include <errno.h>
 #include <signal.h>
 #include <fcntl.h>
-#include <sys/time.h>
 #include <sys/types.h>
 #include <windows.h>
 #include <io.h>
diff -N -r -u gpgme-qt-orig/gpgme/debug.c gpgme-qt/gpgme/debug.c
--- gpgme-qt-orig/gpgme/debug.c	2008-01-21 22:48:20.376076500 +0100
+++ gpgme-qt/gpgme/debug.c	2008-01-21 22:49:20.172951500 +0100
@@ -26,7 +26,6 @@
 #include <stdlib.h>
 #include <string.h>
 #include <stdarg.h>
-#include <unistd.h>
 #include <ctype.h>
 #include <errno.h>
 #ifndef HAVE_DOSISH_SYSTEM
