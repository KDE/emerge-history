diff -Nru cyrus-sasl-2.1.22.orig/CMakeLists.txt cyrus-sasl-2.1.22/CMakeLists.txt
--- cyrus-sasl-2.1.22.orig/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ cyrus-sasl-2.1.22/CMakeLists.txt	2010-08-31 14:41:46.271660000 +0200
@@ -0,0 +1,240 @@
+project(cyrus-sasl)
+cmake_minimum_required(VERSION 2.6.2)
+set(PACKAGE "cyrus-sasl")
+set(VERSION "2.1.22")
+set(PLUGINDESTINATION lib/sasl2)
+set(PLUGINDIR ${CMAKE_INSTALL_PREFIX}/${PLUGINDESTINATION})
+set(CONFIGDIR ${CMAKE_INSTALL_PREFIX}/${PLUGINDESTINATION})
+
+option(STATIC_PLUGIN "test" ON)
+option(STATIC_LIBRARY "test" ON)
+
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules)
+
+if(WINCE)
+    find_package(Wcecompat REQUIRED)
+    include_directories(${WCECOMPAT_INCLUDE_DIR})
+    set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${WCECOMPAT_INCLUDE_DIR})
+    set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} ${WCECOMPAT_LIBRARIES})
+endif(WINCE)
+
+include(CheckIncludeFiles)
+check_include_files(sys/socket.h   HAVE_SYS_SOCKET_H)
+check_include_files(syslog.h       HAVE_SYSLOG)
+check_include_files(time.h         HAVE_TIME_H)
+check_include_files(unistd.h       HAVE_UNISTD_H)
+
+include(CheckFunctionExists)
+check_function_exists(getaddrinfo       HAVE_GETADDRINFO)
+check_function_exists(getnameinfo       HAVE_GETNAMEINFO)
+#check_function_exists(getpid            HAVE_GETPID)
+check_function_exists(gettimeofday      HAVE_GETTIMEOFDAY)
+check_include_files(snprintf       HAVE_SNPRINTF)
+if(WIN32)
+  set(HAVE_SNPRINTF 1)
+endif(WIN32)
+
+include(CheckSymbolExists)
+check_symbol_exists(SOCKLENT_T        "sys/socket.h"               SOCKLENT_T)
+
+# TODO: HAVE_SOCKADDR_SA_LEN
+
+if(WIN32)
+  add_definitions(-DWIN32)
+  add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
+  add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)
+  set(HIER_DELIMITER '\\\\')
+else(WIN32)
+  set(HIER_DELIMITER '/')
+endif(WIN32)
+
+if(CMAKE_COMPILER_IS_GNUCC)
+  set(HAVE___ATTRIBUTE__ 1)
+endif(CMAKE_COMPILER_IS_GNUCC)
+
+configure_file(${CMAKE_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)
+
+if(WIN32 AND NOT WINCE)
+set(additional_link_libs ws2_32)
+endif(WIN32 AND NOT WINCE)
+
+if(WINCE)
+set(additional_link_libs ws2 ${WCECOMPAT_LIBRARIES})
+endif(WINCE)
+
+set(plugin_SRCS
+  plugins/plugin_common.c
+  plugins/plugin_common.h
+)
+
+if(STATIC_LIBRARY)
+    set(LIBSASL_STATIC 1)
+    configure_file(include/prop.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/prop.h)
+    add_definitions(-DLIBSASL_STATIC)
+endif(STATIC_LIBRARY)
+
+if(STATIC_PLUGIN)
+    add_definitions(-DSTATIC_PLUGIN
+                    -DSTATIC_ANONYMOUS
+                    -DSTATIC_CRAMMD5
+                    -DSTATIC_DIGESTMD5
+                    -DSTATIC_LOGIN
+                    -DSTATIC_PLAIN)
+
+    #
+    # ANONYMOUS
+    #
+    set(anonymous_SRCS
+      plugins/anonymous.c
+      plugins/anonymous_init.c
+    )
+    #
+    # LOGIN
+    #
+    set(login_SRCS
+      plugins/login.c
+      plugins/login_init.c
+    )
+    #
+    # PLAIN
+    #
+    set(plain_SRCS
+      plugins/plain.c
+      plugins/plain_init.c
+    )
+    #
+    # CRAMMD5
+    #
+    set(crammd5_SRCS
+      plugins/cram.c
+      plugins/crammd5_init.c
+    )
+    #
+    # DIGESTMD5
+    #
+    set(digestmd5_SRCS
+      plugins/digestmd5.c
+      plugins/digestmd5_init.c
+    )
+    set(plugin_SRCS ${plugin_SRCS} ${anonymous_SRCS} ${login_SRCS} ${plain_SRCS} ${crammd5_SRCS} ${digestmd5_SRCS})
+endif(STATIC_PLUGIN)
+
+set(sasl_SRCS
+  lib/auxprop.c
+  lib/canonusr.c
+  lib/checkpw.c
+  lib/client.c
+  lib/common.c
+  lib/config.c
+  lib/external.c
+  lib/getaddrinfo.c
+  lib/getnameinfo.c
+  lib/getsubopt.c
+  lib/md5.c
+  lib/saslutil.c
+  lib/server.c
+  lib/seterror.c
+)
+if(NOT HAVE_SNPRINTF)
+  list(APPEND sasl_SRCS lib/snprintf.c)
+endif(NOT HAVE_SNPRINTF)
+if(WIN32)
+  list(APPEND sasl_SRCS lib/windlopen.c)
+else(WIN32)
+  list(APPEND sasl_SRCS lib/dlopen.c)
+endif(WIN32)
+
+set(sasl_HDRS
+  lib/saslint.h
+  lib/staticopen.h
+)
+set(sasl_inc_HDRS
+  include/exits.h
+  include/gai.h
+  include/hmac-md5.h
+  include/md5.h
+  include/md5global.h
+  include/sasl.h
+  include/saslplug.h
+  include/saslutil.h
+)
+
+include_directories(
+  ${CMAKE_SOURCE_DIR}/include
+  ${CMAKE_CURRENT_BINARY_DIR}
+)
+if(STATIC_LIBRARY)
+    add_library(sasl2 STATIC ${sasl_SRCS} ${sasl_HDRS} ${sasl_inc_HDRS} ${plugin_SRCS})
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/prop.h DESTINATION include/sasl)
+else(STATIC_LIBRARY)
+    add_library(sasl2 SHARED ${sasl_SRCS} ${sasl_HDRS} ${sasl_inc_HDRS} ${plugin_SRCS})
+    set_target_properties(sasl2 PROPERTIES DEFINE_SYMBOL LIBSASL_EXPORTS)
+    install(FILES include/prop.h DESTINATION include/sasl)
+endif(STATIC_LIBRARY)
+target_link_libraries(sasl2 ${additional_link_libs})
+install(TARGETS sasl2 RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)
+install(FILES ${sasl_inc_HDRS} DESTINATION include/sasl)
+
+if(NOT STATIC_PLUGIN)
+    #
+    # ANONYMOUS
+    #
+    set(anonymous_SRCS
+      plugins/anonymous.c
+      plugins/anonymous_init.c
+    )
+    add_library(saslANONYMOUS MODULE ${anonymous_SRCS} ${plugin_SRCS})
+    target_link_libraries(saslANONYMOUS sasl2 ${additional_link_libs})
+    install(TARGETS saslANONYMOUS DESTINATION ${PLUGINDESTINATION})
+
+    #
+    # LOGIN
+    #
+    set(login_SRCS
+      plugins/login.c
+      plugins/login_init.c
+    )
+    add_library(saslLOGIN MODULE ${login_SRCS} ${plugin_SRCS})
+    target_link_libraries(saslLOGIN sasl2 ${additional_link_libs})
+    install(TARGETS saslLOGIN DESTINATION ${PLUGINDESTINATION})
+
+    #
+    # PLAIN
+    #
+    set(plain_SRCS
+      plugins/plain.c
+      plugins/plain_init.c
+    )
+    add_library(saslPLAIN MODULE ${plain_SRCS} ${plugin_SRCS})
+    target_link_libraries(saslPLAIN sasl2 ${additional_link_libs})
+    install(TARGETS saslPLAIN DESTINATION ${PLUGINDESTINATION})
+
+    #
+    # CRAMMD5
+    #
+    set(crammd5_SRCS
+      plugins/cram.c
+      plugins/crammd5_init.c
+    )
+    add_library(saslCRAMMD5 MODULE ${crammd5_SRCS} ${plugin_SRCS})
+    target_link_libraries(saslCRAMMD5 sasl2 ${additional_link_libs})
+    install(TARGETS saslCRAMMD5 DESTINATION ${PLUGINDESTINATION})
+
+    #
+    # DIGESTMD5
+    #
+    set(digestmd5_SRCS
+      plugins/digestmd5.c
+      plugins/digestmd5_init.c
+    )
+    add_library(saslDIGESTMD5 MODULE ${digestmd5_SRCS} ${plugin_SRCS})
+    target_link_libraries(saslDIGESTMD5 sasl2 ${additional_link_libs})
+    install(TARGETS saslDIGESTMD5 DESTINATION ${PLUGINDESTINATION})
+endif(NOT STATIC_PLUGIN)
+
+#
+# Pluginviewer
+#
+add_executable(sasl2_pluginviewer utils/pluginviewer.c)
+target_link_libraries(sasl2_pluginviewer sasl2 ${additional_link_libs})
+install(TARGETS sasl2_pluginviewer DESTINATION bin)
diff -Nru cyrus-sasl-2.1.22.orig/cmake/modules/FindWcecompat.cmake cyrus-sasl-2.1.22/cmake/modules/FindWcecompat.cmake
--- cyrus-sasl-2.1.22.orig/cmake/modules/FindWcecompat.cmake	Thu Jan  1 00:00:00 1970
+++ cyrus-sasl-2.1.22/cmake/modules/FindWcecompat.cmake	Mon Jul  5 15:05:47 2010
@@ -0,0 +1,33 @@
+# Try to find Wcecompat functionality
+# Once done this will define
+#
+#  WCECOMPAT_FOUND - system has Wcecompat
+#  WCECOMPAT_INCLUDE_DIR - Wcecompat include directory
+#  WCECOMPAT_LIBRARIES - Libraries needed to use Wcecompat
+#
+# Copyright (c) 2010, Andreas Holzammer, <andy@kdab.com>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+
+if(WCECOMPAT_INCLUDE_DIR AND WCECOMPAT_LIB_FOUND)
+  set(Wcecompat_FIND_QUIETLY TRUE)
+endif(WCECOMPAT_INCLUDE_DIR AND WCECOMPAT_LIB_FOUND)
+
+find_path(WCECOMPAT_INCLUDE_DIR errno.h PATH_SUFFIXES wcecompat)
+
+set(WCECOMPAT_LIB_FOUND FALSE)
+
+if(WCECOMPAT_INCLUDE_DIR)
+    find_library(WCECOMPAT_LIBRARIES NAMES wcecompat wcecompatex )
+    if(WCECOMPAT_LIBRARIES)
+      set(WCECOMPAT_LIB_FOUND TRUE)
+    endif(WCECOMPAT_LIBRARIES)
+endif(WCECOMPAT_INCLUDE_DIR)
+
+# I have no idea what this is about, but it seems to be used quite often, so I add this here
+set(WCECOMPAT_CONST const)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(Wcecompat  DEFAULT_MSG  WCECOMPAT_LIBRARIES  WCECOMPAT_LIB_FOUND)
+
+mark_as_advanced(WCECOMPAT_INCLUDE_DIR  WCECOMPAT_LIBRARIES  WCECOMPAT_CONST  WCECOMPAT_LIB_FOUND)
diff -Nru cyrus-sasl-2.1.22.orig/config.h.cmake cyrus-sasl-2.1.22/config.h.cmake
--- cyrus-sasl-2.1.22.orig/config.h.cmake	Thu Jan  1 00:00:00 1970
+++ cyrus-sasl-2.1.22/config.h.cmake	Mon Jul  5 15:14:01 2010
@@ -0,0 +1,108 @@
+#ifndef CONFIG_H
+#define CONFIG_H
+/* Name of package */
+#cmakedefine PACKAGE "@PACKAGE@"
+
+#cmakedefine VERSION "@VERSION@"
+
+/* Do we have a getnameinfo() function? */
+#cmakedefine HAVE_GETNAMEINFO 1
+
+/* Do we have a getaddrinfo() function? */
+#cmakedefine HAVE_GETADDRINFO 1
+
+/* Do we have a getpid() function? */
+#cmakedefine HAVE_GETPID 1
+
+/* Do we have a gettimeofday() function? */
+#cmakedefine HAVE_GETTIMEOFDAY 1
+
+/* Do we have a gettimeofday() function? */
+#cmakedefine HAVE_SNPRINTF 1
+
+/* Do we have a socklen_t? */
+#undef HAVE_SOCKLEN_T
+#ifndef HAVE_SOCKLEN_T
+typedef unsigned int socklen_t;
+#endif /* HAVE_SOCKLEN_T */
+
+/* define if your compiler has __attribute__ */
+#cmakedefine HAVE___ATTRIBUTE__ 1
+#ifndef HAVE___ATTRIBUTE__
+/* Can't use attributes... */
+#define __attribute__(foo)
+#endif
+
+#cmakedefine HAVE_SYS_SOCKET_H 1
+#ifdef HAVE_SYS_SOCKET_H
+  #include <sys/socket.h>
+#endif
+
+#cmakedefine HAVE_SYSLOG 1
+
+#cmakedefine HAVE_TIME_H 1
+
+#cmakedefine HAVE_UNISTD_H 1
+
+#include <stdlib.h>
+#include <string.h>
+#include <sys/types.h>
+
+/* Defined in RFC 1035. max strlen is only 253 due to length bytes. */
+#ifndef MAXHOSTNAMELEN
+# define MAXHOSTNAMELEN  255
+#endif
+
+/* Runtime plugin location */
+#cmakedefine PLUGINDIR "@PLUGINDIR@"
+#cmakedefine CONFIGDIR "@CONFIGDIR@"
+
+#ifndef HAVE_GETADDRINFO
+#define	getaddrinfo	sasl_getaddrinfo
+#define	freeaddrinfo	sasl_freeaddrinfo
+#define	gai_strerror	sasl_gai_strerror
+#endif
+
+#ifndef HAVE_GETNAMEINFO
+#define	getnameinfo	sasl_getnameinfo
+#endif
+
+#if !defined(HAVE_GETNAMEINFO) || !defined(HAVE_GETADDRINFO)
+#include "gai.h"
+#endif
+
+#ifndef AI_NUMERICHOST   /* support glibc 2.0.x */
+#define AI_NUMERICHOST  4
+#define NI_NUMERICHOST  2
+#define NI_NAMEREQD     4
+#define NI_NUMERICSERV  8
+#endif
+
+#ifndef WIN32
+# include <netdb.h>
+# ifdef HAVE_SYS_PARAM_H
+#  include <sys/param.h>
+# endif
+#else /* WIN32 */
+# include <winsock2.h>
+# ifndef strncasecmp
+#  define strncasecmp strnicmp
+# endif
+# ifndef strcasecmp
+#  define strcasecmp stricmp
+# endif
+# ifndef snprintf
+#  define snprintf _snprintf
+# endif
+
+/* Registry key that contains the locations of the plugins */
+# define SASL_ROOT_KEY "SOFTWARE\\Carnegie Mellon\\Project Cyrus\\SASL Library"
+# define SASL_PLUGIN_PATH_ATTR "SearchPath"
+# define SASL_CONF_PATH_ATTR "ConfFile"
+
+#endif /* WIN32 */
+
+#ifndef HIER_DELIMITER
+# define HIER_DELIMITER @HIER_DELIMITER@
+#endif
+#endif
diff -Nru cyrus-sasl-2.1.22.orig/include/gai.h cyrus-sasl-2.1.22/include/gai.h
--- cyrus-sasl-2.1.22.orig/include/gai.h	2006-04-10 15:36:20.000000000 +0200
+++ cyrus-sasl-2.1.22/include/gai.h	2010-07-25 20:43:51.977312400 +0200
@@ -54,6 +54,8 @@
 #ifndef _GAI_H_
 #define _GAI_H_
 
+#include "prop.h"
+
 #ifndef NI_MAXHOST
 #define	NI_MAXHOST	1025
 #endif
@@ -73,6 +75,7 @@
 #ifndef AI_PASSIVE
 #define AI_PASSIVE	1
 #define AI_CANONNAME	2
+#if !(defined(_MSC_VER) && _MSC_VER >= 1600)
 struct addrinfo {
 	int	ai_flags;	/* AI_PASSIVE, AI_CANONNAME */
 	int	ai_family;	/* PF_xxx */
@@ -84,21 +87,22 @@
 	struct addrinfo *ai_next;	/* next structure in linked list */
 };
 #endif
+#endif
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 #ifndef HAVE_GETNAMEINFO
-int	getnameinfo(const struct sockaddr *, socklen_t, char *,
+LIBSASL_API int	getnameinfo(const struct sockaddr *, socklen_t, char *,
 		    size_t, char *, size_t, int);
 #endif
 
 #ifndef HAVE_GETADDRINFO
-int	getaddrinfo(const char *, const char *,
+LIBSASL_API int	getaddrinfo(const char *, const char *,
 		    const struct addrinfo *, struct addrinfo **);
-void	freeaddrinfo(struct addrinfo *);
-char	*gai_strerror(int);
+LIBSASL_API void	freeaddrinfo(struct addrinfo *);
+LIBSASL_API char	*gai_strerror(int);
 #endif
 
 #ifdef __cplusplus
diff -Nru cyrus-sasl-2.1.22.orig/include/prop.h cyrus-sasl-2.1.22/include/prop.h
--- cyrus-sasl-2.1.22.orig/include/prop.h	2003-12-12 01:47:22.000000000 +0100
+++ cyrus-sasl-2.1.22/include/prop.h	2010-08-31 11:40:06.383222000 +0200
@@ -33,18 +33,22 @@
 /* Under Unix, life is simpler: we just need to mark library functions
  * as extern.  (Technically, we don't even have to do that.) */
 #ifdef WIN32
-# ifdef LIBSASL_EXPORTS
-#  define LIBSASL_API  __declspec(dllexport)
-# else /* LIBSASL_EXPORTS */
-#  define LIBSASL_API  __declspec(dllimport)
-# endif /* LIBSASL_EXPORTS */
+# ifndef LIBSASL_STATIC
+#  ifdef LIBSASL_EXPORTS
+#   define LIBSASL_API  __declspec(dllexport)
+#  else /* LIBSASL_EXPORTS */
+#   define LIBSASL_API  __declspec(dllimport)
+#  endif /* LIBSASL_EXPORTS */
+# else /* LIBSASL_STATIC */
+#  define LIBSASL_API
+# endif
 #else /* WIN32 */
 # define LIBSASL_API extern
 #endif /* WIN32 */
 
 /* Same as above, but used during a variable declaration. Only Unix definition
  * is different, as we can't assign an initial value to an extern variable */ 
-#ifdef WIN32
+#if defined(WIN32) && !defined(LIBSASL_STATIC)
 # ifdef LIBSASL_EXPORTS
 #  define LIBSASL_VAR  __declspec(dllexport)
 # else /* LIBSASL_EXPORTS */
diff -Nru cyrus-sasl-2.1.22.orig/include/prop.h.cmake cyrus-sasl-2.1.22/include/prop.h.cmake
--- cyrus-sasl-2.1.22.orig/include/prop.h.cmake	1970-01-01 01:00:00.000000000 +0100
+++ cyrus-sasl-2.1.22/include/prop.h.cmake	2010-08-31 14:42:13.475216000 +0200
@@ -0,0 +1,193 @@
+/* prop.h -- property request/response management routines
+ *
+ * Author: Chris Newman
+ * Removal of implementation-specific details by: Rob Siemborski
+ *
+ * This is intended to be used to create a list of properties to request,
+ * and _then_ request values for all properties.  Any change to the request
+ * list will discard any existing values.  This assumption allows a very
+ * efficient and simple memory model.  This was designed for SASL API auxiliary
+ * property support, but would be fine for other contexts where this property
+ * model is appropriate.
+ *
+ * The "struct propctx" is allocated by prop_new and is a fixed size structure.
+ * If a prop_init() call were added, it would be reasonable to embed a "struct
+ * propctx" in another structure.  prop_new also allocates a pool of memory
+ * (in the vbase field) which will be used for an array of "struct propval"
+ * to list all the requested properties.
+ *
+ * Properties may be multi-valued.
+ */
+
+#ifndef PROP_H
+#define PROP_H 1
+
+#cmakedefine LIBSASL_STATIC 1
+
+/* The following ifdef block is the standard way of creating macros
+ * which make exporting from a DLL simpler. All files within this DLL
+ * are compiled with the LIBSASL_EXPORTS symbol defined on the command
+ * line. this symbol should not be defined on any project that uses
+ * this DLL. This way any other project whose source files include
+ * this file see LIBSASL_API functions as being imported from a DLL,
+ * wheras this DLL sees symbols defined with this macro as being
+ * exported.  */
+/* Under Unix, life is simpler: we just need to mark library functions
+ * as extern.  (Technically, we don't even have to do that.) */
+#ifdef WIN32
+# ifndef LIBSASL_STATIC
+#  ifdef LIBSASL_EXPORTS
+#   define LIBSASL_API  __declspec(dllexport)
+#  else /* LIBSASL_EXPORTS */
+#   define LIBSASL_API  __declspec(dllimport)
+#  endif /* LIBSASL_EXPORTS */
+# else /* LIBSASL_STATIC */
+#  define LIBSASL_API
+# endif
+#else /* WIN32 */
+# define LIBSASL_API extern
+#endif /* WIN32 */
+
+/* Same as above, but used during a variable declaration. Only Unix definition
+ * is different, as we can't assign an initial value to an extern variable */ 
+#if defined(WIN32) && !defined(LIBSASL_STATIC)
+# ifdef LIBSASL_EXPORTS
+#  define LIBSASL_VAR  __declspec(dllexport)
+# else /* LIBSASL_EXPORTS */
+#  define LIBSASL_VAR  __declspec(dllimport)
+# endif /* LIBSASL_EXPORTS */
+#else /* WIN32 */
+# define LIBSASL_VAR
+#endif /* WIN32 */
+
+/* the resulting structure for property values
+ */
+struct propval {
+    const char *name;	 /* name of property; NULL = end of list */
+                         /* same pointer used in request will be used here */
+    const char **values; /* list of strings, values == NULL if property not
+			  * found, *values == NULL if property found with
+			  * no values */
+    unsigned nvalues;    /* total number of value strings */
+    unsigned valsize;	 /* total size in characters of all value strings */
+};
+
+/*
+ * private internal structure
+ */
+#define PROP_DEFAULT 4		/* default number of propvals to assume */
+struct propctx;
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* create a property context
+ *  estimate -- an estimate of the storage needed for requests & responses
+ *              0 will use module default
+ * returns a new property context on success and NULL on any error
+ */
+LIBSASL_API struct propctx *prop_new(unsigned estimate);
+
+/* create new propctx which duplicates the contents of an existing propctx
+ * returns SASL_OK on success
+ * possible other return values include: SASL_NOMEM, SASL_BADPARAM
+ */
+LIBSASL_API int prop_dup(struct propctx *src_ctx, struct propctx **dst_ctx);
+
+/* Add property names to request
+ *  ctx       -- context from prop_new()
+ *  names     -- list of property names; must persist until context freed
+ *               or requests cleared (This extends to other contexts that
+ *               are dup'ed from this one, and their children, etc)
+ *
+ * NOTE: may clear values from context as side-effect
+ * returns SASL_OK on success
+ * possible other return values include: SASL_NOMEM, SASL_BADPARAM
+ */
+LIBSASL_API int prop_request(struct propctx *ctx, const char **names);
+
+/* return array of struct propval from the context
+ *  return value persists until next call to
+ *   prop_request, prop_clear or prop_dispose on context
+ *
+ *  returns NULL on error
+ */
+LIBSASL_API const struct propval *prop_get(struct propctx *ctx);
+
+/* Fill in an array of struct propval based on a list of property names
+ *  return value persists until next call to
+ *   prop_request, prop_clear or prop_dispose on context
+ *  returns number of matching properties which were found (values != NULL)
+ *  if a name requested here was never requested by a prop_request, then
+ *  the name field of the associated vals entry will be set to NULL
+ *
+ * The vals array MUST be atleast as long as the names array.
+ *
+ * returns # of matching properties on success
+ * possible other return values include: SASL_BADPARAM
+ */
+LIBSASL_API int prop_getnames(struct propctx *ctx, const char **names,
+		  struct propval *vals);
+
+/* clear values and optionally requests from property context
+ *  ctx      -- property context
+ *  requests -- 0 = don't clear requests, 1 = clear requests
+ */
+LIBSASL_API void prop_clear(struct propctx *ctx, int requests);
+
+/* erase the value of a property
+ */
+LIBSASL_API void prop_erase(struct propctx *ctx, const char *name);
+
+/* dispose of property context
+ *  ctx      -- is disposed and set to NULL; noop if ctx or *ctx is NULL
+ */
+LIBSASL_API void prop_dispose(struct propctx **ctx);
+
+
+/****fetcher interfaces****/
+
+/* format the requested property names into a string
+ *  ctx    -- context from prop_new()/prop_request()
+ *  sep    -- separator between property names (unused if none requested)
+ *  seplen -- length of separator, if < 0 then strlen(sep) will be used
+ *  outbuf -- output buffer
+ *  outmax -- maximum length of output buffer including NUL terminator
+ *  outlen -- set to length of output string excluding NUL terminator
+ * returns SASL_OK on success
+ * returns SASL_BADPARAM or amount of additional space needed on failure
+ */
+LIBSASL_API int prop_format(struct propctx *ctx, const char *sep, int seplen,
+		char *outbuf, unsigned outmax, unsigned *outlen);
+
+/* add a property value to the context
+ *  ctx    -- context from prop_new()/prop_request()
+ *  name   -- name of property to which value will be added
+ *            if NULL, add to the same name as previous prop_set/setvals call
+ *  value  -- a value for the property; will be copied into context
+ *            if NULL, remove existing values
+ *  vallen -- length of value, if <= 0 then strlen(value) will be used
+ * returns SASL_OK on success
+ * possible error return values include: SASL_BADPARAM, SASL_NOMEM
+ */
+LIBSASL_API int prop_set(struct propctx *ctx, const char *name,
+	     const char *value, int vallen);
+
+/* set the values for a property
+ *  ctx    -- context from prop_new()/prop_request()
+ *  name   -- name of property to which value will be added
+ *            if NULL, add to the same name as previous prop_set/setvals call
+ *  values -- array of values, ending in NULL.  Each value is a NUL terminated
+ *            string
+ * returns SASL_OK on success
+ * possible error return values include: SASL_BADPARAM, SASL_NOMEM
+ */
+LIBSASL_API int prop_setvals(struct propctx *ctx, const char *name,
+		 const char **values);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* PROP_H */
diff -Nru cyrus-sasl-2.1.22.orig/lib/common.c cyrus-sasl-2.1.22/lib/common.c
--- cyrus-sasl-2.1.22.orig/lib/common.c	Wed Apr 19 18:39:59 2006
+++ cyrus-sasl-2.1.22/lib/common.c	Mon Jul  5 16:12:13 2010
@@ -1435,6 +1435,7 @@
 #ifdef WIN32
     /* for win32, try using the GetUserName standard call */
     {
+#ifndef _WIN32_WCE
 	DWORD i;
 	BOOL rval;
 	static char sender[128];
@@ -1446,6 +1447,11 @@
 		if (len) *len = strlen(sender);
 		return SASL_OK;
 	}
+#else
+    static char *sender = "wince";
+    *result = sender;
+    return SASL_OK;
+#endif
     }
 #endif /* WIN32 */
     return SASL_FAIL;
@@ -2399,6 +2405,8 @@
 		     &cbData);
 
     switch (ValueType) {
+// There are no enviroment variables under wince
+#ifndef _WIN32_WCE
     case REG_EXPAND_SZ:
         /* : A random starting guess */
         cbExpandedData = cbData + 1024;
@@ -2447,7 +2455,7 @@
         ExpandedValueData = NULL;
 
         break;
-
+#endif
     case REG_MULTI_SZ:
         tmp = ValueData;
 
diff -Nru cyrus-sasl-2.1.22.orig/lib/dlopen.c cyrus-sasl-2.1.22/lib/dlopen.c
--- cyrus-sasl-2.1.22.orig/lib/dlopen.c	2005-03-15 14:33:30.000000000 +0100
+++ cyrus-sasl-2.1.22/lib/dlopen.c	2010-08-31 11:18:47.142053600 +0200
@@ -56,7 +56,7 @@
 #include <sasl.h>
 #include "saslint.h"
 
-#ifndef PIC
+#if !defined(PIC) || defined(STATIC_PLUGIN)
 #include <saslplug.h>
 #include "staticopen.h"
 #endif
@@ -393,7 +393,7 @@
     DIR *dp;
     struct dirent *dir;
 #endif
-#ifndef PIC
+#if !defined(PIC) || defined(STATIC_PLUGIN)
     add_plugin_t *add_plugin;
     _sasl_plug_type type;
     _sasl_plug_rec *p;
@@ -408,7 +408,7 @@
 	|| ! verifyfile_cb->proc)
 	return SASL_BADPARAM;
 
-#ifndef PIC
+#if !defined(PIC) || defined(STATIC_PLUGIN)
     /* do all the static plugins first */
 
     for(cur_ep = entrypoints; cur_ep->entryname; cur_ep++) {
@@ -435,7 +435,7 @@
 	    	result = add_plugin(p->name, p->plug);
 	}
     }
-#endif /* !PIC */
+#endif /* !PIC || STATIC_PLUGIN */
 
 /* only do the following if:
  * 
diff -Nru cyrus-sasl-2.1.22.orig/lib/saslutil.c cyrus-sasl-2.1.22/lib/saslutil.c
--- cyrus-sasl-2.1.22.orig/lib/saslutil.c	Mon Mar 13 18:26:36 2006
+++ cyrus-sasl-2.1.22/lib/saslutil.c	Mon Jul  5 16:13:56 2010
@@ -469,7 +469,7 @@
     memset(buf, 0, len);
 }
 
-#ifdef WIN32
+#ifdef _MSC_VER
 /***************************************************************************** 
  * 
  *  MODULE NAME : GETOPT.C 
@@ -659,6 +659,8 @@
 	register c;
 	static char pbuf[PASSWORD_MAX];
 
+//There is no console under wince
+#ifndef _WIN32_WCE    
 	fprintf(stderr, "%s", prompt); (void) fflush(stderr);
 	for (p=pbuf; (c = _getch())!=13 && c!=EOF;) {
 		if (p < &pbuf[sizeof(pbuf)-1])
@@ -666,6 +668,9 @@
 	}
 	*p = '\0';
 	fprintf(stderr, "\n"); (void) fflush(stderr);
+#else
+    *pbuf = '\0';
+#endif    
 	return(pbuf);
 }
 
diff -Nru cyrus-sasl-2.1.22.orig/lib/windlopen.c cyrus-sasl-2.1.22/lib/windlopen.c
--- cyrus-sasl-2.1.22.orig/lib/windlopen.c	Mon Oct 20 15:19:59 2003
+++ cyrus-sasl-2.1.22/lib/windlopen.c	2010-08-31 11:18:47.144053700 +0200
@@ -50,6 +50,11 @@
 #include <sasl.h>
 #include "saslint.h"
 
+#ifdef STATIC_PLUGIN
+#include <saslplug.h>
+#include "staticopen.h"
+#endif
+
 #define DLL_SUFFIX	".dll"
 #define DLL_MASK	"*" DLL_SUFFIX
 #define DLL_MASK_LEN	5
@@ -69,6 +74,10 @@
 		       const char *entryname,
 		       void **entry_point) 
 {
+#ifdef _WIN32_WCE
+    wchar_t *wentryname;
+    wentryname = wce_mbtowc(entryname);
+#endif
     if(entryname == NULL) {
 	_sasl_log(NULL, SASL_LOG_ERR,
 		  "no entryname in _sasl_locate_entry");
@@ -86,8 +95,13 @@
 		  "no entrypoint output pointer in _sasl_locate_entry");
 	return SASL_BADPARAM;
     }
-
+    
+#ifndef _WIN32_WCE
     *entry_point = GetProcAddress(library, entryname);
+#else
+    *entry_point = GetProcAddressW(library, wentryname);
+    free(wentryname);
+#endif
 
     if (*entry_point == NULL) {
 #if 0 /* This message appears to confuse people */
@@ -159,19 +173,27 @@
 		       const sasl_callback_t *verifyfile_cb)
 {
     int result;
+    const add_plugin_list_t *cur_ep;
+
+#ifdef STATIC_PLUGIN /* STATIC_PLUGIN 2 */
+    add_plugin_t *add_plugin;
+    _sasl_plug_type type;
+    _sasl_plug_rec *p;
+#else /* STATIC_PLUGIN 2 */
     char cur_dir[PATH_MAX], full_name[PATH_MAX+2], prefix[PATH_MAX+2];
 				/* 1 for '\\' 1 for trailing '\0' */
+
     char * pattern;
     char c;
     int pos;
     const char *path=NULL;
     int position;
-    const add_plugin_list_t *cur_ep;
     struct stat statbuf;		/* filesystem entry information */
     intptr_t fhandle;			/* file handle for _findnext function */
     struct _finddata_t finddata;	/* data returned by _findnext() */
     size_t prefix_len;
-
+#endif /* STATIC_PLUGIN 2 */
+    
     if (! entrypoints
 	|| ! getpath_cb
 	|| getpath_cb->id != SASL_CB_GETPATH
@@ -181,6 +203,33 @@
 	|| ! verifyfile_cb->proc)
 	return SASL_BADPARAM;
 
+#ifdef STATIC_PLUGIN /* STATIC_PLUGIN 3 */
+    /* do all the static plugins first */
+    for(cur_ep = entrypoints; cur_ep->entryname; cur_ep++) {
+
+	/* What type of plugin are we looking for? */
+	if(!strcmp(cur_ep->entryname, "sasl_server_plug_init")) {
+	    type = SERVER;
+	    add_plugin = (add_plugin_t *)sasl_server_add_plugin;
+	} else if (!strcmp(cur_ep->entryname, "sasl_client_plug_init")) {
+	    type = CLIENT;
+	    add_plugin = (add_plugin_t *)sasl_client_add_plugin;
+	} else if (!strcmp(cur_ep->entryname, "sasl_auxprop_plug_init")) {
+	    type = AUXPROP;
+	    add_plugin = (add_plugin_t *)sasl_auxprop_add_plugin;
+	} else if (!strcmp(cur_ep->entryname, "sasl_canonuser_init")) {
+	    type = CANONUSER;
+	    add_plugin = (add_plugin_t *)sasl_canonuser_add_plugin;
+	} else {
+	    /* What are we looking for then? */
+	    return SASL_FAIL;
+	}
+	for (p=_sasl_static_plugins; p->type; p++) {
+	    if(type == p->type)
+	    	result = add_plugin(p->name, p->plug);
+	}
+    }
+#else /* STATIC_PLUGIN 3 */
     /* get the path to the plugins */
     result = ((sasl_getpath_t *)(getpath_cb->proc))(getpath_cb->context,
 						    &path);
@@ -257,9 +306,12 @@
 	    }
 
 /* : Check that it is not a directory */
+/* It is not implemented in wince */
+#ifndef _WIN32_WCE
 	    if ((finddata.attrib & _A_SUBDIR) == _A_SUBDIR) {
 		continue;
 	    }
+#endif
 
 /* : Construct full name from prefix and name */
 
@@ -287,6 +339,7 @@
 	_findclose (fhandle);
 
     } while ((c!='=') && (c!=0));
+#endif /* STATIC_PLUGIN 3 */
 
     return SASL_OK;
 }
diff -Nru cyrus-sasl-2.1.22.orig/plugins/anonymous_init.c cyrus-sasl-2.1.22/plugins/anonymous_init.c
--- cyrus-sasl-2.1.22.orig/plugins/anonymous_init.c	2006-05-19 16:49:30.000000000 +0200
+++ cyrus-sasl-2.1.22/plugins/anonymous_init.c	2010-08-31 14:12:01.252562700 +0200
@@ -20,7 +20,7 @@
 #include <sasl_anonymous_plugin_decl.h>
 #endif
 
-#ifdef WIN32
+#if defined(WIN32) && !defined(STATIC_PLUGIN)
 BOOL APIENTRY DllMain( HANDLE hModule, 
                        DWORD  ul_reason_for_call, 
                        LPVOID lpReserved
@@ -36,8 +36,7 @@
     }
     return TRUE;
 }
-#endif
 
 SASL_CLIENT_PLUG_INIT( anonymous )
 SASL_SERVER_PLUG_INIT( anonymous )
-
+#endif
diff -Nru cyrus-sasl-2.1.22.orig/plugins/crammd5_init.c cyrus-sasl-2.1.22/plugins/crammd5_init.c
--- cyrus-sasl-2.1.22.orig/plugins/crammd5_init.c	2006-05-19 16:49:30.000000000 +0200
+++ cyrus-sasl-2.1.22/plugins/crammd5_init.c	2010-08-31 14:11:48.820851700 +0200
@@ -20,7 +20,7 @@
 #include <sasl_crammd5_plugin_decl.h>
 #endif
 
-#ifdef WIN32
+#if defined(WIN32) && !defined(STATIC_PLUGIN)
 BOOL APIENTRY DllMain( HANDLE hModule, 
                        DWORD  ul_reason_for_call, 
                        LPVOID lpReserved
@@ -36,8 +36,7 @@
     }
     return TRUE;
 }
-#endif
 
 SASL_CLIENT_PLUG_INIT( crammd5 )
 SASL_SERVER_PLUG_INIT( crammd5 )
-
+#endif
diff -Nru cyrus-sasl-2.1.22.orig/plugins/digestmd5_init.c cyrus-sasl-2.1.22/plugins/digestmd5_init.c
--- cyrus-sasl-2.1.22.orig/plugins/digestmd5_init.c	2006-05-19 16:49:30.000000000 +0200
+++ cyrus-sasl-2.1.22/plugins/digestmd5_init.c	2010-08-31 14:11:33.662984700 +0200
@@ -20,7 +20,7 @@
 #include <sasl_digestmd5_plugin_decl.h>
 #endif
 
-#ifdef WIN32
+#if defined(WIN32) && !defined(STATIC_PLUGIN)
 BOOL APIENTRY DllMain( HANDLE hModule, 
                        DWORD  ul_reason_for_call, 
                        LPVOID lpReserved
@@ -36,8 +36,7 @@
     }
     return TRUE;
 }
-#endif
 
 SASL_CLIENT_PLUG_INIT( digestmd5 )
 SASL_SERVER_PLUG_INIT( digestmd5 )
-
+#endif
diff -Nru cyrus-sasl-2.1.22.orig/plugins/login_init.c cyrus-sasl-2.1.22/plugins/login_init.c
--- cyrus-sasl-2.1.22.orig/plugins/login_init.c	2006-05-19 16:49:30.000000000 +0200
+++ cyrus-sasl-2.1.22/plugins/login_init.c	2010-08-31 14:12:24.362884600 +0200
@@ -20,7 +20,7 @@
 #include <sasl_login_plugin_decl.h>
 #endif
 
-#ifdef WIN32
+#if defined(WIN32) && !defined(STATIC_PLUGIN)
 BOOL APIENTRY DllMain( HANDLE hModule, 
                        DWORD  ul_reason_for_call, 
                        LPVOID lpReserved
@@ -36,8 +36,7 @@
     }
     return TRUE;
 }
-#endif
 
 SASL_CLIENT_PLUG_INIT( login )
 SASL_SERVER_PLUG_INIT( login )
-
+#endif
diff -Nru cyrus-sasl-2.1.22.orig/plugins/plain_init.c cyrus-sasl-2.1.22/plugins/plain_init.c
--- cyrus-sasl-2.1.22.orig/plugins/plain_init.c	2006-05-19 16:49:30.000000000 +0200
+++ cyrus-sasl-2.1.22/plugins/plain_init.c	2010-08-31 14:12:09.585039300 +0200
@@ -20,7 +20,7 @@
 #include <sasl_plain_plugin_decl.h>
 #endif
 
-#ifdef WIN32
+#if defined(WIN32) && !defined(STATIC_PLUGIN)
 BOOL APIENTRY DllMain( HANDLE hModule, 
                        DWORD  ul_reason_for_call, 
                        LPVOID lpReserved
@@ -36,8 +36,7 @@
     }
     return TRUE;
 }
-#endif
 
 SASL_CLIENT_PLUG_INIT( plain )
 SASL_SERVER_PLUG_INIT( plain )
-
+#endif
diff -Nru cyrus-sasl-2.1.22.orig/plugins/plugin_common.c cyrus-sasl-2.1.22/plugins/plugin_common.c
--- cyrus-sasl-2.1.22.orig/plugins/plugin_common.c	Wed Jun 23 18:43:37 2004
+++ cyrus-sasl-2.1.22/plugins/plugin_common.c	2010-08-31 11:12:40.213066500 +0200
@@ -819,7 +819,7 @@
 
 void _plug_snprintf_os_info (char * osbuf, int osbuf_len)
 {
-#ifdef WIN32
+#if defined(WIN32) && !defined(_WIN32_WCE)
     OSVERSIONINFOEX versioninfo;
     char *sysname;
 
@@ -905,7 +905,45 @@
 
 SKIP_OS_INFO:
     ;
+#elif defined(_WIN32_WCE)
 
+    OSVERSIONINFO version;
+    char *sysname;
+    
+      version.dwOSVersionInfoSize = sizeof (OSVERSIONINFO);
+    if (!GetVersionEx (&version))
+    {
+        *osbuf = 0;
+        return;
+    }
+    
+     switch (version.dwPlatformId) {
+		case VER_PLATFORM_WIN32s:
+		    sysname = "Windows 3.1";
+		    break;
+		case VER_PLATFORM_WIN32_WINDOWS:
+            if (version.dwMinorVersion == 0)
+                sysname = "Windows 95";
+            else
+                sysname = "Windows 98";
+		    break;
+		case VER_PLATFORM_WIN32_NT:
+		    sysname = "Windows NT";
+		    break;
+        case VER_PLATFORM_WIN32_CE:
+		    sysname = "Windows CE";
+		    break;
+		default:
+		    sysname = "Unknown Windows 9X/ME series";
+		    break;
+	    }
+    
+    snprintf(osbuf, osbuf_len,
+	     "%s %s (Build %u)",
+	     sysname,
+	     version.szCSDVersion,
+	     version.dwBuildNumber
+	     );
 #else /* !WIN32 */
     struct utsname os;
 
diff -Nru cyrus-sasl-2.1.22.orig/utils/pluginviewer.c cyrus-sasl-2.1.22/utils/pluginviewer.c
--- cyrus-sasl-2.1.22.orig/utils/pluginviewer.c	Wed May 17 16:46:17 2006
+++ cyrus-sasl-2.1.22/utils/pluginviewer.c	2010-08-31 11:57:28.282815300 +0200
@@ -49,9 +49,15 @@
 #include <stdlib.h>
 #ifdef WIN32
 # include <winsock.h>
+# ifndef LIBSASL_STATIC
 __declspec(dllimport) char *optarg;
 __declspec(dllimport) int optind;
 __declspec(dllimport) int getsubopt(char **optionp, const char * const *tokens, char **valuep);
+#else
+extern char *optarg;
+extern int optind;
+extern int getsubopt(char **optionp, const char * const *tokens, char **valuep);
+# endif /* LIBSASL_STATIC */
 #else  /* WIN32 */
 # include <netinet/in.h>
 #endif /* WIN32 */
@@ -84,6 +90,85 @@
 #include <unistd.h>
 #endif
 
+#if !defined(HAVE_GETOPT_H) && !defined(LIBSASL_STATIC)
+
+int	opterr = 1,		/* if error message should be printed */
+    optind = 1,		/* index into parent argv vector */
+    optopt,			/* character checked for validity */
+    optreset;		/* reset getopt */
+char	*optarg;		/* argument associated with option */
+
+#define	BADCH	(int)'?'
+#define	BADARG	(int)':'
+#define	EMSG	""
+
+/*
+ * getopt --
+ *	Parse argc/argv argument vector.
+ */
+int
+getopt(nargc, nargv, ostr)
+	int nargc;
+	char * const *nargv;
+	const char *ostr;
+{
+	static char *place = EMSG;		/* option letter processing */
+	char *oli;				/* option letter list index */
+
+	if (optreset || !*place) {		/* update scanning pointer */
+		optreset = 0;
+		if (optind >= nargc || *(place = nargv[optind]) != '-') {
+			place = EMSG;
+			return (-1);
+		}
+		if (place[1] && *++place == '-') {	/* found "--" */
+			++optind;
+			place = EMSG;
+			return (-1);
+		}
+	}					/* option letter okay? */
+	if ((optopt = (int)*place++) == (int)':' ||
+	    !(oli = strchr(ostr, optopt))) {
+		/*
+		 * if the user didn't specify '-' as an option,
+		 * assume it means -1.
+		 */
+		if (optopt == (int)'-')
+			return (-1);
+		if (!*place)
+			++optind;
+		if (opterr && *ostr != ':')
+			(void)fprintf(stderr,
+			    "%s: illegal option -- %c\n", nargv[0], optopt);
+		return (BADCH);
+	}
+	if (*++oli != ':') {			/* don't need argument */
+		optarg = NULL;
+		if (!*place)
+			++optind;
+	}
+	else {					/* need an argument */
+		if (*place)			/* no white space */
+			optarg = place;
+		else if (nargc <= ++optind) {	/* no arg */
+			place = EMSG;
+			if (*ostr == ':')
+				return (BADARG);
+			if (opterr)
+				(void)fprintf(stderr,
+				    "%s: option requires an argument -- %c\n",
+				    nargv[0], optopt);
+			return (BADCH);
+		}
+	 	else				/* white space */
+			optarg = nargv[optind];
+		place = EMSG;
+		++optind;
+	}
+	return (optopt);			/* dump back option letter */
+}
+#endif
+
 #ifndef HAVE_GETSUBOPT
 int getsubopt(char **optionp, const char * const *tokens, char **valuep);
 #endif
