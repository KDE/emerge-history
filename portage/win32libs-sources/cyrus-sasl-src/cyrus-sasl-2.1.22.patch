diff -u -r -N cyrus-sasl-2.1.22-orig/CMakeLists.txt cyrus-sasl-2.1.22/CMakeLists.txt
--- cyrus-sasl-2.1.22-orig/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ cyrus-sasl-2.1.22/CMakeLists.txt	2009-04-11 16:17:44.515625000 +0200
@@ -0,0 +1,166 @@
+project(cyrus-sasl)
+cmake_minimum_required(VERSION 2.6.2)
+set(PACKAGE "cyrus-sasl")
+set(VERSION "2.1.22")
+set(PLUGINDESTINATION lib/sasl2)
+set(PLUGINDIR ${CMAKE_INSTALL_PREFIX}/${PLUGINDESTINATION})
+set(CONFIGDIR ${CMAKE_INSTALL_PREFIX}/${PLUGINDESTINATION})
+
+include(CheckIncludeFiles)
+check_include_files(sys/socket.h   HAVE_SYS_SOCKET_H)
+check_include_files(syslog.h       HAVE_SYSLOG)
+check_include_files(time.h         HAVE_TIME_H)
+check_include_files(unistd.h       HAVE_UNISTD_H)
+
+include(CheckFunctionExists)
+check_function_exists(getaddrinfo       HAVE_GETADDRINFO)
+check_function_exists(getnameinfo       HAVE_GETNAMEINFO)
+#check_function_exists(getpid            HAVE_GETPID)
+check_function_exists(gettimeofday      HAVE_GETTIMEOFDAY)
+check_include_files(snprintf       HAVE_SNPRINTF)
+if(WIN32)
+  set(HAVE_SNPRINTF 1)
+endif(WIN32)
+
+include(CheckSymbolExists)
+check_symbol_exists(SOCKLENT_T        "sys/socket.h"               SOCKLENT_T)
+
+# TODO: HAVE_SOCKADDR_SA_LEN
+
+if(WIN32)
+  add_definitions(-DWIN32)
+  add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
+  add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)
+  set(HIER_DELIMITER '\\\\')
+else(WIN32)
+  set(HIER_DELIMITER '/')
+endif(WIN32)
+
+if(CMAKE_COMPILER_IS_GNUCC)
+  set(HAVE___ATTRIBUTE__ 1)
+endif(CMAKE_COMPILER_IS_GNUCC)
+
+configure_file(${CMAKE_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)
+
+if(WIN32)
+set(additional_link_libs ws2_32)
+endif(WIN32)
+
+set(sasl_SRCS
+  lib/auxprop.c
+  lib/canonusr.c
+  lib/checkpw.c
+  lib/client.c
+  lib/common.c
+  lib/config.c
+  lib/external.c
+  lib/getaddrinfo.c
+  lib/getnameinfo.c
+  lib/getsubopt.c
+  lib/md5.c
+  lib/saslutil.c
+  lib/server.c
+  lib/seterror.c
+)
+if(NOT HAVE_SNPRINTF)
+  list(APPEND sasl_SRCS lib/snprintf.c)
+endif(NOT HAVE_SNPRINTF)
+if(WIN32)
+  list(APPEND sasl_SRCS lib/windlopen.c)
+else(WIN32)
+  list(APPEND sasl_SRCS lib/dlopen.c)
+endif(WIN32)
+
+set(sasl_HDRS
+  lib/saslint.h
+  lib/staticopen.h
+)
+set(sasl_inc_HDRS
+  include/exits.h
+  include/gai.h
+  include/hmac-md5.h
+  include/md5.h
+  include/md5global.h
+  include/prop.h
+  include/sasl.h
+  include/saslplug.h
+  include/saslutil.h
+)
+
+set(plugin_SRCS
+  plugins/plugin_common.c
+  plugins/plugin_common.h
+)
+
+include_directories(
+  ${CMAKE_SOURCE_DIR}/include
+  ${CMAKE_CURRENT_BINARY_DIR}
+)
+add_library(sasl2 SHARED ${sasl_SRCS} ${sasl_HDRS} ${sasl_inc_HDRS} ${plugin_SRCS})
+set_target_properties(sasl2 PROPERTIES DEFINE_SYMBOL LIBSASL_EXPORTS)
+target_link_libraries(sasl2 ${additional_link_libs})
+install(TARGETS sasl2 RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)
+install(FILES ${sasl_inc_HDRS} DESTINATION include/sasl)
+
+#
+# ANONYMOUS
+#
+set(anonymous_SRCS
+  plugins/anonymous.c
+  plugins/anonymous_init.c
+)
+add_library(saslANONYMOUS MODULE ${anonymous_SRCS} ${plugin_SRCS})
+target_link_libraries(saslANONYMOUS sasl2 ${additional_link_libs})
+install(TARGETS saslANONYMOUS DESTINATION ${PLUGINDESTINATION})
+
+#
+# LOGIN
+#
+set(login_SRCS
+  plugins/login.c
+  plugins/login_init.c
+)
+add_library(saslLOGIN MODULE ${login_SRCS} ${plugin_SRCS})
+target_link_libraries(saslLOGIN sasl2 ${additional_link_libs})
+install(TARGETS saslLOGIN DESTINATION ${PLUGINDESTINATION})
+
+#
+# PLAIN
+#
+set(plain_SRCS
+  plugins/plain.c
+  plugins/plain_init.c
+)
+add_library(saslPLAIN MODULE ${plain_SRCS} ${plugin_SRCS})
+target_link_libraries(saslPLAIN sasl2 ${additional_link_libs})
+install(TARGETS saslPLAIN DESTINATION ${PLUGINDESTINATION})
+
+#
+# CRAMMD5
+#
+set(crammd5_SRCS
+  plugins/cram.c
+  plugins/crammd5_init.c
+)
+add_library(saslCRAMMD5 MODULE ${crammd5_SRCS} ${plugin_SRCS})
+target_link_libraries(saslCRAMMD5 sasl2 ${additional_link_libs})
+install(TARGETS saslCRAMMD5 DESTINATION ${PLUGINDESTINATION})
+
+#
+# DIGESTMD5
+#
+set(digestmd5_SRCS
+  plugins/digestmd5.c
+  plugins/digestmd5_init.c
+)
+add_library(saslDIGESTMD5 MODULE ${digestmd5_SRCS} ${plugin_SRCS})
+target_link_libraries(saslDIGESTMD5 sasl2 ${additional_link_libs})
+install(TARGETS saslDIGESTMD5 DESTINATION ${PLUGINDESTINATION})
+
+
+#
+# Pluginviewer
+#
+add_executable(sasl2_pluginviewer utils/pluginviewer.c)
+target_link_libraries(sasl2_pluginviewer sasl2 ${additional_link_libs})
+install(TARGETS sasl2_pluginviewer DESTINATION bin)
diff -u -r -N cyrus-sasl-2.1.22-orig/config.h.cmake cyrus-sasl-2.1.22/config.h.cmake
--- cyrus-sasl-2.1.22-orig/config.h.cmake	1970-01-01 01:00:00.000000000 +0100
+++ cyrus-sasl-2.1.22/config.h.cmake	2009-04-11 15:24:44.546875000 +0200
@@ -0,0 +1,108 @@
+#ifndef CONFIG_H
+#define CONFIG_H
+/* Name of package */
+#cmakedefine PACKAGE "@PACKAGE@"
+
+#cmakedefine VERSION "@VERSION@"
+
+/* Do we have a getnameinfo() function? */
+#cmakedefine HAVE_GETNAMEINFO 1
+
+/* Do we have a getaddrinfo() function? */
+#cmakedefine HAVE_GETADDRINFO 1
+
+/* Do we have a getpid() function? */
+#cmakedefine HAVE_GETPID 1
+
+/* Do we have a gettimeofday() function? */
+#cmakedefine HAVE_GETTIMEOFDAY 1
+
+/* Do we have a gettimeofday() function? */
+#cmakedefine HAVE_SNPRINTF 1
+
+/* Do we have a socklen_t? */
+#undef HAVE_SOCKLEN_T
+#ifndef HAVE_SOCKLEN_T
+typedef unsigned int socklen_t;
+#endif /* HAVE_SOCKLEN_T */
+
+/* define if your compiler has __attribute__ */
+#cmakedefine HAVE___ATTRIBUTE__ 1
+#ifndef HAVE___ATTRIBUTE__
+/* Can't use attributes... */
+#define __attribute__(foo)
+#endif
+
+#cmakedefine HAVE_SYS_SOCKET_H 1
+#ifdef HAVE_SYS_SOCKET_H
+  #include <sys/socket.h>
+#endif
+
+#cmakedefine HAVE_SYSLOG 1
+
+#cmakedefine HAVE_TIME_H 1
+
+#cmakedefine HAVE_UNISTD_H 1
+
+#include <stdlib.h>
+#include <string.h>
+#include <sys/types.h>
+
+/* Defined in RFC 1035. max strlen is only 253 due to length bytes. */
+#ifndef MAXHOSTNAMELEN
+# define MAXHOSTNAMELEN  255
+#endif
+
+/* Runtime plugin location */
+#cmakedefine PLUGINDIR "@PLUGINDIR@"
+#cmakedefine CONFIGDIR "@CONFIGDIR@"
+
+#ifndef HAVE_GETADDRINFO
+#define	getaddrinfo	sasl_getaddrinfo
+#define	freeaddrinfo	sasl_freeaddrinfo
+#define	gai_strerror	sasl_gai_strerror
+#endif
+
+#ifndef HAVE_GETNAMEINFO
+#define	getnameinfo	sasl_getnameinfo
+#endif
+
+#if !defined(HAVE_GETNAMEINFO) || !defined(HAVE_GETADDRINFO)
+#include "gai.h"
+#endif
+
+#ifndef AI_NUMERICHOST   /* support glibc 2.0.x */
+#define AI_NUMERICHOST  4
+#define NI_NUMERICHOST  2
+#define NI_NAMEREQD     4
+#define NI_NUMERICSERV  8
+#endif
+
+#ifndef WIN32
+# include <netdb.h>
+# ifdef HAVE_SYS_PARAM_H
+#  include <sys/param.h>
+# endif
+#else /* WIN32 */
+# include <winsock2.h>
+# ifndef strncasecmp
+#  define strncasecmp strnicmp
+# endif
+# ifndef strcasecmp
+#  define strcasecmp stricmp
+# endif
+# ifndef snprintf
+#  define snprintf _snprintf
+# endif
+
+/* Registry key that contains the locations of the plugins */
+# define SASL_ROOT_KEY "SOFTWARE\\Carnegie Mellon\\Project Cyrus\\SASL Library"
+# define SASL_PLUGIN_PATH_ATTR "SearchPath"
+# define SASL_CONF_PATH_ATTR "ConfFile"
+
+#endif /* WIN32 */
+
+#ifndef HIER_DELIMITER
+# define HIER_DELIMITER @HIER_DELIMITER@
+#endif
+#endif
diff -u -r -N cyrus-sasl-2.1.22-orig/include/gai.h cyrus-sasl-2.1.22/include/gai.h
--- cyrus-sasl-2.1.22-orig/include/gai.h	2006-04-10 15:36:20.000000000 +0200
+++ cyrus-sasl-2.1.22/include/gai.h	2009-04-11 15:24:44.593750000 +0200
@@ -54,6 +54,8 @@
 #ifndef _GAI_H_
 #define _GAI_H_
 
+#include "prop.h"
+
 #ifndef NI_MAXHOST
 #define	NI_MAXHOST	1025
 #endif
@@ -90,15 +92,15 @@
 #endif
 
 #ifndef HAVE_GETNAMEINFO
-int	getnameinfo(const struct sockaddr *, socklen_t, char *,
+LIBSASL_API int	getnameinfo(const struct sockaddr *, socklen_t, char *,
 		    size_t, char *, size_t, int);
 #endif
 
 #ifndef HAVE_GETADDRINFO
-int	getaddrinfo(const char *, const char *,
+LIBSASL_API int	getaddrinfo(const char *, const char *,
 		    const struct addrinfo *, struct addrinfo **);
-void	freeaddrinfo(struct addrinfo *);
-char	*gai_strerror(int);
+LIBSASL_API void	freeaddrinfo(struct addrinfo *);
+LIBSASL_API char	*gai_strerror(int);
 #endif
 
 #ifdef __cplusplus
diff -u -r -N cyrus-sasl-2.1.22-orig/lib/saslutil.c cyrus-sasl-2.1.22/lib/saslutil.c
--- cyrus-sasl-2.1.22-orig/lib/saslutil.c	2006-03-13 19:26:36.000000000 +0100
+++ cyrus-sasl-2.1.22/lib/saslutil.c	2009-06-21 23:46:30.391000000 +0200
@@ -469,7 +469,7 @@
     memset(buf, 0, len);
 }
 
-#ifdef WIN32
+#ifdef _MSC_VER
 /***************************************************************************** 
  * 
  *  MODULE NAME : GETOPT.C 
diff -u -r -N cyrus-sasl-2.1.22-orig/utils/pluginviewer.c cyrus-sasl-2.1.22/utils/pluginviewer.c
--- cyrus-sasl-2.1.22-orig/utils/pluginviewer.c	2006-05-17 18:46:17.000000000 +0200
+++ cyrus-sasl-2.1.22/utils/pluginviewer.c	2009-04-11 16:22:20.046875000 +0200
@@ -84,6 +84,85 @@
 #include <unistd.h>
 #endif
 
+#ifndef HAVE_GETOPT_H
+
+int	opterr = 1,		/* if error message should be printed */
+    optind = 1,		/* index into parent argv vector */
+    optopt,			/* character checked for validity */
+    optreset;		/* reset getopt */
+char	*optarg;		/* argument associated with option */
+
+#define	BADCH	(int)'?'
+#define	BADARG	(int)':'
+#define	EMSG	""
+
+/*
+ * getopt --
+ *	Parse argc/argv argument vector.
+ */
+int
+getopt(nargc, nargv, ostr)
+	int nargc;
+	char * const *nargv;
+	const char *ostr;
+{
+	static char *place = EMSG;		/* option letter processing */
+	char *oli;				/* option letter list index */
+
+	if (optreset || !*place) {		/* update scanning pointer */
+		optreset = 0;
+		if (optind >= nargc || *(place = nargv[optind]) != '-') {
+			place = EMSG;
+			return (-1);
+		}
+		if (place[1] && *++place == '-') {	/* found "--" */
+			++optind;
+			place = EMSG;
+			return (-1);
+		}
+	}					/* option letter okay? */
+	if ((optopt = (int)*place++) == (int)':' ||
+	    !(oli = strchr(ostr, optopt))) {
+		/*
+		 * if the user didn't specify '-' as an option,
+		 * assume it means -1.
+		 */
+		if (optopt == (int)'-')
+			return (-1);
+		if (!*place)
+			++optind;
+		if (opterr && *ostr != ':')
+			(void)fprintf(stderr,
+			    "%s: illegal option -- %c\n", nargv[0], optopt);
+		return (BADCH);
+	}
+	if (*++oli != ':') {			/* don't need argument */
+		optarg = NULL;
+		if (!*place)
+			++optind;
+	}
+	else {					/* need an argument */
+		if (*place)			/* no white space */
+			optarg = place;
+		else if (nargc <= ++optind) {	/* no arg */
+			place = EMSG;
+			if (*ostr == ':')
+				return (BADARG);
+			if (opterr)
+				(void)fprintf(stderr,
+				    "%s: option requires an argument -- %c\n",
+				    nargv[0], optopt);
+			return (BADCH);
+		}
+	 	else				/* white space */
+			optarg = nargv[optind];
+		place = EMSG;
+		++optind;
+	}
+	return (optopt);			/* dump back option letter */
+}
+#endif
+
 #ifndef HAVE_GETSUBOPT
 int getsubopt(char **optionp, const char * const *tokens, char **valuep);
 #endif
