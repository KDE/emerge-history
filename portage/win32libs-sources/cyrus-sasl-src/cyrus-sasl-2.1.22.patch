diff -Nru cyrus-sasl-2.1.22.orig/CMakeLists.txt cyrus-sasl-2.1.22/CMakeLists.txt
--- cyrus-sasl-2.1.22.orig/CMakeLists.txt	Thu Jan  1 00:00:00 1970
+++ cyrus-sasl-2.1.22/CMakeLists.txt	Mon Jul  5 15:54:54 2010
@@ -0,0 +1,179 @@
+project(cyrus-sasl)
+cmake_minimum_required(VERSION 2.6.2)
+set(PACKAGE "cyrus-sasl")
+set(VERSION "2.1.22")
+set(PLUGINDESTINATION lib/sasl2)
+set(PLUGINDIR ${CMAKE_INSTALL_PREFIX}/${PLUGINDESTINATION})
+set(CONFIGDIR ${CMAKE_INSTALL_PREFIX}/${PLUGINDESTINATION})
+
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules)
+
+if(WINCE)
+    find_package(Wcecompat REQUIRED)
+    include_directories(${WCECOMPAT_INCLUDE_DIR})
+    set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${WCECOMPAT_INCLUDE_DIR})
+    set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} ${WCECOMPAT_LIBRARIES})
+endif(WINCE)
+
+include(CheckIncludeFiles)
+check_include_files(sys/socket.h   HAVE_SYS_SOCKET_H)
+check_include_files(syslog.h       HAVE_SYSLOG)
+check_include_files(time.h         HAVE_TIME_H)
+check_include_files(unistd.h       HAVE_UNISTD_H)
+
+include(CheckFunctionExists)
+check_function_exists(getaddrinfo       HAVE_GETADDRINFO)
+check_function_exists(getnameinfo       HAVE_GETNAMEINFO)
+#check_function_exists(getpid            HAVE_GETPID)
+check_function_exists(gettimeofday      HAVE_GETTIMEOFDAY)
+check_include_files(snprintf       HAVE_SNPRINTF)
+if(WIN32)
+  set(HAVE_SNPRINTF 1)
+endif(WIN32)
+
+include(CheckSymbolExists)
+check_symbol_exists(SOCKLENT_T        "sys/socket.h"               SOCKLENT_T)
+
+# TODO: HAVE_SOCKADDR_SA_LEN
+
+if(WIN32)
+  add_definitions(-DWIN32)
+  add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
+  add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)
+  set(HIER_DELIMITER '\\\\')
+else(WIN32)
+  set(HIER_DELIMITER '/')
+endif(WIN32)
+
+if(CMAKE_COMPILER_IS_GNUCC)
+  set(HAVE___ATTRIBUTE__ 1)
+endif(CMAKE_COMPILER_IS_GNUCC)
+
+configure_file(${CMAKE_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)
+
+if(WIN32 AND NOT WINCE)
+set(additional_link_libs ws2_32)
+endif(WIN32 AND NOT WINCE)
+
+if(WINCE)
+set(additional_link_libs ws2 ${WCECOMPAT_LIBRARIES})
+endif(WINCE)
+
+set(sasl_SRCS
+  lib/auxprop.c
+  lib/canonusr.c
+  lib/checkpw.c
+  lib/client.c
+  lib/common.c
+  lib/config.c
+  lib/external.c
+  lib/getaddrinfo.c
+  lib/getnameinfo.c
+  lib/getsubopt.c
+  lib/md5.c
+  lib/saslutil.c
+  lib/server.c
+  lib/seterror.c
+)
+if(NOT HAVE_SNPRINTF)
+  list(APPEND sasl_SRCS lib/snprintf.c)
+endif(NOT HAVE_SNPRINTF)
+if(WIN32)
+  list(APPEND sasl_SRCS lib/windlopen.c)
+else(WIN32)
+  list(APPEND sasl_SRCS lib/dlopen.c)
+endif(WIN32)
+
+set(sasl_HDRS
+  lib/saslint.h
+  lib/staticopen.h
+)
+set(sasl_inc_HDRS
+  include/exits.h
+  include/gai.h
+  include/hmac-md5.h
+  include/md5.h
+  include/md5global.h
+  include/prop.h
+  include/sasl.h
+  include/saslplug.h
+  include/saslutil.h
+)
+
+set(plugin_SRCS
+  plugins/plugin_common.c
+  plugins/plugin_common.h
+)
+
+include_directories(
+  ${CMAKE_SOURCE_DIR}/include
+  ${CMAKE_CURRENT_BINARY_DIR}
+)
+add_library(sasl2 SHARED ${sasl_SRCS} ${sasl_HDRS} ${sasl_inc_HDRS} ${plugin_SRCS})
+set_target_properties(sasl2 PROPERTIES DEFINE_SYMBOL LIBSASL_EXPORTS)
+target_link_libraries(sasl2 ${additional_link_libs})
+install(TARGETS sasl2 RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)
+install(FILES ${sasl_inc_HDRS} DESTINATION include/sasl)
+
+#
+# ANONYMOUS
+#
+set(anonymous_SRCS
+  plugins/anonymous.c
+  plugins/anonymous_init.c
+)
+add_library(saslANONYMOUS MODULE ${anonymous_SRCS} ${plugin_SRCS})
+target_link_libraries(saslANONYMOUS sasl2 ${additional_link_libs})
+install(TARGETS saslANONYMOUS DESTINATION ${PLUGINDESTINATION})
+
+#
+# LOGIN
+#
+set(login_SRCS
+  plugins/login.c
+  plugins/login_init.c
+)
+add_library(saslLOGIN MODULE ${login_SRCS} ${plugin_SRCS})
+target_link_libraries(saslLOGIN sasl2 ${additional_link_libs})
+install(TARGETS saslLOGIN DESTINATION ${PLUGINDESTINATION})
+
+#
+# PLAIN
+#
+set(plain_SRCS
+  plugins/plain.c
+  plugins/plain_init.c
+)
+add_library(saslPLAIN MODULE ${plain_SRCS} ${plugin_SRCS})
+target_link_libraries(saslPLAIN sasl2 ${additional_link_libs})
+install(TARGETS saslPLAIN DESTINATION ${PLUGINDESTINATION})
+
+#
+# CRAMMD5
+#
+set(crammd5_SRCS
+  plugins/cram.c
+  plugins/crammd5_init.c
+)
+add_library(saslCRAMMD5 MODULE ${crammd5_SRCS} ${plugin_SRCS})
+target_link_libraries(saslCRAMMD5 sasl2 ${additional_link_libs})
+install(TARGETS saslCRAMMD5 DESTINATION ${PLUGINDESTINATION})
+
+#
+# DIGESTMD5
+#
+set(digestmd5_SRCS
+  plugins/digestmd5.c
+  plugins/digestmd5_init.c
+)
+add_library(saslDIGESTMD5 MODULE ${digestmd5_SRCS} ${plugin_SRCS})
+target_link_libraries(saslDIGESTMD5 sasl2 ${additional_link_libs})
+install(TARGETS saslDIGESTMD5 DESTINATION ${PLUGINDESTINATION})
+
+
+#
+# Pluginviewer
+#
+add_executable(sasl2_pluginviewer utils/pluginviewer.c)
+target_link_libraries(sasl2_pluginviewer sasl2 ${additional_link_libs})
+install(TARGETS sasl2_pluginviewer DESTINATION bin)
diff -Nru cyrus-sasl-2.1.22.orig/cmake/modules/FindWcecompat.cmake cyrus-sasl-2.1.22/cmake/modules/FindWcecompat.cmake
--- cyrus-sasl-2.1.22.orig/cmake/modules/FindWcecompat.cmake	Thu Jan  1 00:00:00 1970
+++ cyrus-sasl-2.1.22/cmake/modules/FindWcecompat.cmake	Mon Jul  5 15:05:47 2010
@@ -0,0 +1,33 @@
+# Try to find Wcecompat functionality
+# Once done this will define
+#
+#  WCECOMPAT_FOUND - system has Wcecompat
+#  WCECOMPAT_INCLUDE_DIR - Wcecompat include directory
+#  WCECOMPAT_LIBRARIES - Libraries needed to use Wcecompat
+#
+# Copyright (c) 2010, Andreas Holzammer, <andy@kdab.com>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+
+if(WCECOMPAT_INCLUDE_DIR AND WCECOMPAT_LIB_FOUND)
+  set(Wcecompat_FIND_QUIETLY TRUE)
+endif(WCECOMPAT_INCLUDE_DIR AND WCECOMPAT_LIB_FOUND)
+
+find_path(WCECOMPAT_INCLUDE_DIR errno.h PATH_SUFFIXES wcecompat)
+
+set(WCECOMPAT_LIB_FOUND FALSE)
+
+if(WCECOMPAT_INCLUDE_DIR)
+    find_library(WCECOMPAT_LIBRARIES NAMES wcecompat wcecompatex )
+    if(WCECOMPAT_LIBRARIES)
+      set(WCECOMPAT_LIB_FOUND TRUE)
+    endif(WCECOMPAT_LIBRARIES)
+endif(WCECOMPAT_INCLUDE_DIR)
+
+# I have no idea what this is about, but it seems to be used quite often, so I add this here
+set(WCECOMPAT_CONST const)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(Wcecompat  DEFAULT_MSG  WCECOMPAT_LIBRARIES  WCECOMPAT_LIB_FOUND)
+
+mark_as_advanced(WCECOMPAT_INCLUDE_DIR  WCECOMPAT_LIBRARIES  WCECOMPAT_CONST  WCECOMPAT_LIB_FOUND)
diff -Nru cyrus-sasl-2.1.22.orig/config.h.cmake cyrus-sasl-2.1.22/config.h.cmake
--- cyrus-sasl-2.1.22.orig/config.h.cmake	Thu Jan  1 00:00:00 1970
+++ cyrus-sasl-2.1.22/config.h.cmake	Mon Jul  5 15:14:01 2010
@@ -0,0 +1,108 @@
+#ifndef CONFIG_H
+#define CONFIG_H
+/* Name of package */
+#cmakedefine PACKAGE "@PACKAGE@"
+
+#cmakedefine VERSION "@VERSION@"
+
+/* Do we have a getnameinfo() function? */
+#cmakedefine HAVE_GETNAMEINFO 1
+
+/* Do we have a getaddrinfo() function? */
+#cmakedefine HAVE_GETADDRINFO 1
+
+/* Do we have a getpid() function? */
+#cmakedefine HAVE_GETPID 1
+
+/* Do we have a gettimeofday() function? */
+#cmakedefine HAVE_GETTIMEOFDAY 1
+
+/* Do we have a gettimeofday() function? */
+#cmakedefine HAVE_SNPRINTF 1
+
+/* Do we have a socklen_t? */
+#undef HAVE_SOCKLEN_T
+#ifndef HAVE_SOCKLEN_T
+typedef unsigned int socklen_t;
+#endif /* HAVE_SOCKLEN_T */
+
+/* define if your compiler has __attribute__ */
+#cmakedefine HAVE___ATTRIBUTE__ 1
+#ifndef HAVE___ATTRIBUTE__
+/* Can't use attributes... */
+#define __attribute__(foo)
+#endif
+
+#cmakedefine HAVE_SYS_SOCKET_H 1
+#ifdef HAVE_SYS_SOCKET_H
+  #include <sys/socket.h>
+#endif
+
+#cmakedefine HAVE_SYSLOG 1
+
+#cmakedefine HAVE_TIME_H 1
+
+#cmakedefine HAVE_UNISTD_H 1
+
+#include <stdlib.h>
+#include <string.h>
+#include <sys/types.h>
+
+/* Defined in RFC 1035. max strlen is only 253 due to length bytes. */
+#ifndef MAXHOSTNAMELEN
+# define MAXHOSTNAMELEN  255
+#endif
+
+/* Runtime plugin location */
+#cmakedefine PLUGINDIR "@PLUGINDIR@"
+#cmakedefine CONFIGDIR "@CONFIGDIR@"
+
+#ifndef HAVE_GETADDRINFO
+#define	getaddrinfo	sasl_getaddrinfo
+#define	freeaddrinfo	sasl_freeaddrinfo
+#define	gai_strerror	sasl_gai_strerror
+#endif
+
+#ifndef HAVE_GETNAMEINFO
+#define	getnameinfo	sasl_getnameinfo
+#endif
+
+#if !defined(HAVE_GETNAMEINFO) || !defined(HAVE_GETADDRINFO)
+#include "gai.h"
+#endif
+
+#ifndef AI_NUMERICHOST   /* support glibc 2.0.x */
+#define AI_NUMERICHOST  4
+#define NI_NUMERICHOST  2
+#define NI_NAMEREQD     4
+#define NI_NUMERICSERV  8
+#endif
+
+#ifndef WIN32
+# include <netdb.h>
+# ifdef HAVE_SYS_PARAM_H
+#  include <sys/param.h>
+# endif
+#else /* WIN32 */
+# include <winsock2.h>
+# ifndef strncasecmp
+#  define strncasecmp strnicmp
+# endif
+# ifndef strcasecmp
+#  define strcasecmp stricmp
+# endif
+# ifndef snprintf
+#  define snprintf _snprintf
+# endif
+
+/* Registry key that contains the locations of the plugins */
+# define SASL_ROOT_KEY "SOFTWARE\\Carnegie Mellon\\Project Cyrus\\SASL Library"
+# define SASL_PLUGIN_PATH_ATTR "SearchPath"
+# define SASL_CONF_PATH_ATTR "ConfFile"
+
+#endif /* WIN32 */
+
+#ifndef HIER_DELIMITER
+# define HIER_DELIMITER @HIER_DELIMITER@
+#endif
+#endif
diff -Nru cyrus-sasl-2.1.22.orig/include/gai.h cyrus-sasl-2.1.22/include/gai.h
--- cyrus-sasl-2.1.22.orig/include/gai.h	Mon Apr 10 13:36:20 2006
+++ cyrus-sasl-2.1.22/include/gai.h	Mon Jul  5 16:13:29 2010
@@ -54,6 +54,8 @@
 #ifndef _GAI_H_
 #define _GAI_H_
 
+#include "prop.h"
+
 #ifndef NI_MAXHOST
 #define	NI_MAXHOST	1025
 #endif
@@ -90,15 +92,15 @@
 #endif
 
 #ifndef HAVE_GETNAMEINFO
-int	getnameinfo(const struct sockaddr *, socklen_t, char *,
+LIBSASL_API int	getnameinfo(const struct sockaddr *, socklen_t, char *,
 		    size_t, char *, size_t, int);
 #endif
 
 #ifndef HAVE_GETADDRINFO
-int	getaddrinfo(const char *, const char *,
+LIBSASL_API int	getaddrinfo(const char *, const char *,
 		    const struct addrinfo *, struct addrinfo **);
-void	freeaddrinfo(struct addrinfo *);
-char	*gai_strerror(int);
+LIBSASL_API void	freeaddrinfo(struct addrinfo *);
+LIBSASL_API char	*gai_strerror(int);
 #endif
 
 #ifdef __cplusplus
diff -Nru cyrus-sasl-2.1.22.orig/lib/common.c cyrus-sasl-2.1.22/lib/common.c
--- cyrus-sasl-2.1.22.orig/lib/common.c	Wed Apr 19 18:39:59 2006
+++ cyrus-sasl-2.1.22/lib/common.c	Mon Jul  5 16:12:13 2010
@@ -1435,6 +1435,7 @@
 #ifdef WIN32
     /* for win32, try using the GetUserName standard call */
     {
+#ifndef _WIN32_WCE
 	DWORD i;
 	BOOL rval;
 	static char sender[128];
@@ -1446,6 +1447,11 @@
 		if (len) *len = strlen(sender);
 		return SASL_OK;
 	}
+#else
+    static char *sender = "wince";
+    *result = sender;
+    return SASL_OK;
+#endif
     }
 #endif /* WIN32 */
     return SASL_FAIL;
@@ -2399,6 +2405,8 @@
 		     &cbData);
 
     switch (ValueType) {
+// There are no enviroment variables under wince
+#ifndef _WIN32_WCE
     case REG_EXPAND_SZ:
         /* : A random starting guess */
         cbExpandedData = cbData + 1024;
@@ -2447,7 +2455,7 @@
         ExpandedValueData = NULL;
 
         break;
-
+#endif
     case REG_MULTI_SZ:
         tmp = ValueData;
 
diff -Nru cyrus-sasl-2.1.22.orig/lib/saslutil.c cyrus-sasl-2.1.22/lib/saslutil.c
--- cyrus-sasl-2.1.22.orig/lib/saslutil.c	Mon Mar 13 18:26:36 2006
+++ cyrus-sasl-2.1.22/lib/saslutil.c	Mon Jul  5 16:13:56 2010
@@ -469,7 +469,7 @@
     memset(buf, 0, len);
 }
 
-#ifdef WIN32
+#ifdef _MSC_VER
 /***************************************************************************** 
  * 
  *  MODULE NAME : GETOPT.C 
@@ -659,6 +659,8 @@
 	register c;
 	static char pbuf[PASSWORD_MAX];
 
+//There is no console under wince
+#ifndef _WIN32_WCE    
 	fprintf(stderr, "%s", prompt); (void) fflush(stderr);
 	for (p=pbuf; (c = _getch())!=13 && c!=EOF;) {
 		if (p < &pbuf[sizeof(pbuf)-1])
@@ -666,6 +668,9 @@
 	}
 	*p = '\0';
 	fprintf(stderr, "\n"); (void) fflush(stderr);
+#else
+    *pbuf = '\0';
+#endif    
 	return(pbuf);
 }
 
diff -Nru cyrus-sasl-2.1.22.orig/lib/windlopen.c cyrus-sasl-2.1.22/lib/windlopen.c
--- cyrus-sasl-2.1.22.orig/lib/windlopen.c	Mon Oct 20 15:19:59 2003
+++ cyrus-sasl-2.1.22/lib/windlopen.c	Mon Jul  5 15:34:42 2010
@@ -69,6 +69,10 @@
 		       const char *entryname,
 		       void **entry_point) 
 {
+#ifdef _WIN32_WCE
+    wchar_t *wentryname;
+    wentryname = wce_mbtowc(entryname);
+#endif
     if(entryname == NULL) {
 	_sasl_log(NULL, SASL_LOG_ERR,
 		  "no entryname in _sasl_locate_entry");
@@ -86,8 +90,13 @@
 		  "no entrypoint output pointer in _sasl_locate_entry");
 	return SASL_BADPARAM;
     }
-
+    
+#ifndef _WIN32_WCE
     *entry_point = GetProcAddress(library, entryname);
+#else
+    *entry_point = GetProcAddressW(library, wentryname);
+    free(wentryname);
+#endif
 
     if (*entry_point == NULL) {
 #if 0 /* This message appears to confuse people */
@@ -257,9 +266,12 @@
 	    }
 
 /* : Check that it is not a directory */
+/* It is not implemented in wince */
+#ifndef _WIN32_WCE
 	    if ((finddata.attrib & _A_SUBDIR) == _A_SUBDIR) {
 		continue;
 	    }
+#endif
 
 /* : Construct full name from prefix and name */
 
diff -Nru cyrus-sasl-2.1.22.orig/plugins/plugin_common.c cyrus-sasl-2.1.22/plugins/plugin_common.c
--- cyrus-sasl-2.1.22.orig/plugins/plugin_common.c	Wed Jun 23 18:43:37 2004
+++ cyrus-sasl-2.1.22/plugins/plugin_common.c	Mon Jul  5 15:52:41 2010
@@ -819,7 +819,7 @@
 
 void _plug_snprintf_os_info (char * osbuf, int osbuf_len)
 {
-#ifdef WIN32
+#if defined(WIN32) && !defined(_WIN32_WCE)
     OSVERSIONINFOEX versioninfo;
     char *sysname;
 
@@ -905,7 +905,45 @@
 
 SKIP_OS_INFO:
     ;
+#elif defined(_WIN32_WCE)
 
+    OSVERSIONINFO version;
+    char *sysname;
+    
+      version.dwOSVersionInfoSize = sizeof (OSVERSIONINFO);
+    if (!GetVersionEx (&version))
+    {
+        *osbuf = 0;
+        return;
+    }
+    
+     switch (version.dwPlatformId) {
+		case VER_PLATFORM_WIN32s:
+		    sysname = "Windows 3.1";
+		    break;
+		case VER_PLATFORM_WIN32_WINDOWS:
+            if (version.dwMinorVersion == 0)
+                sysname = "Windows 95";
+            else
+                sysname = "Windows 98";
+		    break;
+		case VER_PLATFORM_WIN32_NT:
+		    sysname = "Windows NT";
+		    break;
+        case VER_PLATFORM_WIN32_CE:
+		    sysname = "Windows CE";
+		    break;
+		default:
+		    sysname = "Unknown Windows 9X/ME series";
+		    break;
+	    }
+    
+    snprintf(osbuf, osbuf_len,
+	     "%s %s (Build %u)",
+	     sysname,
+	     version.szCSDVersion,
+	     version.dwBuildNumber
+	     );
 #else /* !WIN32 */
     struct utsname os;
 
diff -Nru cyrus-sasl-2.1.22.orig/utils/pluginviewer.c cyrus-sasl-2.1.22/utils/pluginviewer.c
--- cyrus-sasl-2.1.22.orig/utils/pluginviewer.c	Wed May 17 16:46:17 2006
+++ cyrus-sasl-2.1.22/utils/pluginviewer.c	Mon Jul  5 16:14:26 2010
@@ -84,6 +84,85 @@
 #include <unistd.h>
 #endif
 
+#ifndef HAVE_GETOPT_H
+
+int	opterr = 1,		/* if error message should be printed */
+    optind = 1,		/* index into parent argv vector */
+    optopt,			/* character checked for validity */
+    optreset;		/* reset getopt */
+char	*optarg;		/* argument associated with option */
+
+#define	BADCH	(int)'?'
+#define	BADARG	(int)':'
+#define	EMSG	""
+
+/*
+ * getopt --
+ *	Parse argc/argv argument vector.
+ */
+int
+getopt(nargc, nargv, ostr)
+	int nargc;
+	char * const *nargv;
+	const char *ostr;
+{
+	static char *place = EMSG;		/* option letter processing */
+	char *oli;				/* option letter list index */
+
+	if (optreset || !*place) {		/* update scanning pointer */
+		optreset = 0;
+		if (optind >= nargc || *(place = nargv[optind]) != '-') {
+			place = EMSG;
+			return (-1);
+		}
+		if (place[1] && *++place == '-') {	/* found "--" */
+			++optind;
+			place = EMSG;
+			return (-1);
+		}
+	}					/* option letter okay? */
+	if ((optopt = (int)*place++) == (int)':' ||
+	    !(oli = strchr(ostr, optopt))) {
+		/*
+		 * if the user didn't specify '-' as an option,
+		 * assume it means -1.
+		 */
+		if (optopt == (int)'-')
+			return (-1);
+		if (!*place)
+			++optind;
+		if (opterr && *ostr != ':')
+			(void)fprintf(stderr,
+			    "%s: illegal option -- %c\n", nargv[0], optopt);
+		return (BADCH);
+	}
+	if (*++oli != ':') {			/* don't need argument */
+		optarg = NULL;
+		if (!*place)
+			++optind;
+	}
+	else {					/* need an argument */
+		if (*place)			/* no white space */
+			optarg = place;
+		else if (nargc <= ++optind) {	/* no arg */
+			place = EMSG;
+			if (*ostr == ':')
+				return (BADARG);
+			if (opterr)
+				(void)fprintf(stderr,
+				    "%s: option requires an argument -- %c\n",
+				    nargv[0], optopt);
+			return (BADCH);
+		}
+	 	else				/* white space */
+			optarg = nargv[optind];
+		place = EMSG;
+		++optind;
+	}
+	return (optopt);			/* dump back option letter */
+}
+#endif
+
 #ifndef HAVE_GETSUBOPT
 int getsubopt(char **optionp, const char * const *tokens, char **valuep);
 #endif
