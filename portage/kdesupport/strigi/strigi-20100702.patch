Index: cmake/FindThreads.cmake
===================================================================
--- cmake/FindThreads.cmake
+++ cmake/FindThreads.cmake
@@ -0,0 +1,160 @@
+# - This module determines the thread library of the system.
+# The following variables are set
+#  CMAKE_THREAD_LIBS_INIT     - the thread library
+#  CMAKE_USE_SPROC_INIT       - are we using sproc?
+#  CMAKE_USE_WIN32_THREADS_INIT - using WIN32 threads?
+#  CMAKE_USE_PTHREADS_INIT    - are we using pthreads
+#  CMAKE_HP_PTHREADS_INIT     - are we using hp pthreads
+
+#=============================================================================
+# Copyright 2002-2009 Kitware, Inc.
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distributed this file outside of CMake, substitute the full
+#  License text for the above reference.)
+
+INCLUDE (CheckIncludeFiles)
+INCLUDE (CheckLibraryExists)
+SET(Threads_FOUND FALSE)
+
+# Do we have sproc?
+IF(CMAKE_SYSTEM MATCHES IRIX)
+  CHECK_INCLUDE_FILES("sys/types.h;sys/prctl.h"  CMAKE_HAVE_SPROC_H)
+ENDIF()
+
+IF(CMAKE_HAVE_SPROC_H)
+  # We have sproc
+  SET(CMAKE_USE_SPROC_INIT 1)
+ELSE()
+  # Do we have pthreads?
+  CHECK_INCLUDE_FILES("pthread.h" CMAKE_HAVE_PTHREAD_H)
+  IF(CMAKE_HAVE_PTHREAD_H)
+
+    #
+    # We have pthread.h
+    # Let's check for the library now.
+    #
+    SET(CMAKE_HAVE_THREADS_LIBRARY)
+    IF(NOT THREADS_HAVE_PTHREAD_ARG)
+
+      # Do we have -lpthreads
+      CHECK_LIBRARY_EXISTS(pthreads pthread_create "" CMAKE_HAVE_PTHREADS_CREATE)
+      IF(CMAKE_HAVE_PTHREADS_CREATE)
+        SET(CMAKE_THREAD_LIBS_INIT "-lpthreads")
+        SET(CMAKE_HAVE_THREADS_LIBRARY 1)
+        SET(Threads_FOUND TRUE)
+      ENDIF()
+
+      # Ok, how about -lpthread
+      CHECK_LIBRARY_EXISTS(pthread pthread_create "" CMAKE_HAVE_PTHREAD_CREATE)
+      IF(CMAKE_HAVE_PTHREAD_CREATE)
+        SET(CMAKE_THREAD_LIBS_INIT "-lpthread")
+        SET(Threads_FOUND TRUE)
+        SET(CMAKE_HAVE_THREADS_LIBRARY 1)
+      ENDIF()
+
+      IF(CMAKE_SYSTEM MATCHES "SunOS.*")
+        # On sun also check for -lthread
+        CHECK_LIBRARY_EXISTS(thread thr_create "" CMAKE_HAVE_THR_CREATE)
+        IF(CMAKE_HAVE_THR_CREATE)
+          SET(CMAKE_THREAD_LIBS_INIT "-lthread")
+          SET(CMAKE_HAVE_THREADS_LIBRARY 1)
+          SET(Threads_FOUND TRUE)
+        ENDIF()
+      ENDIF(CMAKE_SYSTEM MATCHES "SunOS.*")
+
+    ENDIF(NOT THREADS_HAVE_PTHREAD_ARG)
+
+    IF(NOT CMAKE_HAVE_THREADS_LIBRARY)
+      # If we did not found -lpthread, -lpthread, or -lthread, look for -pthread
+      IF("THREADS_HAVE_PTHREAD_ARG" MATCHES "^THREADS_HAVE_PTHREAD_ARG")
+        MESSAGE(STATUS "Check if compiler accepts -pthread")
+        TRY_RUN(THREADS_PTHREAD_ARG THREADS_HAVE_PTHREAD_ARG
+          ${CMAKE_BINARY_DIR}
+          ${CMAKE_ROOT}/Modules/CheckForPthreads.c
+          CMAKE_FLAGS -DLINK_LIBRARIES:STRING=-pthread
+          COMPILE_OUTPUT_VARIABLE OUTPUT)
+
+        IF(THREADS_HAVE_PTHREAD_ARG)
+          IF(THREADS_PTHREAD_ARG MATCHES "^2$")
+            SET(Threads_FOUND TRUE)
+            MESSAGE(STATUS "Check if compiler accepts -pthread - yes")
+          ELSE()
+            MESSAGE(STATUS "Check if compiler accepts -pthread - no")
+            FILE(APPEND 
+              ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeError.log 
+              "Determining if compiler accepts -pthread returned ${THREADS_PTHREAD_ARG} instead of 2. The compiler had the following output:\n${OUTPUT}\n\n")
+          ENDIF()
+        ELSE()
+          MESSAGE(STATUS "Check if compiler accepts -pthread - no")
+          FILE(APPEND 
+            ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeError.log 
+            "Determining if compiler accepts -pthread failed with the following output:\n${OUTPUT}\n\n")
+        ENDIF()
+
+      ENDIF("THREADS_HAVE_PTHREAD_ARG" MATCHES "^THREADS_HAVE_PTHREAD_ARG")
+
+      IF(THREADS_HAVE_PTHREAD_ARG)
+        SET(Threads_FOUND TRUE)
+        SET(CMAKE_THREAD_LIBS_INIT "-pthread")
+      ENDIF()
+
+    ENDIF(NOT CMAKE_HAVE_THREADS_LIBRARY)
+  ENDIF(CMAKE_HAVE_PTHREAD_H)
+ENDIF()
+
+IF(CMAKE_THREAD_LIBS_INIT)
+  SET(CMAKE_USE_PTHREADS_INIT 1)
+  SET(Threads_FOUND TRUE)
+ENDIF()
+
+IF(CMAKE_SYSTEM MATCHES "Windows")
+  SET(CMAKE_USE_WIN32_THREADS_INIT 1)
+  SET(Threads_FOUND TRUE)
+ENDIF()
+
+IF(WINCE)
+  SET(CMAKE_USE_WIN32_THREADS_INIT 1)
+  SET(Threads_FOUND TRUE)
+ENDIF()
+
+IF(CMAKE_USE_PTHREADS_INIT)
+  IF(CMAKE_SYSTEM MATCHES "HP-UX-*")
+    # Use libcma if it exists and can be used.  It provides more
+    # symbols than the plain pthread library.  CMA threads
+    # have actually been deprecated:
+    #   http://docs.hp.com/en/B3920-90091/ch12s03.html#d0e11395
+    #   http://docs.hp.com/en/947/d8.html
+    # but we need to maintain compatibility here.
+    # The CMAKE_HP_PTHREADS setting actually indicates whether CMA threads
+    # are available.
+    CHECK_LIBRARY_EXISTS(cma pthread_attr_create "" CMAKE_HAVE_HP_CMA)
+    IF(CMAKE_HAVE_HP_CMA)
+      SET(CMAKE_THREAD_LIBS_INIT "-lcma")
+      SET(CMAKE_HP_PTHREADS_INIT 1)
+      SET(Threads_FOUND TRUE)
+    ENDIF(CMAKE_HAVE_HP_CMA)
+    SET(CMAKE_USE_PTHREADS_INIT 1)
+  ENDIF()
+
+  IF(CMAKE_SYSTEM MATCHES "OSF1-V*")
+    SET(CMAKE_USE_PTHREADS_INIT 0)
+    SET(CMAKE_THREAD_LIBS_INIT )
+  ENDIF()
+
+  IF(CMAKE_SYSTEM MATCHES "CYGWIN_NT*")
+    SET(CMAKE_USE_PTHREADS_INIT 1)
+    SET(Threads_FOUND TRUE)
+    SET(CMAKE_THREAD_LIBS_INIT )
+    SET(CMAKE_USE_WIN32_THREADS_INIT 0)
+  ENDIF()
+ENDIF(CMAKE_USE_PTHREADS_INIT)
+
+INCLUDE(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(Threads DEFAULT_MSG Threads_FOUND)
Index: cmake/FindWcecompat.cmake
===================================================================
--- cmake/FindWcecompat.cmake
+++ cmake/FindWcecompat.cmake
@@ -0,0 +1,33 @@
+# Try to find Wcecompat functionality
+# Once done this will define
+#
+#  WCECOMPAT_FOUND - system has Wcecompat
+#  WCECOMPAT_INCLUDE_DIR - Wcecompat include directory
+#  WCECOMPAT_LIBRARIES - Libraries needed to use Wcecompat
+#
+# Copyright (c) 2010, Andreas Holzammer, <andy@kdab.com>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+
+if(WCECOMPAT_INCLUDE_DIR AND WCECOMPAT_LIB_FOUND)
+  set(Wcecompat_FIND_QUIETLY TRUE)
+endif(WCECOMPAT_INCLUDE_DIR AND WCECOMPAT_LIB_FOUND)
+
+find_path(WCECOMPAT_INCLUDE_DIR errno.h PATH_SUFFIXES wcecompat)
+
+set(WCECOMPAT_LIB_FOUND FALSE)
+
+if(WCECOMPAT_INCLUDE_DIR)
+    find_library(WCECOMPAT_LIBRARIES NAMES wcecompat wcecompatex )
+    if(WCECOMPAT_LIBRARIES)
+      set(WCECOMPAT_LIB_FOUND TRUE)
+    endif(WCECOMPAT_LIBRARIES)
+endif(WCECOMPAT_INCLUDE_DIR)
+
+# I have no idea what this is about, but it seems to be used quite often, so I add this here
+set(WCECOMPAT_CONST const)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(Wcecompat  DEFAULT_MSG  WCECOMPAT_LIBRARIES  WCECOMPAT_LIB_FOUND)
+
+mark_as_advanced(WCECOMPAT_INCLUDE_DIR  WCECOMPAT_LIBRARIES  WCECOMPAT_CONST  WCECOMPAT_LIB_FOUND)
Index: ConfigureChecks.cmake
===================================================================
--- ConfigureChecks.cmake
+++ ConfigureChecks.cmake
@@ -29,7 +29,7 @@
 CHECK_FUNCTION_EXISTS(mkstemp HAVE_MKSTEMP)             # src/streamanalyzer/helperendanalyzer.cpp
 CHECK_FUNCTION_EXISTS(nanosleep HAVE_NANOSLEEP)         # src/storage/sqlitestorage.cpp, src/daemon/indexscheduler.cpp, src/searchclient/cmdlinestrigi.cpp
 CHECK_FUNCTION_EXISTS(setenv HAVE_SETENV)               # src/xmlindexer/peranalyzerxml.cpp
-CHECK_FUNCTION_EXISTS(strcasecmp HAVE_STRCASECMP)       # src/streamindexer/expatsaxendanalyzer.cpp, src/streamindexer/saxendanalyzer.cpp
+CHECK_SYMBOL_EXISTS(strcasecmp "string.h" HAVE_STRCASECMP)       # src/streamindexer/expatsaxendanalyzer.cpp, src/streamindexer/saxendanalyzer.cpp
 CHECK_FUNCTION_EXISTS(strcasestr HAVE_STRCASESTR)       # src/streams/mailinputstream.cpp
 CHECK_FUNCTION_EXISTS(strlwr HAVE_STRLWR)               # src/streamindexer/ifilterendanalyzer.cpp
 CHECK_FUNCTION_EXISTS(strncasecmp HAVE_STRNCASECMP)     # src/streams/mailinputstream.cpp
Index: src/strigicmd/strigicmd.cpp
===================================================================
--- src/strigicmd/strigicmd.cpp	(Revision 1146098)
+++ src/strigicmd/strigicmd.cpp	(Arbeitskopie)
@@ -136,6 +136,9 @@
 }
 void
 printIndexedDocument(IndexedDocument indexedDoc) {
+//Windows ce does not have a console, so no matter of displaying something
+//and the lack of ctime implementation of the sdk
+#ifndef _WIN32_WCE
     printf ("\t- mimetype: %s\n", indexedDoc.mimetype.c_str());
     printf ("\t- sha1: %s\n", indexedDoc.sha1.c_str());
     cout << "\t- size: " << indexedDoc.size << endl;
@@ -166,6 +169,7 @@
                 printf ("\t\t%s\n", it->second.c_str());
         }
     }
+#endif
 }
 
 /*!
Index: src/streamanalyzer/analyzerloader.cpp
===================================================================
--- src/streamanalyzer/analyzerloader.cpp
+++ src/streamanalyzer/analyzerloader.cpp
@@ -44,6 +44,12 @@
 typedef HMODULE StgModuleType;
 #endif
 
+#if defined(UNICODE) || defined(_UNICODE)
+#define T(t) L##t
+#else
+#define T(t) t
+#endif
+
 using namespace std;
 using namespace Strigi;
 
@@ -83,7 +89,7 @@
 AnalyzerLoader::Private::Module::~Module() {
     void(*f)(const AnalyzerFactoryFactory*)
         = (void(*)(const AnalyzerFactoryFactory*))
-        DLSYM(mod, "deleteStrigiAnalyzerFactory");
+        DLSYM(mod, T("deleteStrigiAnalyzerFactory"));
     if (f) {
         f(factory);
     }
@@ -151,8 +157,14 @@
     // do not use RTLD_GLOBAL here
     handle = dlopen(lib, RTLD_LAZY); //note: If neither RTLD_GLOBAL nor RTLD_LOCAL are specified, the default is RTLD_LOCAL.
 #else
+#ifndef _WIN32_WCE
     handle = LoadLibrary(lib);
+#else
+	wchar_t* wlib = wce_mbtowc(lib);
+	handle = LoadLibraryW(wlib);
+	free(wlib);
 #endif
+#endif
     if (!handle) {
 #if defined(HAVE_DLFCN_H) && !defined(_WIN32)
         cerr << "Could not load '" << lib << "':" << dlerror() << endl;
@@ -162,7 +174,7 @@
         return;
     }
     const AnalyzerFactoryFactory* (*f)() = (const AnalyzerFactoryFactory* (*)())
-        DLSYM(handle, "strigiAnalyzerFactory");
+        DLSYM(handle, T("strigiAnalyzerFactory"));
     if (!f) {
 #ifndef WIN32
         fprintf(stderr, "%s\n", dlerror());
Index: src/streamanalyzer/tests/indextests.cpp
===================================================================
--- src/streamanalyzer/tests/indextests.cpp
+++ src/streamanalyzer/tests/indextests.cpp
@@ -37,6 +37,9 @@
 	#include <unistd.h>
 #else
 	#include <direct.h>
+	#ifdef _WIN32_WCE
+		#include <io.h>
+	#endif
 #endif
 
 /**
Index: src/streamanalyzer/indexpluginloader.cpp
===================================================================
--- src/streamanalyzer/indexpluginloader.cpp
+++ src/streamanalyzer/indexpluginloader.cpp
@@ -37,6 +37,12 @@
 #define DLCLOSE FreeLibrary
 #endif
 
+#if defined(UNICODE) || defined(_UNICODE)
+#define T(t) L##t
+#else
+#define T(t) t
+#endif
+
 #ifndef _WIN32
 typedef void* StgModuleType;
 #else
@@ -134,8 +140,14 @@
         // the default is RTLD_LOCAL.
         handle = dlopen(lib.c_str(), RTLD_LOCAL | RTLD_NOW);
 #else
-        handle = LoadLibrary(lib.c_str());
+#ifndef _WIN32_WCE
+		handle = LoadLibrary(lib.c_str());
+#else
+		wchar_t* wlib = wce_mbtowc(lib.c_str());
+		handle = LoadLibraryW(wlib);
+		free(wlib);
 #endif
+#endif
         if (!handle) {
 #if defined(HAVE_DLFCN_H) && !defined(_WIN32)
             cerr << "Could not load '" << lib << "':" << dlerror() << endl;
@@ -146,7 +158,7 @@
             return;
         }
         IndexManager*(*create)(const char*) = (IndexManager*(*)(const char*))
-            DLSYM(handle, "createIndexManager");
+            DLSYM(handle, T("createIndexManager"));
         if (!create) {
 #ifndef WIN32
             fprintf(stderr, "%s\n", dlerror());
@@ -157,7 +169,7 @@
             return;
         }
         void(*destroy)(IndexManager*) = (void(*)(IndexManager*))
-            DLSYM(handle, "deleteIndexManager");
+            DLSYM(handle, T("deleteIndexManager"));
         if (!destroy) {
 #ifndef WIN32
             fprintf(stderr, "%s\n", dlerror());
Index: src/streams/substreamprovider.h
===================================================================
--- src/streams/substreamprovider.h
+++ src/streams/substreamprovider.h
@@ -20,6 +20,7 @@
 #ifndef STRIGI_SUBSTREAMPROVIDER
 #define STRIGI_SUBSTREAMPROVIDER
 
+#include <time.h>
 #include <string>
 #include <map>
 #include "streambase.h"
Index: src/streams/tests/inputstreamtests.h
===================================================================
--- src/streams/tests/inputstreamtests.h
+++ src/streams/tests/inputstreamtests.h
@@ -21,6 +21,9 @@
 #define STRIGI_INPUTSTREAMTESTS
 #ifdef _WIN32
 #include <direct.h>
+#ifdef _WIN32_WCE
+#include <stddef.h>
+#endif
 #else
 #include <unistd.h>
 #endif
Index: src/streams/CMakeLists.txt
===================================================================
--- src/streams/CMakeLists.txt
+++ src/streams/CMakeLists.txt
@@ -1,4 +1,6 @@
+if(NOT WINCE)
 add_subdirectory(tests)
+endif(NOT WINCE)
 add_subdirectory(pdf)
 
 include_directories(
@@ -62,6 +64,9 @@
 )
 
 target_link_libraries(streams ${ZLIB_LIBRARIES} ${BZIP2_LIBRARIES} ${ICONV_LIBRARIES})
+if(WINCE)
+    target_link_libraries(streams ${WCECOMPAT_LIBRARIES})
+endif(WINCE)
 if(NOT WIN32)
   configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libstreams.pc.cmake ${CMAKE_CURRENT_BINARY_DIR}/libstreams.pc)
 endif(NOT WIN32)
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -220,6 +220,13 @@
   endif (NOT HAVE_LIBDL)
 endif(NOT WIN32)
 
+if(WINCE)
+    find_package(Wcecompat REQUIRED)
+    include_directories(${WCECOMPAT_INCLUDE_DIR})
+    set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${WCECOMPAT_INCLUDE_DIR})
+    set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} ${WCECOMPAT_LIBRARIES})
+endif(WINCE)
+
 # check for visibility support
 macro_check_gcc_visibility(__STRIGI_HAVE_GCC_VISIBILITY)
 
