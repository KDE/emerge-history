Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/kde_file_win.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/kde_file_win.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/kde_file_win.h	(Arbeitskopie)
@@ -23,7 +23,11 @@
 #include <string.h>
 #include <stdio.h>
 #include <stdlib.h>
+#ifndef _WIN32_WCE
 #include <io.h>
+#else
+#include <wcecompat/io.h>
+#endif
 #include <fcntl.h>
 #include <ctype.h>
 
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/limits.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/limits.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/limits.h	(Arbeitskopie)
@@ -24,7 +24,11 @@
 #include <sys/types.h>
 
 /* regular header from msvc includes */
+#ifndef _WIN32_WCE
 #include <../include/limits.h>
+#else
+#include <wcecompat/limits.h>
+#endif
 
 // FIXME: really needed?
 #include "sys/param.h"
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/string.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/string.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/string.h	(Arbeitskopie)
@@ -24,7 +24,11 @@
 #include <sys/types.h>
 
 /* regular header from msvc includes */
+#ifndef _WIN32_WCE
 #include <../include/string.h>
+#else
+#include <wcecompat/string.h>
+#endif
 
 #ifndef strncasecmp
 #define strncasecmp strnicmp
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/fcntl.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/fcntl.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/fcntl.h	(Arbeitskopie)
@@ -24,8 +24,13 @@
 #include <sys/types.h>
 
 /* regular header from msvc includes */
+#ifndef _WIN32_WCE
 # include <../include/fcntl.h>
+#else
+#include <wcecompat/fcntl.h>
+#endif
 
+
 #ifdef __cplusplus
 extern "C" {
 #endif
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/stdlib.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/stdlib.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/stdlib.h	(Arbeitskopie)
@@ -24,7 +24,11 @@
 #include <sys/types.h>
 
 /* regular header from msvc includes */
+#ifndef _WIN32_WCE
 #include <../include/stdlib.h>
+#else
+#include <../Armv4i/stdlib.h>
+#endif
 
 #ifdef __cplusplus
 extern "C" {
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/stdio.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/stdio.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/stdio.h	(Arbeitskopie)
@@ -25,7 +25,11 @@
 #include <sys/types.h>
 
 /* regular header from msvc includes */
+#ifndef _WIN32_WCE
 # include <../include/stdio.h>
+#else
+#include <../Armv4i/stdio.h>
+#endif
 
 
 #ifdef __cplusplus
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/utime.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/utime.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/utime.h	(Arbeitskopie)
@@ -24,6 +24,10 @@
 #include <sys/types.h>
 
 /* regular header from msvc includes */
+#ifndef _WIN32_WCE
 #include <../include/sys/utime.h>
+#else
+#include <wcecompat/sys/utime.h>
+#endif
 
 #endif  // KDEWIN_UTIME_H
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/dirent.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/dirent.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/dirent.h	(Arbeitskopie)
@@ -25,9 +25,16 @@
 // include everywhere
 #include <sys/types.h>
 
+#ifndef _WIN32_WCE
 #include <io.h>
 #include <stdio.h>
 #include <stdlib.h>
+#else
+#include <wcecompat/io.h>
+#include <../Armv4i/stdio.h>
+#include <../Armv4i/stdlib.h>
+#define _MAX_FNAME   255
+#endif
 
 #include <sys/lock.h>
 
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/math.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/math.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/math.h	(Arbeitskopie)
@@ -34,8 +34,13 @@
 #ifndef _USE_MATH_DEFINES
 # define _USE_MATH_DEFINES
 #endif
+#ifndef _WIN32_WCE
 #include <../include/math.h>
 #include <../include/float.h>
+#else
+#include <wcecompat/math.h>
+#include <wcecompat/float.h>
+#endif
 
 #include <errno.h>
 #include <limits.h>
@@ -244,6 +249,8 @@
 KDEWIN_EXPORT __inline float fabsf (float x) {return ((float)fabs((double)x));}
 #endif
 
+#ifndef _WIN32_WCE
+
 /* 7.12.9.3 */
 // this is a little bit more complicated - don't raise an exception
 // -> set fpu control word bit 5 so it won't generate one
@@ -341,6 +348,8 @@
     }
 }
 
+#endif
+
 KDEWIN_EXPORT __inline long lroundf ( float x )
 {
   /* Add +/- 0.5, then round towards zero.  */
@@ -403,6 +412,8 @@
   return (long double)lroundl( x );
 }
 
+#ifndef _WIN32_WCE
+
 /* 7.12.9.8 */
 /* round towards zero, regardless of fpu control word settings */
 KDEWIN_EXPORT __inline float truncf( float x )
@@ -477,6 +488,8 @@
     }
 }
 
+#endif
+
 /* 7.12.12.2 */
 KDEWIN_EXPORT __inline double fmax (double a, double b)
 {
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/windows.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/windows.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/windows.h	(Arbeitskopie)
@@ -27,6 +27,10 @@
 #endif
 
 /* regular header from msvc includes */
+#ifndef _WIN32_WCE
 #include <../include/windows.h>
+#else
+#include <../Armv4i/windows.h>
+#endif
 
 #endif /* KDEWIN_WINDOWS_H */
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/time.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/time.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/time.h	(Arbeitskopie)
@@ -23,7 +23,11 @@
 // include everywhere
 #include <sys/types.h>
 
+#ifndef _WIN32_WCE
 #include <../include/time.h>
+#else
+#include <wcecompat/time.h>
+#endif
 
 #ifdef __cplusplus
 extern "C" {
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/wchar.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/wchar.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/wchar.h	(Arbeitskopie)
@@ -22,7 +22,11 @@
 #define KDEWIN_WCHAR_H
 
 /* regular header from msvc includes */
+#ifndef _WIN32_WCE
 #include <../include/wchar.h>
+#else
+#include <../Armv4i/wchar.h>
+#endif
 
 #ifndef wcscasecmp
 #define wcscasecmp _wcsicmp
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/unistd.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/unistd.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/unistd.h	(Arbeitskopie)
@@ -23,10 +23,17 @@
 // include everywhere
 #include <sys/types.h>
 
+#ifndef _WIN32_WCE
 #include <direct.h>
 #include <io.h> /* access(), etc.*/
 #include <process.h> /* getpid(), etc.*/
+#else
+#include <wcecompat/direct.h>
+#include <wcecompat/io.h>
+#include <wcecompat/process.h>
+#endif
 
+
 /* include most headers here to avoid redefining gethostname() */
 #include <sys/time.h>
 #include <sys/resource.h>
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/signal.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/signal.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/signal.h	(Arbeitskopie)
@@ -24,7 +24,11 @@
 #include <sys/types.h>
 
 /* regular header from msvc includes */
+#ifndef _WIN32_WCE
 #include <../include/signal.h>
+#else
+#include <wcecompat/signal.h>
+#endif
 
 #ifdef  __cplusplus
 extern "C" {
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/ctype.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/ctype.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/ctype.h	(Arbeitskopie)
@@ -23,7 +23,11 @@
 // include everywhere
 #include <sys/types.h>
 
+#ifndef _WIN32_WCE
 #include <../include/ctype.h>
+#else
+#include <wcecompat/ctype.h>
+#endif
 
 #ifdef __cplusplus
 inline int KDE_isspace(int c) { return ((unsigned)(c + 1) <= 256) && isspace(c); }
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/errno.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/errno.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/errno.h	(Arbeitskopie)
@@ -21,7 +21,11 @@
 #define _KDEWIN_ERRNO_H
 
 #include <sys/types.h>
+#ifndef _WIN32_WCE
 #include <../include/errno.h>
+#else
+#include <wcecompat/errno.h>
+#endif
 
 #ifndef _CRT_ERRNO_DEFINED
 #define _CRT_ERRNO_DEFINED
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/sys/types.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/sys/types.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/sys/types.h	(Arbeitskopie)
@@ -23,7 +23,11 @@
 #include <kdewin_export.h>
 
 /* regular header from msvc includes */
+#ifndef _WIN32_WCE
 #include <../include/sys/types.h>
+#else
+#include <wcecompat/sys/types.h>
+#endif
 
 #include <BaseTsd.h>
 
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/sys/stat.h
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/sys/stat.h	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/include/msvc/sys/stat.h	(Arbeitskopie)
@@ -23,11 +23,16 @@
 #include <kdewin_export.h>
 
 /* regular header from msvc includes */
+#ifndef _WIN32_WCE
 #include <../include/sys/stat.h>
+#include <io.h>
+#else
+#include <wcecompat/sys/stat.h>
+#include <wcecompat/io.h>
+#endif
 
 #include <time.h>
 #include <sys/types.h>
-#include <io.h>
 
 #ifdef __cplusplus
 extern "C" {
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/qt/CMakeLists.txt
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/qt/CMakeLists.txt	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/qt/CMakeLists.txt	(Arbeitskopie)
@@ -16,7 +16,11 @@
 
 if (BUILD_QT_LIB)
     add_library(kdewin-qt SHARED ${kdewin_qt_SRCS})
-    target_link_libraries(kdewin-qt ${QT_QTCORE_LIBRARIES} advapi32 shell32 ws2_32 )
+    if(NOT WINCE)
+        target_link_libraries(kdewin-qt ${QT_QTCORE_LIBRARIES} advapi32 shell32 ws2_32 )
+    else(NOT WINCE)
+        target_link_libraries(kdewin-qt ${QT_QTCORE_LIBRARIES} ws2 )
+    endif(NOT WINCE)
     set_target_properties(kdewin-qt PROPERTIES DEFINE_SYMBOL MAKE_KDEWIN_QT_LIB )
     set_target_properties(kdewin-qt PROPERTIES VERSION ${KDEWIN_VERSION_STR} )
 
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/qt/linkfile.cpp
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/qt/linkfile.cpp	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/qt/linkfile.cpp	(Arbeitskopie)
@@ -134,6 +134,7 @@
 
 bool LinkFile::read()
 {
+#ifndef _WIN32_WCE
     LPCWSTR szShortcutFile = (LPCWSTR)m_linkPath.utf16();
     WCHAR szTarget[MAX_PATH];
     WCHAR szWorkingDir[MAX_PATH];
@@ -177,10 +178,14 @@
     if (ppf) ppf->Release();
     if (psl) psl->Release();
     return bResult;
+#else
+    return true;
+#endif
 }
 
 bool LinkFile::create()
 {
+#ifndef _WIN32_WCE
     HRESULT hres;
     IShellLinkW* psl;
 
@@ -243,6 +248,9 @@
     }
     CoUninitialize(); // cleanup COM after you're done using its services
     return SUCCEEDED(hres) ? true : false;
+#else
+    return true;
+#endif
 }
 
 bool LinkFile::remove()
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/src/realpath.c
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/src/realpath.c	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/src/realpath.c	(Arbeitskopie)
@@ -26,7 +26,11 @@
 #include <string.h>
 #include <sys/stat.h>
 #include <unistd.h>
+#ifndef _WIN32_WCE
 #include <direct.h>
+#else
+#include <wcecompat/direct.h>
+#endif
 
 /** @return the canonicalized absolute pathname */
 KDEWIN_EXPORT char *realpath(const char *path,char *resolved_path)
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/src/uname.c
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/src/uname.c	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/src/uname.c	(Arbeitskopie)
@@ -17,12 +17,22 @@
    Boston, MA 02110-1301, USA.
 */
 
+/*
+    The code of uname is taken from gnulib, which can be found at
+    www.gnu.org/software/gnulib.
+
+*/
+
 #include <kdewin_export.h>
 #include <windows.h>
 
 #include <sys/utsname.h>
 #include <stdio.h>
 
+#ifdef _WIN32_WCE
+#include <wcecompat/stdlib.h>
+#endif
+
 typedef void (WINAPI *PGNSI)(LPSYSTEM_INFO);
 
 #ifndef SM_TABLETPC
@@ -41,6 +51,29 @@
 # define VER_SUITE_WH_SERVER      0x00008000
 #endif
 
+/* Mingw headers don't have all the platform codes.  */
+#ifndef VER_PLATFORM_WIN32_CE
+# define VER_PLATFORM_WIN32_CE 3
+#endif
+
+/* Some headers don't have all the processor architecture codes.  */
+#ifndef PROCESSOR_ARCHITECTURE_AMD64
+# define PROCESSOR_ARCHITECTURE_AMD64 9
+#endif
+#ifndef PROCESSOR_ARCHITECTURE_IA32_ON_WIN64
+# define PROCESSOR_ARCHITECTURE_IA32_ON_WIN64 10
+#endif
+
+/* Mingw headers don't have the latest processor codes.  */
+#ifndef PROCESSOR_AMD_X8664
+# define PROCESSOR_AMD_X8664 8664
+#endif
+
+#ifndef PROCESSOR_INTEL_IA64
+# define PROCESSOR_INTEL_IA64 2200
+#endif
+
+
 int kde_gethostname(char *__name, size_t __len);
 
 /**
@@ -58,246 +91,229 @@
 
  Note that utsname.version is just a compile time of kdewin32 library (__DATE__).
 */
-KDEWIN_EXPORT int uname(struct utsname *name)
+KDEWIN_EXPORT int uname (struct utsname *buf)
 {
-	OSVERSIONINFOEX versioninfo;
-	SYSTEM_INFO sysinfo;
-	PGNSI pGNSI;
-	unsigned int proctype;
-	char valid_processor_level;
-	char *ostype = 0;
-	char *osproduct = 0;
-	char tmpnodename[MAX_COMPUTERNAME_LENGTH+2];
-	size_t tmpnodenamelen = MAX_COMPUTERNAME_LENGTH+1;
-	BOOL osVersionInfoEx;
+  OSVERSIONINFO version;
+  const char *super_version;
+  
+#ifndef _WIN32_WCE
+  OSVERSIONINFOEX versionex;
+  BOOL have_versionex; /* indicates whether versionex is filled */
 
-	if (!name)
-		return -1;
+  /* Preparation: Fill version and, if possible, also versionex.
+     But try to call GetVersionEx only once in the common case.  */
+  versionex.dwOSVersionInfoSize = sizeof (OSVERSIONINFOEX);
+  have_versionex = GetVersionEx ((OSVERSIONINFO *) &versionex);
+  if (have_versionex)
+    {
+      /* We know that OSVERSIONINFO is a subset of OSVERSIONINFOEX.  */
+      memcpy (&version, &versionex, sizeof (OSVERSIONINFO));
+    }
+  else
+    {
+      version.dwOSVersionInfoSize = sizeof (OSVERSIONINFO);
+      if (!GetVersionEx (&version))
+        abort ();
+    }
+#else
+  version.dwOSVersionInfoSize = sizeof (OSVERSIONINFO);
+  if (!GetVersionEx (&version))
+    abort ();
+#endif
 
-	ZeroMemory(&sysinfo, sizeof(SYSTEM_INFO));
-	ZeroMemory(&versioninfo, sizeof(OSVERSIONINFOEX));
+  /* Fill in nodename.  */
+  if (kde_gethostname (buf->nodename, sizeof (buf->nodename)) < 0)
+    strcpy (buf->nodename, "localhost");
 
-	/* Try calling GetVersionEx using the OSVERSIONINFOEX, 
-	 if that fails, try using the OSVERSIONINFO. */
-	versioninfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFOEX);
-	if ( !(osVersionInfoEx = GetVersionEx ((OSVERSIONINFO *) &versioninfo)) ) {
-		versioninfo.dwOSVersionInfoSize = sizeof (OSVERSIONINFO);
-		if (! GetVersionEx ( (OSVERSIONINFO *) &versioninfo) ) 
-			return -1;
-	}
+  /* Determine major-major Windows version.  */
+  if (version.dwPlatformId == VER_PLATFORM_WIN32_NT)
+    {
+      /* Windows NT or newer.  */
+      super_version = "NT";
+    }
+  else if (version.dwPlatformId == VER_PLATFORM_WIN32_CE)
+    {
+      /* Windows CE or Embedded CE.  */
+      super_version = "CE";
+    }
+  else if (version.dwPlatformId == VER_PLATFORM_WIN32_WINDOWS)
+    {
+      /* Windows 95/98/ME.  */
+      switch (version.dwMinorVersion)
+        {
+        case 0:
+          super_version = "95";
+          break;
+        case 10:
+          super_version = "98";
+          break;
+        case 90:
+          super_version = "ME";
+          break;
+        default:
+          super_version = "";
+          break;
+        }
+    }
+  else
+    super_version = "";
 
-	valid_processor_level = versioninfo.dwPlatformId == VER_PLATFORM_WIN32_NT 
-		|| (versioninfo.dwPlatformId == VER_PLATFORM_WIN32_WINDOWS && versioninfo.dwMinorVersion >= 10 /*>= win98*/);
+  /* Fill in sysname.  */
+#ifdef __MINGW32__
+  /* Returns a string compatible with the MSYS uname.exe program,
+     so that no further changes are needed to GNU config.guess.
+     For example,
+       $ ./uname.exe -s      => MINGW32_NT-5.1
+   */
+  sprintf (buf->sysname, "MINGW32_%s-%u.%u", super_version,
+           (unsigned int) version.dwMajorVersion,
+           (unsigned int) version.dwMinorVersion);
+#else
+  sprintf (buf->sysname, "Windows%s", super_version);
+#endif
 
-	/* Use GetNativeSystemInfo if supported or GetSystemInfo otherwise */
-	pGNSI = (PGNSI) GetProcAddress(
-		GetModuleHandle(TEXT("kernel32.dll")), "GetNativeSystemInfo");
-	if (NULL != pGNSI)
-		pGNSI(&sysinfo);
-	else
-		GetSystemInfo(&sysinfo);
+  /* Fill in release, version.  */
+  /* The MSYS uname.exe programs uses strings from a modified Cygwin runtime:
+       $ ./uname.exe -r      => 1.0.11(0.46/3/2)
+       $ ./uname.exe -v      => 2008-08-25 23:40
+     There is no point in imitating this behaviour.  */
+  if (version.dwPlatformId == VER_PLATFORM_WIN32_NT)
+    {
+      /* Windows NT or newer.  */
+      struct windows_version
+        {
+          int major;
+          int minor;
+          unsigned int server_offset;
+          const char *name;
+        };
 
-	/* CPU type */
-	switch (sysinfo.wProcessorArchitecture) {
-	case PROCESSOR_ARCHITECTURE_INTEL:
-		if (valid_processor_level) {
-			if (sysinfo.wProcessorLevel<3)
-				proctype = 3;
-			else if (sysinfo.wProcessorLevel > 9) /*Pentium 4?*/
-				proctype = 6;
-			else /*typical*/
-				proctype = sysinfo.wProcessorLevel;
-		}
-		else {
-			if (sysinfo.dwProcessorType == PROCESSOR_INTEL_386
-				|| sysinfo.dwProcessorType == PROCESSOR_INTEL_486)
-				proctype = sysinfo.dwProcessorType / 100;
-			else
-				proctype = PROCESSOR_INTEL_PENTIUM / 100;
-		}
-		sprintf (name->machine, "i%d86", proctype);
-		break;
-	case PROCESSOR_ARCHITECTURE_IA64:
-		strcpy (name->machine, "itanium");
-		break;
-	case PROCESSOR_ARCHITECTURE_AMD64:
-		strcpy (name->machine, "x64");
-		break;
-	case PROCESSOR_ARCHITECTURE_ALPHA:
-		strcpy (name->machine, "alpha");
-		break;
-	case PROCESSOR_ARCHITECTURE_MIPS:
-		strcpy (name->machine, "mips");
-		break;
-	default:
-		strcpy (name->machine, "unknown");
-		break;
-	}
+      /* Storing the workstation and server version names in a single
+         stream does not waste memory when they are the same.  These
+         macros abstract the representation.  VERSION1 is used if
+         version.wProductType does not matter, VERSION2 if it does.  */
+      #define VERSION1(major, minor, name) \
+        { major, minor, 0, name }
+      #define VERSION2(major, minor, workstation, server) \
+        { major, minor, sizeof workstation, workstation "\0" server }
+      static const struct windows_version versions[] =
+        {
+          VERSION2 (3, -1, "Windows NT Workstation", "Windows NT Server"),
+          VERSION2 (4, -1, "Windows NT Workstation", "Windows NT Server"),
+          VERSION1 (5, 0, "Windows 2000"),
+          VERSION1 (5, 1, "Windows XP"),
+          VERSION1 (5, 2, "Windows Server 2003"),
+          VERSION2 (6, 0, "Windows Vista", "Windows Server 2008"),
+          VERSION2 (6, 1, "Windows 7", "Windows Server 2008 R2"),
+          VERSION2 (-1, -1, "Windows", "Windows Server")
+        };
+      const char *base;
+      const struct windows_version *v = versions;
 
-	strncpy(name->sysname, "Microsoft Windows", 19);
+      /* Find a version that matches ours.  The last element is a
+         wildcard that always ends the loop.  */
+      while ((v->major != version.dwMajorVersion && v->major != -1)
+             || (v->minor != version.dwMinorVersion && v->minor != -1))
+        v++;
 
-	/* OS Type;
-	 NT support based on information from http://msdn.microsoft.com/en-us/library/ms724833(VS.85).aspx */
-	switch (versioninfo.dwPlatformId) {
-	case VER_PLATFORM_WIN32_NT:
-		switch (versioninfo.dwMajorVersion) {
-		case 3:
-		case 4:
-			ostype = "NT";
-			break;
-		case 5:
-			switch (versioninfo.dwMinorVersion) {
-			case 0:
-				ostype = "2000";
-				break;
-			case 1:
-				if (GetSystemMetrics(SM_MEDIACENTER))
-					ostype = "XP Media Center Edition";
-				else if (GetSystemMetrics(SM_STARTER))
-					ostype = "XP Starter Edition";
-				else if (GetSystemMetrics(SM_TABLETPC))
-					ostype = "XP Tablet PC Edition";
-				else
-					ostype = "XP";
-				break;
-			case 2:
-				if( GetSystemMetrics(SM_SERVERR2) )
-					ostype = "Server 2003 R2";
-				else if( versioninfo.wProductType == VER_NT_WORKSTATION
-				         && sysinfo.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_AMD64)
-					ostype = "XP Professional x64 Edition";
-				else
-					ostype = "Server 2003";
-				break;
-			}
-			break;
-		case 6:
-			switch (versioninfo.dwMinorVersion) {
-			case 0:
-				switch (versioninfo.wProductType) {
-				case VER_NT_WORKSTATION:
-					ostype = "Vista";
-					break;
-				default:
-					ostype = "Server 2008";
-					break;
-				}
-				break;
-			case 1:
-				switch (versioninfo.wProductType) {
-				case VER_NT_WORKSTATION:
-					ostype = "7";
-					break;
-				default:
-					ostype = "Server 2008 R2";
-					break;
-				}
-				break;
-			default:
-				break;
-			}
-			break;
-		default:
-			break;
-		}
-		break;
-	case VER_PLATFORM_WIN32_WINDOWS:
-		switch (versioninfo.dwMinorVersion) {
-		case 0:
-			ostype = "95";
-			break;
-		case 10:
-			ostype = "98";
-			break;
-		case 90:
-			ostype = "Me";
-			break;
-		default:
-			break;
-		}
-		break;
-	default:
-		break;
-	}
+#ifndef _WIN32_WCE
+      if (have_versionex && versionex.wProductType != VER_NT_WORKSTATION)
+        base = v->name + v->server_offset;
+      else
+#endif
+        base = v->name;
+      if (v->major == -1 || v->minor == -1)
+        sprintf (buf->release, "%s %u.%u",
+                 base,
+                 (unsigned int) version.dwMajorVersion,
+                 (unsigned int) version.dwMinorVersion);
+      else
+        strcpy (buf->release, base);
+    }
+  else if (version.dwPlatformId == VER_PLATFORM_WIN32_CE)
+    {
+      /* Windows CE or Embedded CE.  */
+      sprintf (buf->release, "Windows CE %u.%u",
+               (unsigned int) version.dwMajorVersion,
+               (unsigned int) version.dwMinorVersion);
+    }
+  else
+    {
+      /* Windows 95/98/ME.  */
+      sprintf (buf->release, "Windows %s", super_version);
+    }
+  strcpy (buf->version, version.szCSDVersion);
 
-	/* Test for specific product on Windows NT 4.0 SP6 and later */
-	if (osVersionInfoEx) {
-		/* Workstation type */
-		if ( versioninfo.wProductType == VER_NT_WORKSTATION
-		     && sysinfo.wProcessorArchitecture!=PROCESSOR_ARCHITECTURE_AMD64)
-		{
-			if( versioninfo.dwMajorVersion == 4 )
-				osproduct = "Workstation 4.0";
-			else if( versioninfo.wSuiteMask & VER_SUITE_PERSONAL )
-				osproduct = "Home Edition";
-			else
-				osproduct = "Professional";
-		}
-		/* Server type */
-		else if ( versioninfo.wProductType == VER_NT_SERVER
-		          || versioninfo.wProductType == VER_NT_DOMAIN_CONTROLLER )
-		{
-			if (versioninfo.dwMajorVersion == 5 && versioninfo.dwMinorVersion == 2) {
-				if ( sysinfo.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_IA64 ) {
-					if( versioninfo.wSuiteMask & VER_SUITE_DATACENTER )
-						osproduct = "Datacenter Edition for Itanium-based Systems";
-					else if( versioninfo.wSuiteMask & VER_SUITE_ENTERPRISE )
-						osproduct = "Enterprise Edition for Itanium-based Systems";
-				}
-				else if ( sysinfo.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_AMD64 ) {
-					if ( versioninfo.wSuiteMask & VER_SUITE_DATACENTER )
-						osproduct = "Datacenter x64 Edition";
-					else if ( versioninfo.wSuiteMask & VER_SUITE_ENTERPRISE )
-						osproduct = "Enterprise x64 Edition";
-					else
-						osproduct = "Standard x64 Edition";
-				}
-				else {
-					if ( versioninfo.wSuiteMask & VER_SUITE_DATACENTER )
-						osproduct = "Datacenter Edition";
-					else if ( versioninfo.wSuiteMask & VER_SUITE_ENTERPRISE )
-						osproduct = "Enterprise Edition";
-					else if ( versioninfo.wSuiteMask & VER_SUITE_BLADE )
-						osproduct = "Web Edition";
-					else if ( versioninfo.wSuiteMask & VER_SUITE_WH_SERVER )
-						osproduct = "Home Server";
-					else
-						osproduct = "Standard Edition";
-				}
-			}
-			else if ( versioninfo.dwMajorVersion == 5 && versioninfo.dwMinorVersion == 0) {
-				if ( versioninfo.wSuiteMask & VER_SUITE_DATACENTER )
-					osproduct = "Datacenter Server";
-				else if ( versioninfo.wSuiteMask & VER_SUITE_ENTERPRISE )
-					osproduct = "Advanced Server";
-				else
-					osproduct = "Server";
-			}
-			else { /* NT 4.0 */
-				if ( versioninfo.wSuiteMask & VER_SUITE_ENTERPRISE )
-					osproduct = "Server 4.0, Enterprise Edition";
-				else
-					osproduct = "Server 4.0";
-			}
-		} /* \server type */
-	} /* \product */
+  /* Fill in machine.  */
+  {
+    SYSTEM_INFO info;
 
-	if (0==kde_gethostname(tmpnodename, tmpnodenamelen))
-		strncpy(name->nodename, tmpnodename, 19);
-	else
-		name->nodename[0]=0;
+    GetSystemInfo (&info);
+    /* Check for Windows NT or CE, since the info.wProcessorLevel is
+       garbage on Windows 95. */
+    if (version.dwPlatformId == VER_PLATFORM_WIN32_NT
+        || version.dwPlatformId == VER_PLATFORM_WIN32_CE)
+      {
+        /* Windows NT or newer, or Windows CE or Embedded CE.  */
+        switch (info.wProcessorArchitecture)
+          {
+          case PROCESSOR_ARCHITECTURE_AMD64:
+            strcpy (buf->machine, "x86_64");
+            break;
+          case PROCESSOR_ARCHITECTURE_IA64:
+            strcpy (buf->machine, "ia64");
+            break;
+          case PROCESSOR_ARCHITECTURE_INTEL:
+            strcpy (buf->machine, "i386");
+            if (info.wProcessorLevel >= 3)
+              buf->machine[1] =
+                '0' + (info.wProcessorLevel <= 6 ? info.wProcessorLevel : 6);
+            break;
+          case PROCESSOR_ARCHITECTURE_IA32_ON_WIN64:
+            strcpy (buf->machine, "i686");
+            break;
+          case PROCESSOR_ARCHITECTURE_MIPS:
+            strcpy (buf->machine, "mips");
+            break;
+          case PROCESSOR_ARCHITECTURE_ALPHA:
+          case PROCESSOR_ARCHITECTURE_ALPHA64:
+            strcpy (buf->machine, "alpha");
+            break;
+          case PROCESSOR_ARCHITECTURE_PPC:
+            strcpy (buf->machine, "powerpc");
+            break;
+          case PROCESSOR_ARCHITECTURE_SHX:
+            strcpy (buf->machine, "sh");
+            break;
+          case PROCESSOR_ARCHITECTURE_ARM:
+            strcpy (buf->machine, "arm");
+            break;
+          default:
+            strcpy (buf->machine, "unknown");
+            break;
+          }
+      }
+    else
+      {
+        /* Windows 95/98/ME.  */
+        switch (info.dwProcessorType)
+          {
+          case PROCESSOR_AMD_X8664:
+            strcpy (buf->machine, "x86_64");
+            break;
+          case PROCESSOR_INTEL_IA64:
+            strcpy (buf->machine, "ia64");
+            break;
+          default:
+            if (info.dwProcessorType % 100 == 86)
+              sprintf (buf->machine, "i%u",
+                       (unsigned int) info.dwProcessorType);
+            else
+              strcpy (buf->machine, "unknown");
+            break;
+          }
+      }
+  }
 
-	strncpy(name->version, __DATE__, 19); /** @todo ok? */
-
-	if (osproduct)
-		sprintf(name->release, "%d.%d (%s %s)", versioninfo.dwMajorVersion, 
-			versioninfo.dwMinorVersion, ostype, osproduct);
-	else if (ostype)
-		sprintf(name->release, "%d.%d (%s)", versioninfo.dwMajorVersion, 
-			versioninfo.dwMinorVersion, ostype);
-	else
-		sprintf(name->release, "%d.%d", versioninfo.dwMajorVersion, 
-			versioninfo.dwMinorVersion);
-
-	return 0;
+  return 0;
 }
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/src/unistd.c
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/src/unistd.c	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/src/unistd.c	(Arbeitskopie)
@@ -21,7 +21,11 @@
 #include <kdewin_export.h>
 #include <windows.h>
 
+#ifndef _WIN32_WCE
 #include <direct.h>
+#else
+#include <wcecompat/direct.h>
+#endif
 #include <errno.h>
 #include <fcntl.h>
 #include <stdio.h>
@@ -329,7 +333,11 @@
 	 with (module 2^32).  */
       value += 7777;
 
+#ifndef _WIN32_WCE
       if (!mkdir(_template))
+#else
+      if (!mkdir(_template,0))
+#endif
 		return _template;	
     }
     return 0;
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/src/math/math.c
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/src/math/math.c	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/src/math/math.c	(Arbeitskopie)
@@ -6,8 +6,13 @@
 #ifndef _USE_MATH_DEFINES
 # define _USE_MATH_DEFINES
 #endif
+#ifndef _WIN32_WCE
 #include <../include/math.h>
 #include <../include/float.h>
+#else
+#include <wcecompat/math.h>
+#include <wcecompat/float.h>
+#endif
 
 #include <kdewin_export.h>
 #include <errno.h>
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/src/signal.c
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/src/signal.c	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/src/signal.c	(Arbeitskopie)
@@ -69,6 +69,7 @@
     return -1;
   }
   switch (sig) {
+#ifndef _WIN32_WCE
   case SIGINT:
     if (!GenerateConsoleCtrlEvent(CTRL_C_EVENT, (DWORD)pid))
       return handle_kill_result(h);
@@ -77,6 +78,7 @@
     if (!GenerateConsoleCtrlEvent(CTRL_BREAK_EVENT, (DWORD)pid))
       return handle_kill_result(h);
     break;
+#endif
   case SIGKILL:
     if (!TerminateProcess(h, sig))
       return handle_kill_result(h);
@@ -112,11 +114,17 @@
 KDEWIN_EXPORT sighandler_t kdewin32_signal(int signum, sighandler_t handler)
 {
   if (signum==SIGABRT
+#ifndef _WIN32_WCE
     || signum==SIGFPE
     || signum==SIGILL
     || signum==SIGINT
+#endif
     || signum==SIGSEGV
+#ifndef _WIN32_WCE
     || signum==SIGTERM)
+#else
+    )
+#endif
     return signal(signum, handler);
   return SIG_ERR;
 }
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/src/kde_file_win.c
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/src/kde_file_win.c	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/src/kde_file_win.c	(Arbeitskopie)
@@ -20,7 +20,11 @@
 #include <kdewin_export.h>
 #include <windows.h>
 
+#ifndef _WIN32_WCE
 #include <direct.h>
+#else
+#include <wcecompat/direct.h>
+#endif
 #include <stdarg.h>
 #include <sys/stat.h>
 
@@ -150,5 +154,9 @@
 
 KDEWIN_EXPORT int kdewin32_mkdir(const char *path, mode_t mode)
 {
+#ifndef _WIN32_WCE
 	return mkdir(path);
+#else
+    return mkdir(path,0);
+#endif
 }
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/src/fsync.c
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/src/fsync.c	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/src/fsync.c	(Arbeitskopie)
@@ -20,7 +20,11 @@
 #include <kdewin_export.h>
 #include <windows.h>
 
+#ifndef _WIN32_WCE
 #include <io.h>
+#else
+#include <wcecompat/io.h>
+#endif
 
 KDEWIN_EXPORT int fsync(int fd)
 {
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/src/mmap.c
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/src/mmap.c	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/src/mmap.c	(Arbeitskopie)
@@ -26,7 +26,12 @@
 #include <assert.h>
 #include <stdlib.h>
 #include <errno.h>
+#ifndef _WIN32_WCE
 #include <io.h>
+#else
+#include <wcecompat/io.h>
+#define FILE_MAP_COPY 0
+#endif
 #include <sys/mman.h>
 #include <sys/socket.h>
 
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/src/CMakeLists.txt
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/src/CMakeLists.txt	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/src/CMakeLists.txt	(Arbeitskopie)
@@ -59,7 +59,11 @@
 # for compatibility
 set(CMAKE_DEBUG_POSTFIX "d")
 add_library(kdewin32 SHARED ${win_LIB_SRCS})
-target_link_libraries(kdewin32 advapi32 shell32 ws2_32 )
+if(NOT WINCE)
+    target_link_libraries(kdewin32 advapi32 shell32 ws2_32 )
+else(NOT WINCE)
+    target_link_libraries(kdewin32 ${QT_QTCORE_LIBRARIES} ws2 )
+endif(NOT WINCE)
 set_target_properties(kdewin32 PROPERTIES DEFINE_SYMBOL MAKE_KDEWIN32_LIB )
 set_target_properties(kdewin32 PROPERTIES VERSION ${KDEWIN_VERSION_STR} )
 set_target_properties(kdewin32 PROPERTIES COMPILE_FLAGS "-I${target_include_directories}")
Index: C:/kderootce/svn/trunk/kdesupport/kdewin/CMakeLists.txt
===================================================================
--- C:/kderootce/svn/trunk/kdesupport/kdewin/CMakeLists.txt	(Revision 1128080)
+++ C:/kderootce/svn/trunk/kdesupport/kdewin/CMakeLists.txt	(Arbeitskopie)
@@ -8,6 +8,13 @@
 
 set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake/modules")
 
+if(WINCE)
+    find_package(Wcecompat REQUIRED)
+    #include_directories(${WCECOMPAT_INCLUDE_DIR})
+    include_directories(${CMAKE_INCLUDE_PATH})
+    set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${WCECOMPAT_INCLUDE_DIR})
+endif(WINCE)
+
 if (NOT WIN32)
    message(FATAL_ERROR "This directory can only be built under Windows")
 endif (NOT WIN32)
