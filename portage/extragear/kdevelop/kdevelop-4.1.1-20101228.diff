diff -Nru kdevelop-4.1.1.orig/CMakeLists.txt kdevelop-4.1.1/CMakeLists.txt
--- kdevelop-4.1.1.orig/CMakeLists.txt	2010-11-25 22:14:04.000000000 +0100
+++ kdevelop-4.1.1/CMakeLists.txt	2010-12-28 18:28:25.083204600 +0100
@@ -11,6 +11,10 @@
 set(KDE_MIN_VERSION "4.3.0")
 find_package(KDE4 4.3.0 REQUIRED)
 
+if(MSVC)
+    add_definitions(-wd4996)        # remove if you ever want to start developing kdevelop
+endif(MSVC)
+
 if( ${KDE_VERSION} VERSION_GREATER 4.5.63 )
     message(FATAL_ERROR "KDevelop doesn't work (yet) with kdelibs 4.5.64 or later, please use the movingranges branch (http://gitorious.org/+kdevelop-developers/kdevelop/devel-kdevelop)")
 endif(${KDE_VERSION} VERSION_GREATER 4.5.63)
diff -Nru kdevelop-4.1.1.orig/languages/cpp/CMakeLists.txt kdevelop-4.1.1/languages/cpp/CMakeLists.txt
--- kdevelop-4.1.1.orig/languages/cpp/CMakeLists.txt	2010-11-25 22:07:30.000000000 +0100
+++ kdevelop-4.1.1/languages/cpp/CMakeLists.txt	2010-12-28 18:28:25.612234900 +0100
@@ -36,6 +36,7 @@
     stringhelpers.cpp
     includepathresolver.cpp
     setuphelpers.cpp
+    setuphelpers_gcc.cpp
     quickopen.cpp
     
     codecompletion/model.cpp
@@ -56,6 +57,10 @@
 #     codegen/makeimplementationprivate.cpp
 )
 
+if(WIN32)
+    set(kdevcpplanguagesupport_PART_SRCS ${kdevcpplanguagesupport_PART_SRCS} setuphelpers_msvc.cpp)
+endif(WIN32)
+
 set(kdevcpplanguagesupport_LIB_UI
     codegen/ui/custom_include_paths.ui
 #     codegen/ui/privateimplementation.ui
@@ -99,3 +104,11 @@
 
 install(FILES kdevcppsupport.desktop DESTINATION ${SERVICES_INSTALL_DIR})
 install(FILES kdevcppsupport.rc DESTINATION ${DATA_INSTALL_DIR}/kdevcppsupport)
+
+########### only Windows ################
+if(WIN32)
+    set(kdevmsvcdefinehelper_SRCS msvcdefinehelper.cpp)
+    add_executable(kdevmsvcdefinehelper ${kdevmsvcdefinehelper_SRCS})
+    install(TARGETS kdevmsvcdefinehelper RUNTIME DESTINATION bin
+                                         LIBRARY DESTINATION lib)
+endif(WIN32)
\ No newline at end of file
diff -Nru kdevelop-4.1.1.orig/languages/cpp/codecompletion/context.cpp kdevelop-4.1.1/languages/cpp/codecompletion/context.cpp
--- kdevelop-4.1.1.orig/languages/cpp/codecompletion/context.cpp	2010-11-25 22:07:30.000000000 +0100
+++ kdevelop-4.1.1/languages/cpp/codecompletion/context.cpp	2010-12-28 18:28:25.615235000 +0100
@@ -21,6 +21,8 @@
 #include <ktexteditor/document.h>
 #include <klocalizedstring.h>
 
+#include <iterator>
+
 #include <interfaces/idocumentcontroller.h>
 
 #include <language/interfaces/ilanguagesupport.h>
diff -Nru kdevelop-4.1.1.orig/languages/cpp/cppduchain/declarationbuilder.cpp kdevelop-4.1.1/languages/cpp/cppduchain/declarationbuilder.cpp
--- kdevelop-4.1.1.orig/languages/cpp/cppduchain/declarationbuilder.cpp	2010-11-25 22:07:30.000000000 +0100
+++ kdevelop-4.1.1/languages/cpp/cppduchain/declarationbuilder.cpp	2010-12-28 18:28:25.619235300 +0100
@@ -23,6 +23,7 @@
 
 #include <QByteArray>
 #include <typeinfo>
+#include <iterator>
 
 #include "templatedeclaration.h"
 
diff -Nru kdevelop-4.1.1.orig/languages/cpp/msvcdefinehelper.cpp kdevelop-4.1.1/languages/cpp/msvcdefinehelper.cpp
--- kdevelop-4.1.1.orig/languages/cpp/msvcdefinehelper.cpp	1970-01-01 01:00:00.000000000 +0100
+++ kdevelop-4.1.1/languages/cpp/msvcdefinehelper.cpp	2010-12-28 18:28:25.621235400 +0100
@@ -0,0 +1,34 @@
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+
+int main(int argc, char**argv)
+{
+    char *next, *token, *tmp, *equal;
+    int i = 0, nextlen, currentlen;
+    next = getenv("MSC_CMD_FLAGS");
+
+    while (next != NULL)
+    {
+        token = next;
+        next = strstr(next + 1, " -");
+
+        if(strncmp(token, " -D", 3) == 0) {
+            if(next != NULL) 
+                nextlen = strlen(next);
+            else
+                nextlen = 0;
+
+            currentlen = strlen(token);
+            tmp = new char[(currentlen - nextlen + 1)];
+            strncpy(tmp, token, currentlen - nextlen);
+            tmp[currentlen - nextlen] = '\0';
+            equal = strchr(tmp, '=');
+            if(equal != NULL) *equal = ' ';
+            printf("#define %s\n", tmp + 3);
+            delete [] tmp;
+        }
+    }
+    // return an error so that the compiler doesn't check for the output
+    return 1;
+}
\ No newline at end of file
diff -Nru kdevelop-4.1.1.orig/languages/cpp/setuphelpers.cpp kdevelop-4.1.1/languages/cpp/setuphelpers.cpp
--- kdevelop-4.1.1.orig/languages/cpp/setuphelpers.cpp	2010-11-25 22:07:30.000000000 +0100
+++ kdevelop-4.1.1/languages/cpp/setuphelpers.cpp	2010-12-28 18:28:25.623235500 +0100
@@ -23,9 +23,7 @@
 
 #include <QString>
 #include <QStringList>
-#include <QDir>
 
-#include <kprocess.h>
 #include <kdebug.h>
 #include <parser/rpp/chartools.h>
 #include <parser/rpp/macrorepository.h>
@@ -33,72 +31,19 @@
 using namespace KDevelop;
 
 namespace CppTools {
+QStringList gccSetupStandardIncludePaths();
+QStringList msvcSetupStandardIncludePaths();
+const QVector<rpp::pp_macro*>& gccStandardMacros();
+const QVector<rpp::pp_macro*>& msvcStandardMacros();
 
 QStringList setupStandardIncludePaths()
 {
-    QStringList includePaths;
-    
-    KProcess proc;
-    proc.setOutputChannelMode(KProcess::MergedChannels);
-    proc.setTextModeEnabled(true);
-
-    // The following command will spit out a bnuch of information we don't care
-    // about before spitting out the include paths.  The parts we care about
-    // look like this:
-    // #include "..." search starts here:
-    // #include <...> search starts here:
-    //  /usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2
-    //  /usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu
-    //  /usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/backward
-    //  /usr/local/include
-    //  /usr/lib/gcc/i486-linux-gnu/4.1.2/include
-    //  /usr/include
-    // End of search list.
-    proc <<"gcc" <<"-xc++" <<"-E" <<"-v" <<"/dev/null";
-
-    // We'll use the following constants to know what we're currently parsing.
-    const short parsingInitial = 0;
-    const short parsedFirstSearch = 1;
-    const short parsingIncludes = 2;
-    const short parsingFinished = 3;
-    short parsingMode = parsingInitial;
-
-    if (proc.execute(5000) == 0) {
-        QString line;
-        while (proc.canReadLine() && parsingMode != parsingFinished) {
-            QByteArray buff = proc.readLine();
-            if (!buff.isEmpty()) {
-                line = buff;
-                switch (parsingMode) {
-                case parsingInitial:
-                    if (line.indexOf("#include \"...\"") != -1) {
-                        parsingMode = parsedFirstSearch;
-                    }
-                    break;
-                case parsedFirstSearch:
-                    if (line.indexOf("#include <...>") != -1) {
-                        parsingMode = parsingIncludes;
-                        break;
-                    }
-                case parsingIncludes:
-                    //if (!line.indexOf(QDir::separator()) == -1 && line != "." ) {
-                    //Detect the include-paths by the first space that is prepended. Reason: The list may contain relative paths like "."
-                    if (!line.startsWith(" ") ) {
-                        // We've reached the end of the list.
-                        parsingMode = parsingFinished;
-                    } else {
-                        line = line.trimmed();
-                        // This is an include path, add it to the list.
-                        includePaths << QDir::cleanPath(line);
-                    }
-                    break;
-                }
-            }
-        }
-    } else {
-        kDebug(9007) <<"Unable to read standard c++ macro definitions from gcc:" <<QString(proc.readAll()) ;
-    }
-    
+// this should happen depending on the actual compiler used for the target and not on the compiler used for kdevelop itself.
+#ifdef _MSC_VER
+    QStringList includePaths = msvcSetupStandardIncludePaths();
+#else
+    QStringList includePaths = gccSetupStandardIncludePaths();
+#endif
     return includePaths;
 }
 
@@ -107,53 +52,6 @@
   macros.insert(macro);
 }
 
-QVector<rpp::pp_macro*> computeGccStandardMacros()
-{
-    QVector<rpp::pp_macro*> ret;
-    //Get standard macros from gcc
-    KProcess proc;
-    proc.setOutputChannelMode(KProcess::MergedChannels);
-    proc.setTextModeEnabled(true);
-
-    // The output of the following gcc commands is several line in the format:
-    // "#define MACRO [definition]", where definition may or may not be present.
-    // Parsing each line sequentially, we can easily build the macro set.
-    proc <<"gcc" <<"-xc++" <<"-E" <<"-dM" <<"/dev/null";
-
-    if (proc.execute(5000) == 0) {
-        QString line;
-        while (proc.canReadLine()) {
-            QByteArray buff = proc.readLine();
-            if (!buff.isEmpty()) {
-                line = buff;
-                if (line.startsWith("#define ")) {
-                    line = line.right(line.length() - 8).trimmed();
-                    int pos = line.indexOf(' ');
-                    
-                    ret.append(new rpp::pp_macro);
-                    
-                    rpp::pp_macro& macro(*ret.back());
-                    if (pos != -1) {
-                        macro.name = IndexedString( line.left(pos) );
-                        macro.setDefinitionText( line.right(line.length() - pos - 1).toUtf8() );
-                    } else {
-                        macro.name = IndexedString( line );
-                    }
-                }
-            }
-        }
-    } else {
-        kDebug(9007) <<"Unable to read standard c++ macro definitions from gcc:" <<QString(proc.readAll()) ;
-    }
-    return ret;
-}
-
-const QVector<rpp::pp_macro*>& gccStandardMacros()
-{
-  static QVector<rpp::pp_macro*> macros = computeGccStandardMacros();
-  return macros;
-}
-
 Cpp::ReferenceCountedMacroSet setupStandardMacros()
 {
     Cpp::ReferenceCountedMacroSet macros;
@@ -258,8 +156,12 @@
       m.setDefinitionText("(size_t)((void)TYPE::MEMBER)");
       insertMacro( macros, m );
     }
-    
+
+#ifdef _MSC_VER    
+    foreach(const rpp::pp_macro* macro, msvcStandardMacros())
+#else
     foreach(const rpp::pp_macro* macro, gccStandardMacros())
+#endif
       insertMacro(macros, *macro);
     
     return macros;
diff -Nru kdevelop-4.1.1.orig/languages/cpp/setuphelpers_gcc.cpp kdevelop-4.1.1/languages/cpp/setuphelpers_gcc.cpp
--- kdevelop-4.1.1.orig/languages/cpp/setuphelpers_gcc.cpp	1970-01-01 01:00:00.000000000 +0100
+++ kdevelop-4.1.1/languages/cpp/setuphelpers_gcc.cpp	2010-12-28 18:28:25.627235700 +0100
@@ -0,0 +1,159 @@
+/*
+* This file is part of KDevelop
+*
+* Copyright 2007-2008 David Nolden <david.nolden.kdevelop@art-master.de>
+* Copyright 2007 Kris Wong <kris.p.wong@gmail.com>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU Library General Public License as
+* published by the Free Software Foundation; either version 2 of the
+* License, or (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public
+* License along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+*/
+#include "setuphelpers.h"
+
+#include <QString>
+#include <QStringList>
+#include <QDir>
+
+#include <kprocess.h>
+#include <kdebug.h>
+#include <parser/rpp/chartools.h>
+#include <parser/rpp/macrorepository.h>
+
+using namespace KDevelop;
+
+#ifdef _WIN32
+#define NULL_DEVICE "NUL"
+#else
+#define NULL_DEVICE "/dev/null"
+#endif
+
+namespace CppTools {
+
+QStringList gccSetupStandardIncludePaths()
+{
+    QStringList includePaths;
+    
+    KProcess proc;
+    proc.setOutputChannelMode(KProcess::MergedChannels);
+    proc.setTextModeEnabled(true);
+
+    // The following command will spit out a bnuch of information we don't care
+    // about before spitting out the include paths.  The parts we care about
+    // look like this:
+    // #include "..." search starts here:
+    // #include <...> search starts here:
+    //  /usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2
+    //  /usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu
+    //  /usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/backward
+    //  /usr/local/include
+    //  /usr/lib/gcc/i486-linux-gnu/4.1.2/include
+    //  /usr/include
+    // End of search list.
+    proc <<"gcc" <<"-xc++" <<"-E" <<"-v" <<NULL_DEVICE;
+
+    // We'll use the following constants to know what we're currently parsing.
+    const short parsingInitial = 0;
+    const short parsedFirstSearch = 1;
+    const short parsingIncludes = 2;
+    const short parsingFinished = 3;
+    short parsingMode = parsingInitial;
+
+    if (proc.execute(5000) == 0) {
+        QString line;
+        while (proc.canReadLine() && parsingMode != parsingFinished) {
+            QByteArray buff = proc.readLine();
+            if (!buff.isEmpty()) {
+                line = buff;
+                switch (parsingMode) {
+                case parsingInitial:
+                    if (line.indexOf("#include \"...\"") != -1) {
+                        parsingMode = parsedFirstSearch;
+                    }
+                    break;
+                case parsedFirstSearch:
+                    if (line.indexOf("#include <...>") != -1) {
+                        parsingMode = parsingIncludes;
+                        break;
+                    }
+                case parsingIncludes:
+                    //if (!line.indexOf(QDir::separator()) == -1 && line != "." ) {
+                    //Detect the include-paths by the first space that is prepended. Reason: The list may contain relative paths like "."
+                    if (!line.startsWith(" ") ) {
+                        // We've reached the end of the list.
+                        parsingMode = parsingFinished;
+                    } else {
+                        line = line.trimmed();
+                        // This is an include path, add it to the list.
+                        includePaths << QDir::cleanPath(line);
+                    }
+                    break;
+                }
+            }
+        }
+    } else {
+        kDebug(9007) <<"Unable to read standard c++ macro definitions from gcc:" <<QString(proc.readAll()) ;
+    }
+    
+    return includePaths;
+}
+
+QVector<rpp::pp_macro*> computeGccStandardMacros()
+{
+    QVector<rpp::pp_macro*> ret;
+    //Get standard macros from gcc
+    KProcess proc;
+    proc.setOutputChannelMode(KProcess::MergedChannels);
+    proc.setTextModeEnabled(true);
+
+    // The output of the following gcc commands is several line in the format:
+    // "#define MACRO [definition]", where definition may or may not be present.
+    // Parsing each line sequentially, we can easily build the macro set.
+    proc <<"gcc" <<"-xc++" <<"-E" <<"-dM" <<NULL_DEVICE;
+
+    if (proc.execute(5000) == 0) {
+        QString line;
+        while (proc.canReadLine()) {
+            QByteArray buff = proc.readLine();
+            if (!buff.isEmpty()) {
+                line = buff;
+                if (line.startsWith("#define ")) {
+                    line = line.right(line.length() - 8).trimmed();
+                    int pos = line.indexOf(' ');
+                    
+                    ret.append(new rpp::pp_macro);
+                    
+                    rpp::pp_macro& macro(*ret.back());
+                    if (pos != -1) {
+                        macro.name = IndexedString( line.left(pos) );
+                        macro.setDefinitionText( line.right(line.length() - pos - 1).toUtf8() );
+                    } else {
+                        macro.name = IndexedString( line );
+                    }
+                }
+            }
+        }
+    } else {
+        kDebug(9007) <<"Unable to read standard c++ macro definitions from gcc:" <<QString(proc.readAll()) ;
+    }
+    return ret;
+}
+
+const QVector<rpp::pp_macro*>& gccStandardMacros()
+{
+  static QVector<rpp::pp_macro*> macros = computeGccStandardMacros();
+  return macros;
+}
+
+}
+
diff -Nru kdevelop-4.1.1.orig/languages/cpp/setuphelpers_msvc.cpp kdevelop-4.1.1/languages/cpp/setuphelpers_msvc.cpp
--- kdevelop-4.1.1.orig/languages/cpp/setuphelpers_msvc.cpp	1970-01-01 01:00:00.000000000 +0100
+++ kdevelop-4.1.1/languages/cpp/setuphelpers_msvc.cpp	2010-12-29 03:56:34.080983700 +0100
@@ -0,0 +1,104 @@
+/*
+* This file is part of KDevelop
+*
+* Copyright 2010 Patrick Spendrin <ps_ml@gmx.de>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU Library General Public License as
+* published by the Free Software Foundation; either version 2 of the
+* License, or (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public
+* License along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+*/
+#include "setuphelpers.h"
+
+#include <QString>
+#include <QStringList>
+#include <QProcessEnvironment>
+#include <QDir>
+#include <QTemporaryFile>
+
+#include <kprocess.h>
+#include <kdebug.h>
+#include <ktemporaryfile.h>
+#include <parser/rpp/chartools.h>
+#include <parser/rpp/macrorepository.h>
+
+using namespace KDevelop;
+
+namespace CppTools {
+
+QStringList msvcSetupStandardIncludePaths()
+{
+    QStringList _includePaths = QProcessEnvironment::systemEnvironment().value("INCLUDE").split(";", QString::SkipEmptyParts);
+    QStringList includePaths;
+    foreach(const QString& include, _includePaths) {
+        includePaths.append(QDir::fromNativeSeparators(include));
+    }
+    return includePaths;
+}
+
+QVector<rpp::pp_macro*> computeMsvcStandardMacros()
+{
+    QVector<rpp::pp_macro*> ret;
+    //Get standard macros from kdevmsvcdefinehelpers
+    KProcess proc;
+    proc.setOutputChannelMode(KProcess::MergedChannels);
+    proc.setTextModeEnabled(true);
+    
+    // we want to use kdevmsvcdefinehelper as a pseudo compiler backend which
+    // returns the defines used in msvc. there is no such thing as -dM with cl.exe
+    proc <<"cl.exe" <<"/nologo" <<"/Bxkdevmsvcdefinehelper" <<"empty.cpp";
+
+    // this will fail, so check on that as well
+    if (proc.execute(5000) == 2) {
+        QString line;
+        proc.readLine(); // read the filename
+
+        while (proc.canReadLine()) {
+            QByteArray buff = proc.readLine();
+            kDebug(9007) << "msvcstandardmacros:" << buff;
+            if (!buff.isEmpty()) {
+                line = buff;
+                if (line.startsWith("#define ")) {
+                    line = line.right(line.length() - 8).trimmed();
+                    int pos = line.indexOf(' ');
+                    
+                    ret.append(new rpp::pp_macro);
+                    
+                    rpp::pp_macro& macro(*ret.back());
+                    if (pos != -1) {
+                        macro.name = IndexedString( line.left(pos) );
+                        macro.setDefinitionText( line.right(line.length() - pos - 1).toUtf8() );
+                    } else {
+                        macro.name = IndexedString( line );
+                    }
+                }
+            } else {
+                kDebug(9007) << "buff is empty!";
+            }
+        }
+    } else {
+        kDebug(9007) <<"Unable to read standard c++ macro definitions from cl.exe;";
+        while (proc.canReadLine()) kDebug() << proc.readLine();
+        kDebug() << proc.exitCode();
+    }
+    return ret;
+}
+
+const QVector<rpp::pp_macro*>& msvcStandardMacros()
+{
+  static QVector<rpp::pp_macro*> macros = computeMsvcStandardMacros();
+  return macros;
+}
+
+}
+
diff -Nru kdevelop-4.1.1.orig/languages/cpp/tests/CMakeLists.txt kdevelop-4.1.1/languages/cpp/tests/CMakeLists.txt
--- kdevelop-4.1.1.orig/languages/cpp/tests/CMakeLists.txt	2010-11-25 22:07:30.000000000 +0100
+++ kdevelop-4.1.1/languages/cpp/tests/CMakeLists.txt	2010-12-28 18:28:25.656237400 +0100
@@ -23,6 +23,7 @@
   ../codegen/simplerefactoring.cpp
   ../includepathresolver.cpp
   ../setuphelpers.cpp
+  ../setuphelpers_gcc.cpp
   ../codegen/cppnewclass.cpp
   ../codegen/progressdialogs.cpp
   ../codegen/unresolvedincludeassistant.cpp
@@ -32,6 +33,9 @@
   ../codecompletion/missingincludemodel.cpp
   ../codecompletion/missingincludeitem.cpp
 )
+if(MSVC)
+    list(APPEND cppcodecompletiontest_SRCS ../setuphelpers_msvc.cpp)
+endif(MSVC)
 
 set(cppcodegentest_SRCS
   test_cppcodegen.cpp
@@ -47,6 +51,7 @@
   ../codegen/simplerefactoring.cpp
   ../includepathresolver.cpp
   ../setuphelpers.cpp
+  ../setuphelpers_gcc.cpp
   ../codegen/cppnewclass.cpp
   ../codegen/progressdialogs.cpp
   ../codegen/unresolvedincludeassistant.cpp
@@ -56,6 +61,9 @@
   ../codecompletion/missingincludemodel.cpp
   ../codecompletion/missingincludeitem.cpp
 )
+if(MSVC)
+    list(APPEND cppcodegentest_SRCS ../setuphelpers_msvc.cpp)
+endif(MSVC)
 
 add_definitions(-DBUILD_TESTS)
 
diff -Nru kdevelop-4.1.1.orig/projectmanagers/cmake/CMakeLists.txt kdevelop-4.1.1/projectmanagers/cmake/CMakeLists.txt
--- kdevelop-4.1.1.orig/projectmanagers/cmake/CMakeLists.txt	2010-11-25 22:07:30.000000000 +0100
+++ kdevelop-4.1.1/projectmanagers/cmake/CMakeLists.txt	2010-12-28 18:28:25.657237400 +0100
@@ -72,6 +72,7 @@
                         ${QT_QTSCRIPT_LIBRARY} ${KDEVPLATFORM_LANGUAGE_LIBRARIES}
                         )
 
+kde4_add_kcfg_files( cmakemanager_SRCS cmakeconfig.kcfgc )
 kde4_add_ui_files( cmakemanager_SRCS ${cmakemanager_UI} )
 kde4_add_plugin( kdevcmakemanager ${cmakemanager_SRCS} )
 target_link_libraries( kdevcmakemanager ${KDE4_KDEUI_LIBS} ${KDE4_KIO_LIBS}
